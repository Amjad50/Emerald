# We could use `@actions-rs/cargo` Action ability to automatically install `cross` tool
# in order to compile our application for some unusual targets.

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

name: OS Build checks

jobs:
  kernel:
    name: Kernel
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: >
          sudo apt update -y &&
          sudo apt install -y xorriso mtools grub-pc-bin qemu-system-x86
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-01-04
          components: rust-src
      - uses: davidB/rust-cargo-make@v1
      - run: cargo make kernel_check
      - run: cargo make kernel_iso
      - name: Upload kernel artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: kernel
          path: target/debug/kernel.iso
          overwrite: true

  toolchain:
    name: Toolchain
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository without submodules, we will do it manually
      - uses: actions/checkout@v2
        with:
          submodules: 'false'
      - name: Get changed files in `rust` submodule
        id: rust-changes
        uses: tj-actions/changed-files@v42
        with:
          files: 'extern/rust'
      
      - name: Test if artifact is available
        if: steps.rust-changes.outputs.any_changed == 'false'
        id: download-artifact
        uses: LIT-Protocol/artifact-exists-action@v0
        with:
          name: toolchain

      # run after this if something changed, otherwise skip all
      - uses: actions-rs/toolchain@v1
        if: steps.rust-changes.outputs.any_changed == 'true' || steps.download-artifact.outputs.exists == 'false'
        with:
          toolchain: nightly-2024-01-04
          components: rust-src
      - name: Get cargo-make
        if: steps.rust-changes.outputs.any_changed == 'true' || steps.download-artifact.outputs.exists == 'false'
        uses: davidB/rust-cargo-make@v1
      
      # Fetch only top level submodules without recursive
      # building the toolchain will automatically fetch the children of `rust`
      # 100 so that we can get at least a single `upstream` commit, for llvm-ci cache to work
      - name: submodule fetch bare
        if: steps.rust-changes.outputs.any_changed == 'true' || steps.download-artifact.outputs.exists == 'false'
        run: git submodule update --init --depth 100
      - run: cargo make toolchain_dist
        if: steps.rust-changes.outputs.any_changed == 'true' || steps.download-artifact.outputs.exists == 'false'
      - name: Upload toolchain artifact
        if: github.ref == 'refs/heads/master' && (steps.rust-changes.outputs.any_changed == 'true' || steps.download-artifact.outputs.exists == 'false')
        uses: actions/upload-artifact@v4
        with:
          name: toolchain
          path: ./extern/rust/build/dist/(rustc-1*linux|rust-std|rustfmt)*.xz
          overwrite: true

  filesystem:
    name: Filesystem
    needs: toolchain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-01-04
          components: rust-src
      - uses: davidB/rust-cargo-make@v1
      - uses: actions/download-artifact@v4
        id: download-toolchain
        with:
          path: /tmp
          name: toolchain
      - name: install toolchain
        run: sh tools/install_zipped_toolchain_and_link.sh ${{ steps.download-toolchain.outputs.download-path }}
      - run: cargo make filesystem
        env: 
          USE_INSTALLED_TOOLCHAIN: true
      - name: Upload filesystem artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: filesystem_programs
          path: filesystem
          overwrite: true

