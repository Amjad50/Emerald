(function() {
    var type_impls = Object.fromEntries([["framehop",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-UnwinderX86_64%3CD,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#26-30\">Source</a><a href=\"#impl-Clone-for-UnwinderX86_64%3CD,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"framehop/x86_64/struct.UnwinderX86_64.html\" title=\"struct framehop::x86_64::UnwinderX86_64\">UnwinderX86_64</a>&lt;D, P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#27-29\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","framehop::UnwinderNative"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-UnwinderX86_64%3CD,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#20-24\">Source</a><a href=\"#impl-Default-for-UnwinderX86_64%3CD,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"framehop/x86_64/struct.UnwinderX86_64.html\" title=\"struct framehop::x86_64::UnwinderX86_64\">UnwinderX86_64</a>&lt;D, P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#21-23\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","framehop::UnwinderNative"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unwinder-for-UnwinderX86_64%3CD,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#39-68\">Source</a><a href=\"#impl-Unwinder-for-UnwinderX86_64%3CD,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>]&gt;, P: <a class=\"trait\" href=\"framehop/trait.AllocationPolicy.html\" title=\"trait framehop::AllocationPolicy\">AllocationPolicy</a>&gt; <a class=\"trait\" href=\"framehop/trait.Unwinder.html\" title=\"trait framehop::Unwinder\">Unwinder</a> for <a class=\"struct\" href=\"framehop/x86_64/struct.UnwinderX86_64.html\" title=\"struct framehop::x86_64::UnwinderX86_64\">UnwinderX86_64</a>&lt;D, P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.UnwindRegs\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#40\">Source</a><a href=\"#associatedtype.UnwindRegs\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"framehop/trait.Unwinder.html#associatedtype.UnwindRegs\" class=\"associatedtype\">UnwindRegs</a> = <a class=\"struct\" href=\"framehop/x86_64/struct.UnwindRegsX86_64.html\" title=\"struct framehop::x86_64::UnwindRegsX86_64\">UnwindRegsX86_64</a></h4></section></summary><div class='docblock'>The unwind registers type for the targeted CPU architecture.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Cache\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#41\">Source</a><a href=\"#associatedtype.Cache\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"framehop/trait.Unwinder.html#associatedtype.Cache\" class=\"associatedtype\">Cache</a> = <a class=\"struct\" href=\"framehop/x86_64/struct.CacheX86_64.html\" title=\"struct framehop::x86_64::CacheX86_64\">CacheX86_64</a>&lt;P&gt;</h4></section></summary><div class='docblock'>The unwind cache for the targeted CPU architecture.\nThis is an associated type because the cache stores unwind rules, whose concrete\ntype depends on the CPU arch, and because the cache can support different allocation\npolicies.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Module\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#42\">Source</a><a href=\"#associatedtype.Module\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"framehop/trait.Unwinder.html#associatedtype.Module\" class=\"associatedtype\">Module</a> = <a class=\"struct\" href=\"framehop/struct.Module.html\" title=\"struct framehop::Module\">Module</a>&lt;D&gt;</h4></section></summary><div class='docblock'>The module type. This is an associated type because the concrete type varies\ndepending on the type you use to give the module access to the unwind section data.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_module\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#44-46\">Source</a><a href=\"#method.add_module\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"framehop/trait.Unwinder.html#tymethod.add_module\" class=\"fn\">add_module</a>(&amp;mut self, module: <a class=\"struct\" href=\"framehop/struct.Module.html\" title=\"struct framehop::Module\">Module</a>&lt;D&gt;)</h4></section></summary><div class='docblock'>Add a module that’s loaded in the profiled process. This is how you provide unwind\ninformation and address ranges. <a href=\"framehop/trait.Unwinder.html#tymethod.add_module\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_module\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#48-50\">Source</a><a href=\"#method.remove_module\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"framehop/trait.Unwinder.html#tymethod.remove_module\" class=\"fn\">remove_module</a>(&amp;mut self, module_address_range_start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Remove a module that was added before using <code>add_module</code>, keyed by the start\naddress of that module’s address range. If no match is found, the call is ignored.\nThis should be called whenever a module is unloaded from the process.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_known_code_address\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#52-54\">Source</a><a href=\"#method.max_known_code_address\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"framehop/trait.Unwinder.html#tymethod.max_known_code_address\" class=\"fn\">max_known_code_address</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Returns the highest code address that is known in this process based on the module\naddress ranges. Returns 0 if no modules have been added. <a href=\"framehop/trait.Unwinder.html#tymethod.max_known_code_address\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwind_frame\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#56-67\">Source</a><a href=\"#method.unwind_frame\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"framehop/trait.Unwinder.html#tymethod.unwind_frame\" class=\"fn\">unwind_frame</a>&lt;F&gt;(\n    &amp;self,\n    address: <a class=\"enum\" href=\"framehop/enum.FrameAddress.html\" title=\"enum framehop::FrameAddress\">FrameAddress</a>,\n    regs: &amp;mut <a class=\"struct\" href=\"framehop/x86_64/struct.UnwindRegsX86_64.html\" title=\"struct framehop::x86_64::UnwindRegsX86_64\">UnwindRegsX86_64</a>,\n    cache: &amp;mut <a class=\"struct\" href=\"framehop/x86_64/struct.CacheX86_64.html\" title=\"struct framehop::x86_64::CacheX86_64\">CacheX86_64</a>&lt;P&gt;,\n    read_stack: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut F</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>&gt;, <a class=\"enum\" href=\"framehop/enum.Error.html\" title=\"enum framehop::Error\">Error</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Unwind a single frame, to recover return address and caller register values.\nThis is the main entry point for unwinding.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_frames\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/framehop/unwinder.rs.html#76-87\">Source</a><a href=\"#method.iter_frames\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"framehop/trait.Unwinder.html#method.iter_frames\" class=\"fn\">iter_frames</a>&lt;'u, 'c, 'r, F&gt;(\n    &amp;'u self,\n    pc: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>,\n    regs: Self::<a class=\"associatedtype\" href=\"framehop/trait.Unwinder.html#associatedtype.UnwindRegs\" title=\"type framehop::Unwinder::UnwindRegs\">UnwindRegs</a>,\n    cache: &amp;'c mut Self::<a class=\"associatedtype\" href=\"framehop/trait.Unwinder.html#associatedtype.Cache\" title=\"type framehop::Unwinder::Cache\">Cache</a>,\n    read_stack: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;'r mut F</a>,\n) -&gt; <a class=\"struct\" href=\"framehop/struct.UnwindIterator.html\" title=\"struct framehop::UnwindIterator\">UnwindIterator</a>&lt;'u, 'c, 'r, Self, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u64.html\">u64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Return an iterator that unwinds frame by frame until the end of the stack is found.</div></details></div></details>","Unwinder","framehop::UnwinderNative"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnwinderX86_64%3CD,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#32-37\">Source</a><a href=\"#impl-UnwinderX86_64%3CD,+P%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, P&gt; <a class=\"struct\" href=\"framehop/x86_64/struct.UnwinderX86_64.html\" title=\"struct framehop::x86_64::UnwinderX86_64\">UnwinderX86_64</a>&lt;D, P&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/framehop/x86_64/unwinder.rs.html#34-36\">Source</a><h4 class=\"code-header\">pub fn <a href=\"framehop/x86_64/struct.UnwinderX86_64.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an unwinder for a process.</p>\n</div></details></div></details>",0,"framehop::UnwinderNative"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[14529]}