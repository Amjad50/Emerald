var searchIndex = new Map(JSON.parse('[\
["az",{"doc":"Numeric casts","t":"KKKKKKKKKFKKKKKKKKKMNNNHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMNHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMNHMNNNNNNNNNNNNNNNNNNNNNNNNMNNMNHMNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMNHMNNNNNNNNNNNNNNNNNNNNNNNNMN","n":["Az","Cast","CastFrom","CheckedAs","CheckedCast","CheckedCastFrom","OverflowingAs","OverflowingCast","OverflowingCastFrom","Round","SaturatingAs","SaturatingCast","SaturatingCastFrom","UnwrappedAs","UnwrappedCast","UnwrappedCastFrom","WrappingAs","WrappingCast","WrappingCastFrom","az","az","borrow","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_from","cast_from","checked_as","checked_as","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast","checked_cast_from","checked_cast_from","clone","cmp","default","eq","fmt","fmt","fmt","fmt","from","into","overflowing_as","overflowing_as","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast","overflowing_cast_from","overflowing_cast_from","partial_cmp","saturating_as","saturating_as","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast","saturating_cast_from","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_as","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast","wrapping_cast_from","wrapping_cast_from"],"q":[[0,"az"],[287,"core::num::wrapping"],[288,"core::option"],[289,"core::clone"],[290,"core::cmp"],[291,"core::cmp"],[292,"core::cmp"],[293,"core::fmt"],[294,"core::any"]],"d":["Used to cast values.","Used to cast values.","Used to cast values.","Used for checked casts.","Used for checked casts.","Used for checked casts.","Used for overflowing casts.","Used for overflowing casts.","Used for overflowing casts.","Used to convert floating-point numbers to integers with …","Used to cast into the destination type, saturating if the …","Used to cast into the destination type, saturating if the …","Used to cast, saturating if the value does not fit.","Used to cast values, panicking if the value does not fit.","Used to cast values, panicking if the value does not fit.","Used to cast values, panicking if the value does not fit.","Wrapping cast.","Wrapping cast.","Wrapping cast.","Casts the value.","","","","Casts the value.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value.","","Casts the value, returning <code>None</code> if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Casts the value.","","Overflowing cast.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","","Casts the value.","","Casts the value, saturating if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","","","","Casts the value.","","Casts the value, panicking if the value does not fit.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.","","Casts the value.","","Casts the value, wrapping on overflow.","Casts the value.","","","","","","","","","","","","","","","","","","","","","","","","","Casts the value.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,0,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,19,4,20,4,0,22,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,23,4,4,4,4,4,4,4,4,4,4,4,36,4,0,38,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,4,4,41,4,0,42,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,43,4,4,4,4,46,4,0,47,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,48,4,49,4,0,50,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,51,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,-1,[],[[2,[-1]]]],[2,-1,[]],[[[4,[3]]],5],[[[4,[6]]],7],[[[4,[3]]],[[9,[8]]]],[[[4,[3]]],[[9,[10]]]],[[[4,[3]]],11],[[[4,[6]]],[[9,[12]]]],[[[4,[6]]],13],[[[4,[6]]],12],[[[4,[6]]],[[9,[14]]]],[[[4,[3]]],8],[[[4,[6]]],[[9,[11]]]],[[[4,[6]]],[[9,[10]]]],[[[4,[3]]],[[9,[11]]]],[[[4,[3]]],15],[[[4,[6]]],16],[[[4,[3]]],7],[[[4,[3]]],[[9,[17]]]],[[[4,[6]]],[[9,[17]]]],[[[4,[3]]],[[9,[18]]]],[[[4,[6]]],[[9,[5]]]],[[[4,[6]]],[[9,[7]]]],[[[4,[6]]],17],[[[4,[6]]],[[9,[18]]]],[[[4,[6]]],5],[[[4,[3]]],13],[[[4,[3]]],[[9,[7]]]],[[[4,[6]]],[[9,[15]]]],[[[4,[3]]],14],[[[4,[3]]],10],[[[4,[3]]],18],[[[4,[3]]],12],[[[4,[3]]],[[9,[14]]]],[[[4,[3]]],[[9,[5]]]],[[[4,[6]]],18],[[[4,[3]]],[[9,[13]]]],[[[4,[6]]],[[9,[13]]]],[[[4,[6]]],11],[[[4,[3]]],[[9,[16]]]],[[[4,[3]]],16],[[[4,[6]]],[[9,[8]]]],[[[4,[6]]],15],[[[4,[6]]],8],[[[4,[3]]],[[9,[12]]]],[[[4,[6]]],10],[[[4,[6]]],14],[[[4,[3]]],17],[[[4,[6]]],[[9,[16]]]],[[[4,[3]]],[[9,[15]]]],[-1,19,[]],[-1,-2,[],[]],[20,[[21,[-1]]],[]],[-1,[[21,[-2]]],[],[]],[-2,[[21,[-1]]],[],[[22,[-1]]]],[22,[[21,[-1]]],[]],[[[4,[6]]],[[21,[[9,[12]]]]]],[[[4,[3]]],[[21,[[9,[7]]]]]],[[[4,[3]]],[[21,[[9,[15]]]]]],[[[4,[6]]],[[21,[[9,[10]]]]]],[[[4,[6]]],[[21,[[9,[18]]]]]],[[[4,[3]]],[[21,[13]]]],[[[4,[6]]],[[21,[14]]]],[[[4,[3]]],[[21,[[9,[16]]]]]],[[[4,[3]]],[[21,[[9,[12]]]]]],[[[4,[6]]],[[21,[17]]]],[[[4,[3]]],[[21,[15]]]],[[[4,[6]]],[[21,[16]]]],[[[4,[3]]],[[21,[10]]]],[[[4,[3]]],[[21,[[9,[13]]]]]],[[[4,[6]]],[[21,[[9,[7]]]]]],[[[4,[3]]],[[21,[16]]]],[[[4,[6]]],[[21,[[9,[8]]]]]],[[[4,[6]]],[[21,[7]]]],[[[4,[6]]],[[21,[12]]]],[[[4,[6]]],[[21,[13]]]],[[[4,[6]]],[[21,[15]]]],[[[4,[6]]],[[21,[[9,[16]]]]]],[[[4,[6]]],[[21,[5]]]],[[[4,[3]]],[[21,[[9,[17]]]]]],[[[4,[3]]],[[21,[[9,[5]]]]]],[[[4,[3]]],[[21,[17]]]],[[[4,[3]]],[[21,[[9,[11]]]]]],[[[4,[6]]],[[21,[18]]]],[[[4,[3]]],[[21,[[9,[8]]]]]],[[[4,[3]]],[[21,[[9,[10]]]]]],[[[4,[6]]],[[21,[11]]]],[[[4,[6]]],[[21,[[9,[5]]]]]],[[[4,[6]]],[[21,[8]]]],[[[4,[3]]],[[21,[12]]]],[[[4,[6]]],[[21,[10]]]],[[[4,[3]]],[[21,[18]]]],[[[4,[3]]],[[21,[11]]]],[[[4,[3]]],[[21,[7]]]],[[[4,[6]]],[[21,[[9,[15]]]]]],[[[4,[3]]],[[21,[[9,[18]]]]]],[[[4,[3]]],[[21,[14]]]],[[[4,[6]]],[[21,[[9,[14]]]]]],[[[4,[6]]],[[21,[[9,[11]]]]]],[[[4,[3]]],[[21,[5]]]],[[[4,[6]]],[[21,[[9,[17]]]]]],[[[4,[6]]],[[21,[[9,[13]]]]]],[[[4,[3]]],[[21,[8]]]],[[[4,[3]]],[[21,[[9,[14]]]]]],[-1,[[21,[23]]],[]],[-1,[[21,[-2]]],[],[]],[[[4,[-1]]],[[4,[-1]]],24],[[[4,[-1]],[4,[-1]]],25,26],[[],[[4,[-1]]],27],[[[4,[-1]],[4,[-1]]],28,29],[[[4,[-1]],30],31,32],[[[4,[-1]],30],31,33],[[[4,[-1]],30],31,34],[[[4,[-1]],30],31,35],[-1,-1,[]],[-1,-2,[],[]],[36,[[37,[-1,28]]],[]],[-1,[[37,[-2,28]]],[],[]],[-2,[[37,[-1,28]]],[],[[38,[-1]]]],[38,[[37,[-1,28]]],[]],[[[4,[6]]],[[37,[8,28]]]],[[[4,[3]]],[[37,[10,28]]]],[[[4,[3]]],[[37,[15,28]]]],[[[4,[3]]],[[37,[12,28]]]],[[[4,[6]]],[[37,[18,28]]]],[[[4,[3]]],[[37,[17,28]]]],[[[4,[3]]],[[37,[8,28]]]],[[[4,[6]]],[[37,[12,28]]]],[[[4,[3]]],[[37,[14,28]]]],[[[4,[6]]],[[37,[13,28]]]],[[[4,[3]]],[[37,[18,28]]]],[[[4,[6]]],[[37,[14,28]]]],[[[4,[3]]],[[37,[7,28]]]],[[[4,[3]]],[[37,[13,28]]]],[[[4,[6]]],[[37,[5,28]]]],[[[4,[6]]],[[37,[10,28]]]],[[[4,[6]]],[[37,[17,28]]]],[[[4,[3]]],[[37,[16,28]]]],[[[4,[3]]],[[37,[5,28]]]],[[[4,[3]]],[[37,[11,28]]]],[[[4,[6]]],[[37,[16,28]]]],[[[4,[6]]],[[37,[7,28]]]],[[[4,[6]]],[[37,[15,28]]]],[[[4,[6]]],[[37,[11,28]]]],[-1,[[37,[39,28]]],[]],[-1,[[37,[-2,28]]],[],[]],[[[4,[-1]],[4,[-1]]],[[21,[25]]],40],[41,-1,[]],[-1,-2,[],[]],[-2,-1,[],[[42,[-1]]]],[42,-1,[]],[[[4,[6]]],5],[[[4,[6]]],12],[[[4,[3]]],16],[[[4,[3]]],11],[[[4,[6]]],7],[[[4,[3]]],13],[[[4,[3]]],8],[[[4,[3]]],10],[[[4,[6]]],18],[[[4,[6]]],16],[[[4,[3]]],12],[[[4,[6]]],10],[[[4,[3]]],14],[[[4,[6]]],15],[[[4,[3]]],5],[[[4,[3]]],18],[[[4,[6]]],13],[[[4,[3]]],7],[[[4,[6]]],8],[[[4,[6]]],11],[[[4,[3]]],15],[[[4,[6]]],17],[[[4,[6]]],14],[[[4,[3]]],17],[-1,43,[]],[-1,-2,[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,45,[]],[46,-1,[]],[-1,-2,[],[]],[-2,-1,[],[[47,[-1]]]],[47,-1,[]],[[[4,[3]]],[[9,[10]]]],[[[4,[3]]],11],[[[4,[3]]],[[9,[11]]]],[[[4,[3]]],[[9,[15]]]],[[[4,[6]]],7],[[[4,[3]]],[[9,[14]]]],[[[4,[3]]],[[9,[12]]]],[[[4,[3]]],[[9,[16]]]],[[[4,[3]]],[[9,[13]]]],[[[4,[6]]],18],[[[4,[6]]],[[9,[16]]]],[[[4,[3]]],[[9,[18]]]],[[[4,[3]]],15],[[[4,[6]]],13],[[[4,[6]]],[[9,[13]]]],[[[4,[3]]],14],[[[4,[6]]],[[9,[10]]]],[[[4,[6]]],17],[[[4,[3]]],13],[[[4,[3]]],16],[[[4,[3]]],8],[[[4,[3]]],18],[[[4,[6]]],8],[[[4,[6]]],12],[[[4,[3]]],10],[[[4,[6]]],15],[[[4,[3]]],[[9,[7]]]],[[[4,[6]]],[[9,[8]]]],[[[4,[6]]],5],[[[4,[6]]],[[9,[11]]]],[[[4,[6]]],16],[[[4,[6]]],[[9,[18]]]],[[[4,[6]]],11],[[[4,[3]]],17],[[[4,[6]]],[[9,[17]]]],[[[4,[3]]],[[9,[8]]]],[[[4,[6]]],[[9,[14]]]],[[[4,[3]]],5],[[[4,[3]]],7],[[[4,[6]]],[[9,[7]]]],[[[4,[6]]],[[9,[5]]]],[[[4,[6]]],[[9,[12]]]],[[[4,[6]]],10],[[[4,[6]]],14],[[[4,[3]]],[[9,[17]]]],[[[4,[3]]],[[9,[5]]]],[[[4,[3]]],12],[[[4,[6]]],[[9,[15]]]],[-1,48,[]],[-1,-2,[],[]],[49,-1,[]],[-1,-2,[],[]],[-2,-1,[],[[50,[-1]]]],[50,-1,[]],[[[4,[3]]],12],[[[4,[6]]],16],[[[4,[6]]],18],[[[4,[6]]],14],[[[4,[3]]],11],[[[4,[6]]],10],[[[4,[3]]],18],[[[4,[3]]],13],[[[4,[6]]],5],[[[4,[6]]],11],[[[4,[6]]],8],[[[4,[3]]],8],[[[4,[6]]],15],[[[4,[3]]],16],[[[4,[3]]],15],[[[4,[6]]],13],[[[4,[6]]],17],[[[4,[3]]],14],[[[4,[6]]],12],[[[4,[3]]],17],[[[4,[3]]],7],[[[4,[3]]],10],[[[4,[6]]],7],[[[4,[3]]],5],[-1,51,[]],[-1,-2,[],[]]],"c":[],"p":[[10,"Az",0],[10,"Cast",0],[1,"f64"],[5,"Round",0],[1,"u32"],[1,"f32"],[1,"i32"],[1,"i64"],[5,"Wrapping",287],[1,"i8"],[1,"u16"],[1,"u64"],[1,"i16"],[1,"u8"],[1,"i128"],[1,"usize"],[1,"isize"],[1,"u128"],[10,"CastFrom",0],[10,"CheckedAs",0],[6,"Option",288],[10,"CheckedCast",0],[10,"CheckedCastFrom",0],[10,"Clone",289],[6,"Ordering",290],[10,"Ord",290],[10,"Default",291],[1,"bool"],[10,"PartialEq",290],[5,"Formatter",292],[8,"Result",292],[10,"LowerExp",292],[10,"Debug",292],[10,"UpperExp",292],[10,"Display",292],[10,"OverflowingAs",0],[1,"tuple"],[10,"OverflowingCast",0],[10,"OverflowingCastFrom",0],[10,"PartialOrd",290],[10,"SaturatingAs",0],[10,"SaturatingCast",0],[10,"SaturatingCastFrom",0],[6,"Result",293],[5,"TypeId",294],[10,"UnwrappedAs",0],[10,"UnwrappedCast",0],[10,"UnwrappedCastFrom",0],[10,"WrappingAs",0],[10,"WrappingCast",0],[10,"WrappingCastFrom",0]],"b":[[25,"impl-Cast%3Cu32%3E-for-Round%3Cf64%3E"],[26,"impl-Cast%3Ci32%3E-for-Round%3Cf32%3E"],[27,"impl-Cast%3CWrapping%3Ci64%3E%3E-for-Round%3Cf64%3E"],[28,"impl-Cast%3CWrapping%3Ci8%3E%3E-for-Round%3Cf64%3E"],[29,"impl-Cast%3Cu16%3E-for-Round%3Cf64%3E"],[30,"impl-Cast%3CWrapping%3Cu64%3E%3E-for-Round%3Cf32%3E"],[31,"impl-Cast%3Ci16%3E-for-Round%3Cf32%3E"],[32,"impl-Cast%3Cu64%3E-for-Round%3Cf32%3E"],[33,"impl-Cast%3CWrapping%3Cu8%3E%3E-for-Round%3Cf32%3E"],[34,"impl-Cast%3Ci64%3E-for-Round%3Cf64%3E"],[35,"impl-Cast%3CWrapping%3Cu16%3E%3E-for-Round%3Cf32%3E"],[36,"impl-Cast%3CWrapping%3Ci8%3E%3E-for-Round%3Cf32%3E"],[37,"impl-Cast%3CWrapping%3Cu16%3E%3E-for-Round%3Cf64%3E"],[38,"impl-Cast%3Ci128%3E-for-Round%3Cf64%3E"],[39,"impl-Cast%3Cusize%3E-for-Round%3Cf32%3E"],[40,"impl-Cast%3Ci32%3E-for-Round%3Cf64%3E"],[41,"impl-Cast%3CWrapping%3Cisize%3E%3E-for-Round%3Cf64%3E"],[42,"impl-Cast%3CWrapping%3Cisize%3E%3E-for-Round%3Cf32%3E"],[43,"impl-Cast%3CWrapping%3Cu128%3E%3E-for-Round%3Cf64%3E"],[44,"impl-Cast%3CWrapping%3Cu32%3E%3E-for-Round%3Cf32%3E"],[45,"impl-Cast%3CWrapping%3Ci32%3E%3E-for-Round%3Cf32%3E"],[46,"impl-Cast%3Cisize%3E-for-Round%3Cf32%3E"],[47,"impl-Cast%3CWrapping%3Cu128%3E%3E-for-Round%3Cf32%3E"],[48,"impl-Cast%3Cu32%3E-for-Round%3Cf32%3E"],[49,"impl-Cast%3Ci16%3E-for-Round%3Cf64%3E"],[50,"impl-Cast%3CWrapping%3Ci32%3E%3E-for-Round%3Cf64%3E"],[51,"impl-Cast%3CWrapping%3Ci128%3E%3E-for-Round%3Cf32%3E"],[52,"impl-Cast%3Cu8%3E-for-Round%3Cf64%3E"],[53,"impl-Cast%3Ci8%3E-for-Round%3Cf64%3E"],[54,"impl-Cast%3Cu128%3E-for-Round%3Cf64%3E"],[55,"impl-Cast%3Cu64%3E-for-Round%3Cf64%3E"],[56,"impl-Cast%3CWrapping%3Cu8%3E%3E-for-Round%3Cf64%3E"],[57,"impl-Cast%3CWrapping%3Cu32%3E%3E-for-Round%3Cf64%3E"],[58,"impl-Cast%3Cu128%3E-for-Round%3Cf32%3E"],[59,"impl-Cast%3CWrapping%3Ci16%3E%3E-for-Round%3Cf64%3E"],[60,"impl-Cast%3CWrapping%3Ci16%3E%3E-for-Round%3Cf32%3E"],[61,"impl-Cast%3Cu16%3E-for-Round%3Cf32%3E"],[62,"impl-Cast%3CWrapping%3Cusize%3E%3E-for-Round%3Cf64%3E"],[63,"impl-Cast%3Cusize%3E-for-Round%3Cf64%3E"],[64,"impl-Cast%3CWrapping%3Ci64%3E%3E-for-Round%3Cf32%3E"],[65,"impl-Cast%3Ci128%3E-for-Round%3Cf32%3E"],[66,"impl-Cast%3Ci64%3E-for-Round%3Cf32%3E"],[67,"impl-Cast%3CWrapping%3Cu64%3E%3E-for-Round%3Cf64%3E"],[68,"impl-Cast%3Ci8%3E-for-Round%3Cf32%3E"],[69,"impl-Cast%3Cu8%3E-for-Round%3Cf32%3E"],[70,"impl-Cast%3Cisize%3E-for-Round%3Cf64%3E"],[71,"impl-Cast%3CWrapping%3Cusize%3E%3E-for-Round%3Cf32%3E"],[72,"impl-Cast%3CWrapping%3Ci128%3E%3E-for-Round%3Cf64%3E"],[79,"impl-CheckedCast%3CWrapping%3Cu64%3E%3E-for-Round%3Cf32%3E"],[80,"impl-CheckedCast%3CWrapping%3Ci32%3E%3E-for-Round%3Cf64%3E"],[81,"impl-CheckedCast%3CWrapping%3Ci128%3E%3E-for-Round%3Cf64%3E"],[82,"impl-CheckedCast%3CWrapping%3Ci8%3E%3E-for-Round%3Cf32%3E"],[83,"impl-CheckedCast%3CWrapping%3Cu128%3E%3E-for-Round%3Cf32%3E"],[84,"impl-CheckedCast%3Ci16%3E-for-Round%3Cf64%3E"],[85,"impl-CheckedCast%3Cu8%3E-for-Round%3Cf32%3E"],[86,"impl-CheckedCast%3CWrapping%3Cusize%3E%3E-for-Round%3Cf64%3E"],[87,"impl-CheckedCast%3CWrapping%3Cu64%3E%3E-for-Round%3Cf64%3E"],[88,"impl-CheckedCast%3Cisize%3E-for-Round%3Cf32%3E"],[89,"impl-CheckedCast%3Ci128%3E-for-Round%3Cf64%3E"],[90,"impl-CheckedCast%3Cusize%3E-for-Round%3Cf32%3E"],[91,"impl-CheckedCast%3Ci8%3E-for-Round%3Cf64%3E"],[92,"impl-CheckedCast%3CWrapping%3Ci16%3E%3E-for-Round%3Cf64%3E"],[93,"impl-CheckedCast%3CWrapping%3Ci32%3E%3E-for-Round%3Cf32%3E"],[94,"impl-CheckedCast%3Cusize%3E-for-Round%3Cf64%3E"],[95,"impl-CheckedCast%3CWrapping%3Ci64%3E%3E-for-Round%3Cf32%3E"],[96,"impl-CheckedCast%3Ci32%3E-for-Round%3Cf32%3E"],[97,"impl-CheckedCast%3Cu64%3E-for-Round%3Cf32%3E"],[98,"impl-CheckedCast%3Ci16%3E-for-Round%3Cf32%3E"],[99,"impl-CheckedCast%3Ci128%3E-for-Round%3Cf32%3E"],[100,"impl-CheckedCast%3CWrapping%3Cusize%3E%3E-for-Round%3Cf32%3E"],[101,"impl-CheckedCast%3Cu32%3E-for-Round%3Cf32%3E"],[102,"impl-CheckedCast%3CWrapping%3Cisize%3E%3E-for-Round%3Cf64%3E"],[103,"impl-CheckedCast%3CWrapping%3Cu32%3E%3E-for-Round%3Cf64%3E"],[104,"impl-CheckedCast%3Cisize%3E-for-Round%3Cf64%3E"],[105,"impl-CheckedCast%3CWrapping%3Cu16%3E%3E-for-Round%3Cf64%3E"],[106,"impl-CheckedCast%3Cu128%3E-for-Round%3Cf32%3E"],[107,"impl-CheckedCast%3CWrapping%3Ci64%3E%3E-for-Round%3Cf64%3E"],[108,"impl-CheckedCast%3CWrapping%3Ci8%3E%3E-for-Round%3Cf64%3E"],[109,"impl-CheckedCast%3Cu16%3E-for-Round%3Cf32%3E"],[110,"impl-CheckedCast%3CWrapping%3Cu32%3E%3E-for-Round%3Cf32%3E"],[111,"impl-CheckedCast%3Ci64%3E-for-Round%3Cf32%3E"],[112,"impl-CheckedCast%3Cu64%3E-for-Round%3Cf64%3E"],[113,"impl-CheckedCast%3Ci8%3E-for-Round%3Cf32%3E"],[114,"impl-CheckedCast%3Cu128%3E-for-Round%3Cf64%3E"],[115,"impl-CheckedCast%3Cu16%3E-for-Round%3Cf64%3E"],[116,"impl-CheckedCast%3Ci32%3E-for-Round%3Cf64%3E"],[117,"impl-CheckedCast%3CWrapping%3Ci128%3E%3E-for-Round%3Cf32%3E"],[118,"impl-CheckedCast%3CWrapping%3Cu128%3E%3E-for-Round%3Cf64%3E"],[119,"impl-CheckedCast%3Cu8%3E-for-Round%3Cf64%3E"],[120,"impl-CheckedCast%3CWrapping%3Cu8%3E%3E-for-Round%3Cf32%3E"],[121,"impl-CheckedCast%3CWrapping%3Cu16%3E%3E-for-Round%3Cf32%3E"],[122,"impl-CheckedCast%3Cu32%3E-for-Round%3Cf64%3E"],[123,"impl-CheckedCast%3CWrapping%3Cisize%3E%3E-for-Round%3Cf32%3E"],[124,"impl-CheckedCast%3CWrapping%3Ci16%3E%3E-for-Round%3Cf32%3E"],[125,"impl-CheckedCast%3Ci64%3E-for-Round%3Cf64%3E"],[126,"impl-CheckedCast%3CWrapping%3Cu8%3E%3E-for-Round%3Cf64%3E"],[133,"impl-LowerExp-for-Round%3CT%3E"],[134,"impl-Debug-for-Round%3CT%3E"],[135,"impl-UpperExp-for-Round%3CT%3E"],[136,"impl-Display-for-Round%3CT%3E"],[143,"impl-OverflowingCast%3Ci64%3E-for-Round%3Cf32%3E"],[144,"impl-OverflowingCast%3Ci8%3E-for-Round%3Cf64%3E"],[145,"impl-OverflowingCast%3Ci128%3E-for-Round%3Cf64%3E"],[146,"impl-OverflowingCast%3Cu64%3E-for-Round%3Cf64%3E"],[147,"impl-OverflowingCast%3Cu128%3E-for-Round%3Cf32%3E"],[148,"impl-OverflowingCast%3Cisize%3E-for-Round%3Cf64%3E"],[149,"impl-OverflowingCast%3Ci64%3E-for-Round%3Cf64%3E"],[150,"impl-OverflowingCast%3Cu64%3E-for-Round%3Cf32%3E"],[151,"impl-OverflowingCast%3Cu8%3E-for-Round%3Cf64%3E"],[152,"impl-OverflowingCast%3Ci16%3E-for-Round%3Cf32%3E"],[153,"impl-OverflowingCast%3Cu128%3E-for-Round%3Cf64%3E"],[154,"impl-OverflowingCast%3Cu8%3E-for-Round%3Cf32%3E"],[155,"impl-OverflowingCast%3Ci32%3E-for-Round%3Cf64%3E"],[156,"impl-OverflowingCast%3Ci16%3E-for-Round%3Cf64%3E"],[157,"impl-OverflowingCast%3Cu32%3E-for-Round%3Cf32%3E"],[158,"impl-OverflowingCast%3Ci8%3E-for-Round%3Cf32%3E"],[159,"impl-OverflowingCast%3Cisize%3E-for-Round%3Cf32%3E"],[160,"impl-OverflowingCast%3Cusize%3E-for-Round%3Cf64%3E"],[161,"impl-OverflowingCast%3Cu32%3E-for-Round%3Cf64%3E"],[162,"impl-OverflowingCast%3Cu16%3E-for-Round%3Cf64%3E"],[163,"impl-OverflowingCast%3Cusize%3E-for-Round%3Cf32%3E"],[164,"impl-OverflowingCast%3Ci32%3E-for-Round%3Cf32%3E"],[165,"impl-OverflowingCast%3Ci128%3E-for-Round%3Cf32%3E"],[166,"impl-OverflowingCast%3Cu16%3E-for-Round%3Cf32%3E"],[174,"impl-SaturatingCast%3Cu32%3E-for-Round%3Cf32%3E"],[175,"impl-SaturatingCast%3Cu64%3E-for-Round%3Cf32%3E"],[176,"impl-SaturatingCast%3Cusize%3E-for-Round%3Cf64%3E"],[177,"impl-SaturatingCast%3Cu16%3E-for-Round%3Cf64%3E"],[178,"impl-SaturatingCast%3Ci32%3E-for-Round%3Cf32%3E"],[179,"impl-SaturatingCast%3Ci16%3E-for-Round%3Cf64%3E"],[180,"impl-SaturatingCast%3Ci64%3E-for-Round%3Cf64%3E"],[181,"impl-SaturatingCast%3Ci8%3E-for-Round%3Cf64%3E"],[182,"impl-SaturatingCast%3Cu128%3E-for-Round%3Cf32%3E"],[183,"impl-SaturatingCast%3Cusize%3E-for-Round%3Cf32%3E"],[184,"impl-SaturatingCast%3Cu64%3E-for-Round%3Cf64%3E"],[185,"impl-SaturatingCast%3Ci8%3E-for-Round%3Cf32%3E"],[186,"impl-SaturatingCast%3Cu8%3E-for-Round%3Cf64%3E"],[187,"impl-SaturatingCast%3Ci128%3E-for-Round%3Cf32%3E"],[188,"impl-SaturatingCast%3Cu32%3E-for-Round%3Cf64%3E"],[189,"impl-SaturatingCast%3Cu128%3E-for-Round%3Cf64%3E"],[190,"impl-SaturatingCast%3Ci16%3E-for-Round%3Cf32%3E"],[191,"impl-SaturatingCast%3Ci32%3E-for-Round%3Cf64%3E"],[192,"impl-SaturatingCast%3Ci64%3E-for-Round%3Cf32%3E"],[193,"impl-SaturatingCast%3Cu16%3E-for-Round%3Cf32%3E"],[194,"impl-SaturatingCast%3Ci128%3E-for-Round%3Cf64%3E"],[195,"impl-SaturatingCast%3Cisize%3E-for-Round%3Cf32%3E"],[196,"impl-SaturatingCast%3Cu8%3E-for-Round%3Cf32%3E"],[197,"impl-SaturatingCast%3Cisize%3E-for-Round%3Cf64%3E"],[207,"impl-UnwrappedCast%3CWrapping%3Ci8%3E%3E-for-Round%3Cf64%3E"],[208,"impl-UnwrappedCast%3Cu16%3E-for-Round%3Cf64%3E"],[209,"impl-UnwrappedCast%3CWrapping%3Cu16%3E%3E-for-Round%3Cf64%3E"],[210,"impl-UnwrappedCast%3CWrapping%3Ci128%3E%3E-for-Round%3Cf64%3E"],[211,"impl-UnwrappedCast%3Ci32%3E-for-Round%3Cf32%3E"],[212,"impl-UnwrappedCast%3CWrapping%3Cu8%3E%3E-for-Round%3Cf64%3E"],[213,"impl-UnwrappedCast%3CWrapping%3Cu64%3E%3E-for-Round%3Cf64%3E"],[214,"impl-UnwrappedCast%3CWrapping%3Cusize%3E%3E-for-Round%3Cf64%3E"],[215,"impl-UnwrappedCast%3CWrapping%3Ci16%3E%3E-for-Round%3Cf64%3E"],[216,"impl-UnwrappedCast%3Cu128%3E-for-Round%3Cf32%3E"],[217,"impl-UnwrappedCast%3CWrapping%3Cusize%3E%3E-for-Round%3Cf32%3E"],[218,"impl-UnwrappedCast%3CWrapping%3Cu128%3E%3E-for-Round%3Cf64%3E"],[219,"impl-UnwrappedCast%3Ci128%3E-for-Round%3Cf64%3E"],[220,"impl-UnwrappedCast%3Ci16%3E-for-Round%3Cf32%3E"],[221,"impl-UnwrappedCast%3CWrapping%3Ci16%3E%3E-for-Round%3Cf32%3E"],[222,"impl-UnwrappedCast%3Cu8%3E-for-Round%3Cf64%3E"],[223,"impl-UnwrappedCast%3CWrapping%3Ci8%3E%3E-for-Round%3Cf32%3E"],[224,"impl-UnwrappedCast%3Cisize%3E-for-Round%3Cf32%3E"],[225,"impl-UnwrappedCast%3Ci16%3E-for-Round%3Cf64%3E"],[226,"impl-UnwrappedCast%3Cusize%3E-for-Round%3Cf64%3E"],[227,"impl-UnwrappedCast%3Ci64%3E-for-Round%3Cf64%3E"],[228,"impl-UnwrappedCast%3Cu128%3E-for-Round%3Cf64%3E"],[229,"impl-UnwrappedCast%3Ci64%3E-for-Round%3Cf32%3E"],[230,"impl-UnwrappedCast%3Cu64%3E-for-Round%3Cf32%3E"],[231,"impl-UnwrappedCast%3Ci8%3E-for-Round%3Cf64%3E"],[232,"impl-UnwrappedCast%3Ci128%3E-for-Round%3Cf32%3E"],[233,"impl-UnwrappedCast%3CWrapping%3Ci32%3E%3E-for-Round%3Cf64%3E"],[234,"impl-UnwrappedCast%3CWrapping%3Ci64%3E%3E-for-Round%3Cf32%3E"],[235,"impl-UnwrappedCast%3Cu32%3E-for-Round%3Cf32%3E"],[236,"impl-UnwrappedCast%3CWrapping%3Cu16%3E%3E-for-Round%3Cf32%3E"],[237,"impl-UnwrappedCast%3Cusize%3E-for-Round%3Cf32%3E"],[238,"impl-UnwrappedCast%3CWrapping%3Cu128%3E%3E-for-Round%3Cf32%3E"],[239,"impl-UnwrappedCast%3Cu16%3E-for-Round%3Cf32%3E"],[240,"impl-UnwrappedCast%3Cisize%3E-for-Round%3Cf64%3E"],[241,"impl-UnwrappedCast%3CWrapping%3Cisize%3E%3E-for-Round%3Cf32%3E"],[242,"impl-UnwrappedCast%3CWrapping%3Ci64%3E%3E-for-Round%3Cf64%3E"],[243,"impl-UnwrappedCast%3CWrapping%3Cu8%3E%3E-for-Round%3Cf32%3E"],[244,"impl-UnwrappedCast%3Cu32%3E-for-Round%3Cf64%3E"],[245,"impl-UnwrappedCast%3Ci32%3E-for-Round%3Cf64%3E"],[246,"impl-UnwrappedCast%3CWrapping%3Ci32%3E%3E-for-Round%3Cf32%3E"],[247,"impl-UnwrappedCast%3CWrapping%3Cu32%3E%3E-for-Round%3Cf32%3E"],[248,"impl-UnwrappedCast%3CWrapping%3Cu64%3E%3E-for-Round%3Cf32%3E"],[249,"impl-UnwrappedCast%3Ci8%3E-for-Round%3Cf32%3E"],[250,"impl-UnwrappedCast%3Cu8%3E-for-Round%3Cf32%3E"],[251,"impl-UnwrappedCast%3CWrapping%3Cisize%3E%3E-for-Round%3Cf64%3E"],[252,"impl-UnwrappedCast%3CWrapping%3Cu32%3E%3E-for-Round%3Cf64%3E"],[253,"impl-UnwrappedCast%3Cu64%3E-for-Round%3Cf64%3E"],[254,"impl-UnwrappedCast%3CWrapping%3Ci128%3E%3E-for-Round%3Cf32%3E"],[261,"impl-WrappingCast%3Cu64%3E-for-Round%3Cf64%3E"],[262,"impl-WrappingCast%3Cusize%3E-for-Round%3Cf32%3E"],[263,"impl-WrappingCast%3Cu128%3E-for-Round%3Cf32%3E"],[264,"impl-WrappingCast%3Cu8%3E-for-Round%3Cf32%3E"],[265,"impl-WrappingCast%3Cu16%3E-for-Round%3Cf64%3E"],[266,"impl-WrappingCast%3Ci8%3E-for-Round%3Cf32%3E"],[267,"impl-WrappingCast%3Cu128%3E-for-Round%3Cf64%3E"],[268,"impl-WrappingCast%3Ci16%3E-for-Round%3Cf64%3E"],[269,"impl-WrappingCast%3Cu32%3E-for-Round%3Cf32%3E"],[270,"impl-WrappingCast%3Cu16%3E-for-Round%3Cf32%3E"],[271,"impl-WrappingCast%3Ci64%3E-for-Round%3Cf32%3E"],[272,"impl-WrappingCast%3Ci64%3E-for-Round%3Cf64%3E"],[273,"impl-WrappingCast%3Ci128%3E-for-Round%3Cf32%3E"],[274,"impl-WrappingCast%3Cusize%3E-for-Round%3Cf64%3E"],[275,"impl-WrappingCast%3Ci128%3E-for-Round%3Cf64%3E"],[276,"impl-WrappingCast%3Ci16%3E-for-Round%3Cf32%3E"],[277,"impl-WrappingCast%3Cisize%3E-for-Round%3Cf32%3E"],[278,"impl-WrappingCast%3Cu8%3E-for-Round%3Cf64%3E"],[279,"impl-WrappingCast%3Cu64%3E-for-Round%3Cf32%3E"],[280,"impl-WrappingCast%3Cisize%3E-for-Round%3Cf64%3E"],[281,"impl-WrappingCast%3Ci32%3E-for-Round%3Cf64%3E"],[282,"impl-WrappingCast%3Ci8%3E-for-Round%3Cf64%3E"],[283,"impl-WrappingCast%3Ci32%3E-for-Round%3Cf32%3E"],[284,"impl-WrappingCast%3Cu32%3E-for-Round%3Cf64%3E"]]}],\
["blinkcast",{"doc":"Fast, Bounded, Lossy broadcast channel with <code>no_std</code> support.","t":"SCCFFNNNNHNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNN","n":["MAX_LEN","alloc","static_mem","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","from","from","into","into","new","new_receiver","recv","send","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","into","into","new","new_receiver","recv","send","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"blinkcast"],[3,"blinkcast::alloc"],[30,"blinkcast::static_mem"],[54,"core::clone"],[55,"core::option"],[56,"core::result"],[57,"core::any"]],"d":["The maximum length of the buffer allowed on this platform …","A channel implemented with heap allocated buffers (require …","A channel implemented with static memory.","The receiver of the <code>channel</code>.","The sender of the <code>channel</code>.","","","","","Creates a new channel, returning the <code>Sender</code> and <code>Receiver</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new channel with a buffer of size <code>N</code>.","Creates a new receiver that starts from the same point as …","Receives a message from the channel.","Sends a message to the channel. If the channel is full, …","","","","","","","","","The receiver of the channel.","The sender of the channel.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new channel with a buffer of size <code>N</code>.","Creates a new receiver that starts from the same point as …","Receives a message from the channel.","Sends a message to the channel. If the channel is full, …","","","","","","",""],"i":[0,0,0,0,0,2,3,2,3,0,2,3,2,3,2,3,2,3,2,2,3,2,2,3,2,3,2,3,2,3,0,0,10,9,10,9,9,9,10,10,9,10,9,10,10,9,10,9,10,9,10,9,10,9],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[[2,[-1]],[3,[-1]]]]],5],[[[2,[-1]]],[[2,[-1]]],[]],[[[3,[-1]]],[[3,[-1]]],5],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[2,[-1]]],5],[[[2,[-1]]],[[3,[-1]]],5],[[[3,[-1]]],[[6,[-1]]],5],[[[2,[-1]],-1],4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[-1]]],5],[[-1,-2],4,[],[]],[[],[[10,[-1]]],5],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[-1]]],5],[[[10,[-1]]],[[9,[-1]]],5],[[[9,[-1]]],[[6,[-1]]],5],[[[10,[-1]],-1],4,5],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]]],"c":[],"p":[[1,"usize"],[5,"Sender",3],[5,"Receiver",3],[1,"tuple"],[10,"Clone",54],[6,"Option",55],[6,"Result",56],[5,"TypeId",57],[5,"Receiver",30],[5,"Sender",30]],"b":[]}],\
["byteorder",{"doc":"This crate provides convenience methods for encoding and …","t":"IGKIGIINNNNNNNNNNNNNNNNMNNMNNNNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNMNNNMNNMNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNMNNNMNNMNNNMNNMNNMNNMNN","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32_into","write_f64","write_f64_into","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_i8_into","write_int","write_int128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[156,"core::cmp"],[157,"core::fmt"],[158,"core::fmt"],[159,"core::option"],[160,"core::result"],[161,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","",""],"i":[0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,26,1,2,26,1,2,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2,1,2,1,2,1,2,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,1,2,26,1,2,26,1,2,26,1,2,26,26,1,2,26,1,2,26,26,1,2,26,1,2,26,1,2,26,1,2],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[7]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[10]]],9],[[[8,[11]]],9],[[[8,[12]]],9],[[[8,[13]]],9],[[[8,[14]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[15]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[16]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[17]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[[8,[18]]],9],[[1,-1],9,19],[[2,-1],9,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[3]]]],[[2,2],[[20,[3]]]],[[[8,[21]]],7],[[[8,[21]],[8,[7]]],9],[[[8,[21]],[8,[7]]],9],[[[8,[21]]],10],[[[8,[21]],[8,[10]]],9],[[[8,[21]],[8,[10]]],9],[[[8,[21]]],11],[[[8,[21]],[8,[11]]],9],[[[8,[21]]],12],[[[8,[21]],[8,[12]]],9],[[[8,[21]]],13],[[[8,[21]]],13],[[[8,[21]],[8,[13]]],9],[[[8,[21]]],14],[[[8,[21]]],14],[[[8,[21]],[8,[14]]],9],[[[8,[21]],22],14],[[[8,[21]],22],11],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]]],15],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]],[8,[15]]],9],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]]],16],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]],[8,[16]]],9],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]]],17],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]],[8,[17]]],9],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]]],18],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],[8,[18]]],9],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],18],[[[8,[21]],22],15],[[[8,[21]],22],15],[[[8,[21]],22],15],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[[8,[21]],7],9],[[[8,[7]],[8,[21]]],9],[[[8,[21]],10],9],[[[8,[10]],[8,[21]]],9],[[[8,[21]],11],9],[[[8,[11]],[8,[21]]],9],[[[8,[21]],12],9],[[[8,[12]],[8,[21]]],9],[[[8,[21]],13],9],[[[8,[21]],13],9],[[[8,[13]],[8,[21]]],9],[[[8,[21]],14],9],[[[8,[21]],14],9],[[[8,[14]],[8,[21]]],9],[[[8,[25]],[8,[21]]],9],[[[8,[21]],14,22],9],[[[8,[21]],11,22],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[21]],15],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[15]],[8,[21]]],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[21]],16],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[16]],[8,[21]]],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[21]],17],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[17]],[8,[21]]],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[21]],18],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[18]],[8,[21]]],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],18,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9],[[[8,[21]],15,22],9]],"c":[53,56],"p":[[6,"BigEndian",0],[6,"LittleEndian",0],[6,"Ordering",156],[1,"bool"],[5,"Formatter",157],[8,"Result",157],[1,"f32"],[1,"slice"],[1,"tuple"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[10,"Hasher",158],[6,"Option",159],[1,"u8"],[1,"usize"],[6,"Result",160],[5,"TypeId",161],[1,"i8"],[10,"ByteOrder",0]],"b":[]}],\
["embedded_graphics",{"doc":"Embedded-graphics is a 2D graphics library that is focused …","t":"RKRFNNNNNNNNNMNCNCNCNCNCNCCCNNNCCCNNCCNNNNNNNFRFFKKRFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGGGFKPPPPPPPPPKPKFPFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNNONNNNNRRKFKKFIIFNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNKKCMMCCMFNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKFTTNNNNNNNNNNMNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFCNNNNNOONNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONOONNNNNCCCCCCCCCCCCCNCNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNOONNONNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSPKSSSSSSSSSSSSPPPPPPPPPPPPSPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTFFFFGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFFFKKTTTTPPKTRFFFFKRTTKTNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTGKRGKFFFFFFFRKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNMNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEEEEEEEEEEEEEEEEEEEEPERKEEEPREKRPKEKFFEEEGFKKECNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNMNNNNNMCNNNNNNONNNNNNNNNNNNNNNNNNNCNNNMNNNNNNNNNNNNNMCOCNNCNNNNNNNNCNONNONOOMNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFOONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNONNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNGPGPPPGPGPPPPPFPFFPNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNOCNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKRRFKNNNONNNNNMMNNNNNMMONNNNNNNNNNNNNNNNNNNNKMM","n":["Color","Drawable","Output","Pixel","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","cmp","default","draw","draw","draw_target","eq","examples","fmt","framebuffer","from","geometry","hash","image","into","iterator","mock_display","mono_font","overflowing_as","overflowing_cast_from","partial_cmp","pixelcolor","prelude","primitives","saturating_as","saturating_cast_from","text","transform","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Clipped","Color","ColorConverted","Cropped","DrawTarget","DrawTargetExt","Error","Translated","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","bounding_box","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clear","clear","clipped","clipped","clipped","clipped","clipped","color_converted","color_converted","color_converted","color_converted","color_converted","cropped","cropped","cropped","cropped","cropped","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","fill_contiguous","fill_contiguous","fill_contiguous","fill_contiguous","fill_contiguous","fill_solid","fill_solid","fill_solid","fill_solid","fill_solid","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","translated","translated","translated","translated","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Framebuffer","as_image","az","borrow","borrow_mut","bounding_box","buffer_size","buffer_size_bpp","cast_from","checked_as","checked_cast_from","clipped","clone","cmp","color_converted","cropped","data","data_mut","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","draw_iter","eq","fmt","from","hash","into","new","overflowing_as","overflowing_cast_from","partial_cmp","pixel","saturating_as","saturating_cast_from","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","set_pixel","size","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","AnchorPoint","AnchorX","AnchorY","Angle","AngleUnit","Bottom","BottomCenter","BottomLeft","BottomRight","Center","Center","Center","CenterLeft","CenterRight","Dimensions","Left","OriginDimensions","Point","Right","Size","Top","TopCenter","TopLeft","TopRight","abs","abs","add","add","add","add","add_assign","add_assign","add_assign","add_assign","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","component_div","component_div","component_max","component_max","component_min","component_min","component_mul","component_mul","default","default","deg","div","div","div_assign","div_assign","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_degrees","from_radians","from_xy","hash","hash","hash","hash","hash","height","index","index","into","into","into","into","into","into","mul","mul","mul_assign","mul_assign","neg","neg","new","new","new_equal","new_equal","normalize","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rad","saturating_add","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_sub","size","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_degrees","to_radians","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x_axis","x_axis","y","y","y_axis","y_axis","zero","zero","zero","Color","Color","GetPixel","Image","ImageDrawable","ImageDrawableExt","ImageRaw","ImageRawBE","ImageRawLE","SubImage","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","cmp","draw","draw","draw","draw","draw_sub_image","draw_sub_image","draw_sub_image","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","pixel","pixel","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","size","sub_image","sub_image","sub_image","translate","translate_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ContiguousIteratorExt","PixelIteratorExt","contiguous","draw","into_pixels","pixel","raw","translated","IntoPixels","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","draw","fmt","from","into","into_iter","next","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Translated","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","draw","eq","fmt","from","into","into_iter","next","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","BitsIterator","ByteIterator","BytesIterator","RawDataSlice","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","cmp","draw","draw","eq","fmt","fmt","fmt","fmt","from","from","from","from","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","new","next","next","next","next","next","next","next","next","next","next","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","translated","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ColorMapping","MockDisplay","NONE_COLOR","NONE_COLOR","affected_area","assert_eq","assert_eq_with_message","assert_pattern","assert_pattern_with_message","az","borrow","borrow_mut","bounding_box","cast_from","char_to_color","checked_as","checked_cast_from","clipped","clone","color_converted","color_to_char","cropped","default","diff","draw_iter","draw_pixel","eq","fmt","from","from_pattern","from_points","get_pixel","into","map","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","set_allow_out_of_bounds_drawing","set_allow_overdraw","set_pixel","set_pixels","size","swap_xy","translated","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","DecorationDimensions","MonoFont","MonoTextStyle","MonoTextStyleBuilder","ascii","az","az","az","az","background_color","background_color","baseline","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cast_from","cast_from","cast_from","cast_from","character_size","character_spacing","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","cmp","default","default_strikethrough","default_underline","draw_string","draw_whitespace","eq","eq","eq","fmt","fmt","fmt","fmt","font","font","from","from","from","from","from","glyph_mapping","hash","height","image","into","into","into","into","is_transparent","iso_8859_1","iso_8859_10","iso_8859_13","iso_8859_14","iso_8859_15","iso_8859_16","iso_8859_2","iso_8859_3","iso_8859_4","iso_8859_5","iso_8859_7","iso_8859_9","jis_x0201","line_height","mapping","measure_string","new","new","new","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","reset_background_color","reset_strikethrough","reset_text_color","reset_underline","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_background_color","set_strikethrough_color","set_text_color","set_underline_color","strikethrough","strikethrough","strikethrough_color","strikethrough_with_color","text_color","text_color","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","underline","underline_color","underline_with_color","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_4X6","FONT_5X7","FONT_5X8","FONT_6X10","FONT_6X12","FONT_6X13","FONT_6X13_BOLD","FONT_6X13_ITALIC","FONT_6X9","FONT_7X13","FONT_7X13_BOLD","FONT_7X13_ITALIC","FONT_7X14","FONT_7X14_BOLD","FONT_8X13","FONT_8X13_BOLD","FONT_8X13_ITALIC","FONT_9X15","FONT_9X15_BOLD","FONT_9X18","FONT_9X18_BOLD","FONT_10X20","FONT_6X13","FONT_7X14","FONT_8X13","FONT_9X15","FONT_9X18","ASCII","Ascii","GlyphMapping","ISO_8859_1","ISO_8859_10","ISO_8859_13","ISO_8859_14","ISO_8859_15","ISO_8859_16","ISO_8859_2","ISO_8859_3","ISO_8859_4","ISO_8859_5","ISO_8859_7","ISO_8859_9","Iso8859_1","Iso8859_10","Iso8859_13","Iso8859_14","Iso8859_15","Iso8859_16","Iso8859_2","Iso8859_3","Iso8859_4","Iso8859_5","Iso8859_7","Iso8859_9","JIS_X0201","JisX0201","Mapping","StrGlyphMapping","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","chars","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","cmp","cmp","contains","eq","eq","fmt","fmt","from","from","glyph_mapping","hash","hash","index","index","into","into","iter","mime","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","ranges","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BLACK","BLACK","BLUE","Bgr555","Bgr565","Bgr666","Bgr888","BinaryColor","CSS_ALICE_BLUE","CSS_ANTIQUE_WHITE","CSS_AQUA","CSS_AQUAMARINE","CSS_AZURE","CSS_BEIGE","CSS_BISQUE","CSS_BLACK","CSS_BLANCHED_ALMOND","CSS_BLUE","CSS_BLUE_VIOLET","CSS_BROWN","CSS_BURLY_WOOD","CSS_CADET_BLUE","CSS_CHARTREUSE","CSS_CHOCOLATE","CSS_CORAL","CSS_CORNFLOWER_BLUE","CSS_CORNSILK","CSS_CRIMSON","CSS_CYAN","CSS_DARK_BLUE","CSS_DARK_CYAN","CSS_DARK_GOLDENROD","CSS_DARK_GRAY","CSS_DARK_GREEN","CSS_DARK_KHAKI","CSS_DARK_MAGENTA","CSS_DARK_OLIVE_GREEN","CSS_DARK_ORANGE","CSS_DARK_ORCHID","CSS_DARK_RED","CSS_DARK_SALMON","CSS_DARK_SEA_GREEN","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_GRAY","CSS_DARK_TURQUOISE","CSS_DARK_VIOLET","CSS_DEEP_PINK","CSS_DEEP_SKY_BLUE","CSS_DIM_GRAY","CSS_DODGER_BLUE","CSS_FIRE_BRICK","CSS_FLORAL_WHITE","CSS_FOREST_GREEN","CSS_FUCHSIA","CSS_GAINSBORO","CSS_GHOST_WHITE","CSS_GOLD","CSS_GOLDENROD","CSS_GRAY","CSS_GREEN","CSS_GREEN_YELLOW","CSS_HONEYDEW","CSS_HOT_PINK","CSS_INDIAN_RED","CSS_INDIGO","CSS_IVORY","CSS_KHAKI","CSS_LAVENDER","CSS_LAVENDER_BLUSH","CSS_LAWN_GREEN","CSS_LEMON_CHIFFON","CSS_LIGHT_BLUE","CSS_LIGHT_CORAL","CSS_LIGHT_CYAN","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GRAY","CSS_LIGHT_GREEN","CSS_LIGHT_PINK","CSS_LIGHT_SALMON","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_YELLOW","CSS_LIME","CSS_LIME_GREEN","CSS_LINEN","CSS_MAGENTA","CSS_MAROON","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_BLUE","CSS_MEDIUM_ORCHID","CSS_MEDIUM_PURPLE","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_VIOLET_RED","CSS_MIDNIGHT_BLUE","CSS_MINT_CREAM","CSS_MISTY_ROSE","CSS_MOCCASIN","CSS_NAVAJO_WHITE","CSS_NAVY","CSS_OLD_LACE","CSS_OLIVE","CSS_OLIVE_DRAB","CSS_ORANGE","CSS_ORANGE_RED","CSS_ORCHID","CSS_PALE_GOLDENROD","CSS_PALE_GREEN","CSS_PALE_TURQUOISE","CSS_PALE_VIOLET_RED","CSS_PAPAYA_WHIP","CSS_PEACH_PUFF","CSS_PERU","CSS_PINK","CSS_PLUM","CSS_POWDER_BLUE","CSS_PURPLE","CSS_REBECCAPURPLE","CSS_RED","CSS_ROSY_BROWN","CSS_ROYAL_BLUE","CSS_SADDLE_BROWN","CSS_SALMON","CSS_SANDY_BROWN","CSS_SEASHELL","CSS_SEA_GREEN","CSS_SIENNA","CSS_SILVER","CSS_SKY_BLUE","CSS_SLATE_BLUE","CSS_SLATE_GRAY","CSS_SNOW","CSS_SPRING_GREEN","CSS_STEEL_BLUE","CSS_TAN","CSS_TEAL","CSS_THISTLE","CSS_TOMATO","CSS_TURQUOISE","CSS_VIOLET","CSS_WHEAT","CSS_WHITE","CSS_WHITE_SMOKE","CSS_YELLOW","CSS_YELLOW_GREEN","CYAN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAX_B","MAX_G","MAX_R","Off","On","PixelColor","RED","Raw","Rgb555","Rgb565","Rgb666","Rgb888","RgbColor","Storage","WHITE","WHITE","WebColors","YELLOW","az","az","az","az","az","az","az","az","az","az","az","az","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","char_to_color","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","color_to_char","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","invert","is_off","is_on","luma","luma","luma","luma","new","new","new","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","raw","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BITS_PER_PIXEL","BigEndian","ByteOrder","Bytes","LittleEndian","RawData","RawU1","RawU16","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","ToBytes","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Angle","AngleUnit","ContainsPoint","ContiguousIteratorExt","Dimensions","DrawTarget","DrawTargetExt","Drawable","GrayColor","ImageDrawable","ImageDrawableExt","IntoStorage","OffsetOutline","OriginDimensions","Pixel","PixelColor","PixelIteratorExt","Point","PointsIter","Primitive","RawData","RgbColor","Size","Transform","WebColors","_","Arc","Center","Circle","Color","ContainsPoint","CornerRadii","CornerRadiiBuilder","Ellipse","Inside","Iter","Line","OffsetOutline","Output","Outside","PointsIter","Polyline","Primitive","PrimitiveStyle","PrimitiveStyleBuilder","Rectangle","RoundedRectangle","Sector","StrokeAlignment","Styled","StyledDimensions","StyledDrawable","Triangle","arc","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","build","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","circle","clone","clone","clone","clone","cmp","cmp","cmp","cmp","contains","default","default","default","default","draw","draw_styled","ellipse","eq","eq","eq","eq","fill_area","fill_color","fill_color","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into_styled","is_transparent","line","new","new","new","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pixels","points","polyline","primitive","rectangle","reset_fill_color","reset_stroke_color","rounded_rectangle","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sector","stroke_alignment","stroke_alignment","stroke_area","stroke_color","stroke_color","stroke_width","stroke_width","style","styled_bounding_box","translate","translate_mut","triangle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_fill","with_stroke","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Arc","Points","StyledPixelsIterator","angle_start","angle_sweep","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_circle","into","into","into","into_iter","into_iter","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","to_circle","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Circle","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","contains","default","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","into_iter","into_iter","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Ellipse","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","contains","default","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","into_iter","into_iter","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Line","Points","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","cmp","default","delta","draw","draw_styled","end","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","into_iter","into_iter","midpoint","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","start","styled_bounding_box","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_delta","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","Polyline","StyledPixelsIterator","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","cmp","default","draw","draw_styled","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","into","into","into","into_iter","into_iter","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","translate","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vertices","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","Rectangle","StyledPixelsIterator","anchor_point","anchor_x","anchor_y","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bottom_right","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","columns","contains","contains","default","draw","draw_styled","empty","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","intersection","into","into","into","into_iter","into_iter","is_zero_sized","new","next","next","offset","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","resized","resized_height","resized_width","rows","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","styled_bounding_box","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","with_corners","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","zero","CornerRadii","CornerRadiiBuilder","Points","RoundedRectangle","StyledPixelsIterator","all","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom_left","bottom_left","bottom_right","bottom_right","bounding_box","build","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","cmp","cmp","cmp","confine_radii","contains","corners","default","default","draw","draw_styled","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","into","into","into","into","into","into_iter","into_iter","left","new","new","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","points","rectangle","right","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","top","top_left","top_left","top_right","top_right","translate","translate_mut","translated","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_equal_corners","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","Sector","StyledPixelsIterator","angle_start","angle_sweep","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","center","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","contains","diameter","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_circle","into","into","into","into_iter","into_iter","new","next","next","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","to_circle","top_left","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_center","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Points","StyledPixelsIterator","Triangle","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","cmp","contains","default","draw","draw_styled","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_slice","hash","hash","hash","into","into","into","into_iter","into_iter","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","styled_bounding_box","translate","translate_mut","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vertices","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Alignment","Alphabetic","Baseline","Bottom","Center","Custom","DecorationColor","Left","LineHeight","Middle","None","Percent","Pixels","Right","Text","TextColor","TextStyle","TextStyleBuilder","Top","alignment","alignment","az","az","az","az","az","az","az","baseline","baseline","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","build","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","character_style","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","default","default","draw","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","is_custom","is_none","is_text_color","line_height","line_height","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","renderer","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","text","text_style","to_absolute","translate","translate_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_alignment","with_alignment","with_baseline","with_baseline","with_text_style","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","CharacterStyle","Color","Color","TextMetrics","TextRenderer","az","borrow","borrow_mut","bounding_box","cast_from","checked_as","checked_cast_from","clone","cmp","draw_string","draw_whitespace","eq","fmt","from","hash","into","line_height","measure_string","next_position","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","set_background_color","set_background_color","set_strikethrough_color","set_strikethrough_color","set_text_color","set_text_color","set_underline_color","set_underline_color","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Transform","translate","translate_mut"],"q":[[0,"embedded_graphics"],[45,"embedded_graphics::draw_target"],[176,"embedded_graphics::framebuffer"],[235,"embedded_graphics::geometry"],[487,"embedded_graphics::image"],[585,"embedded_graphics::iterator"],[593,"embedded_graphics::iterator::contiguous"],[618,"embedded_graphics::iterator::pixel"],[644,"embedded_graphics::iterator::raw"],[781,"embedded_graphics::mock_display"],[834,"embedded_graphics::mono_font"],[985,"embedded_graphics::mono_font::ascii"],[1007,"embedded_graphics::mono_font::iso_8859_1"],[1029,"embedded_graphics::mono_font::iso_8859_10"],[1051,"embedded_graphics::mono_font::iso_8859_13"],[1073,"embedded_graphics::mono_font::iso_8859_14"],[1095,"embedded_graphics::mono_font::iso_8859_15"],[1117,"embedded_graphics::mono_font::iso_8859_16"],[1139,"embedded_graphics::mono_font::iso_8859_2"],[1161,"embedded_graphics::mono_font::iso_8859_3"],[1183,"embedded_graphics::mono_font::iso_8859_4"],[1205,"embedded_graphics::mono_font::iso_8859_5"],[1227,"embedded_graphics::mono_font::iso_8859_7"],[1249,"embedded_graphics::mono_font::iso_8859_9"],[1271,"embedded_graphics::mono_font::jis_x0201"],[1277,"embedded_graphics::mono_font::mapping"],[1367,"embedded_graphics::pixelcolor"],[2114,"embedded_graphics::pixelcolor::raw"],[2427,"embedded_graphics::prelude"],[2453,"embedded_graphics::primitives"],[2626,"embedded_graphics::primitives::arc"],[2717,"embedded_graphics::primitives::circle"],[2811,"embedded_graphics::primitives::ellipse"],[2905,"embedded_graphics::primitives::line"],[2998,"embedded_graphics::primitives::polyline"],[3088,"embedded_graphics::primitives::rectangle"],[3198,"embedded_graphics::primitives::rounded_rectangle"],[3362,"embedded_graphics::primitives::sector"],[3455,"embedded_graphics::primitives::triangle"],[3546,"embedded_graphics::text"],[3768,"embedded_graphics::text::renderer"],[3812,"embedded_graphics::transform"],[3815,"core::option"],[3816,"core::clone"],[3817,"core::cmp"],[3818,"core::cmp"],[3819,"core::result"],[3820,"core::cmp"],[3821,"core::fmt"],[3822,"core::hash"],[3823,"core::convert"],[3824,"core::iter::traits::collect"],[3825,"core::fmt"],[3826,"core::ops::function"],[3827,"core::marker"],[3828,"core::ops::range"],[3829,"core::ops::range"]],"d":["The pixel color type.","Marks an object as “drawable”. Must be implemented for …","The return type of the <code>draw</code> method.","A single pixel.","","","","","","","","","","Draw the graphics object using the supplied DrawTarget.","","A target for embedded-graphics drawing operations.","","Drawing examples","","Framebuffer.","Returns the argument unchanged.","Geometry module.","","Image support for embedded-graphics","Calls <code>U::from(self)</code>.","Iterators.","Mock display for use in tests.","Monospaced bitmap fonts.","","","","Pixel color types.","Prelude","Graphics primitives","","","Text drawing.","Transformations for graphics objects","","","","","","","","Clipped draw target.","The pixel color type the targetted display supports.","Color conversion draw target.","Cropped draw target.","A target for embedded-graphics drawing operations.","Extension trait for <code>DrawTarget</code>s.","Error type to return when a drawing operation fails.","Translated draw target.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the entire display with a solid color.","","","Creates a clipped draw target based on this draw target.","","","","","Creates a color conversion draw target.","","","","","Creates a cropped draw target based on this draw target.","","","","","Draw individual pixels to the display without a defined …","","","","","Fill a given area with an iterator providing a contiguous …","","","","","Fill a given area with a solid color.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Creates a translated draw target based on this draw target.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A framebuffer.","Returns an image based on the framebuffer content.","","","","","Calculates the required buffer size.","Calculates the required buffer size.","","","","","","","","","Returns a reference to the raw framebuffer data.","Returns a mutable reference to the raw framebuffer data.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new framebuffer.","","","","","","","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","Sets the color of a pixel.","","","","","","","","","","Anchor point.","X axis anchor point.","Y axis anchor point.","Angle.","AngleUnit trait.","Bottom.","Bottom center.","Bottom left.","Bottom right.","Center.","Center.","Center.","Center left.","Center right.","Adds the ability to get the bounding box of an item.","Left.","Dimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.","2D point.","Right.","2D size.","Top.","Top center.","Top left.","Top right.","Remove the sign from a coordinate","Compute the absolute value of the angle.","","Offsets a point by adding a size.","","","","Offsets a point by adding a size.","","","","","","","","","","","","","","","","","","","","","Returns the bounding box.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the componentwise division of two <code>Points</code>s.","Returns the componentwise division of two <code>Size</code>s.","Returns the componentwise maximum of two <code>Point</code>s","Returns the componentwise maximum of two <code>Size</code>s.","Returns the componentwise minimum of two <code>Point</code>s","Returns the componentwise minimum of two <code>Size</code>s.","Returns the componentwise multiplication of two <code>Point</code>s.","Returns the componentwise multiplication of two <code>Size</code>s.","","","Convert a number (interpreted as degrees) to an <code>Angle</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an angle defined in degrees.","Creates an angle defined in radians.","Creates an anchor point from an X and Y component.","","","","","","The height.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","Creates a point with X and Y values set to an equal value.","Creates a size with width and height set to an equal value.","Normalize the angle to less than one full rotation (ie. in …","","","","","","","","","","","","","","","","","","","Convert a number (interpreted as radians) to an <code>Angle</code>.","Saturating addition.","","","","","","","","","","","","","Saturating subtraction.","Returns the size of the bounding box.","Offsets a point by subtracting a size.","","","","Offsets a point by subtracting a size.","","","","Return numerical value of the angle in degree","Return numerical value of the angle in radian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width.","","","","","","","","","","","","","Returns the X axis component.","The x coordinate.","Returns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.","Returns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.","Returns the Y axis component.","The y coordinate.","Returns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.","Returns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","Creates a zero degree angle.","The color type.","The color type.","Pixel getter.","Image object.","Image drawable.","Extension trait for image drawables.","An image constructed from a slice of raw pixel data.","Image with big endian data.","Image with little endian data.","Sub image.","","","","","","","","","","","","","","","","","","","","","","","","","Draws the entire image to the target.","","","","Draws a part of the image to the target.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new image.","Creates a new <code>Image</code>.","","","","","","","","Gets the color of a pixel.","","","","","","","","","","Returns a sub image of this image drawable.","","","Translate the image by a given delta, returning a new image","Translate the image by a given delta, modifying the …","","","","","","","","","","","","","","","","Creates a new <code>Image</code> centered around a given point.","","","","","","","Extension trait for contiguous iterators.","Extension trait for pixel iterators.","Contiguous iterator.","Draws the pixel iterator to a draw target.","Converts a contiguous iterator into a pixel iterator.","Pixel iterator.","Raw data iterator.","Returns a translated version of the iterator.","Converts a contiguous iterator into a pixel iterator.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Translated pixel iterator.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Iterator for raw data slices with less than 8 BPP.","Iterator for raw data slices with 8 BPP.","Iterator for raw data slices more than 8 BPP.","Raw data slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Creates a new raw data slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mapping between <code>char</code>s and colors.","Mock display struct","Color used to display <code>None</code> values when <code>EG_FANCY_PANIC</code> is …","Color used to display <code>None</code> values when <code>EG_FANCY_PANIC</code> is …","Returns the area that was affected by drawing operations.","Checks if the displays are equal.","Checks if the displays are equal.","Checks if the display is equal to the given pattern.","Checks if the display is equal to the given pattern.","","","","","","Converts a char into a color of type <code>C</code>.","","","","","","Converts a color of type <code>C</code> into a char.","","","Compares the display to another display.","","Changes the color of a pixel.","","","Returns the argument unchanged.","Creates a new mock display from a character pattern.","Create a mock display from an iterator of <code>Point</code>s.","Returns the color of a pixel.","Calls <code>U::from(self)</code>.","Maps a <code>MockDisplay&lt;C&gt;</code> to a <code>MockDisplay&lt;CT&gt;</code> by applying a …","Creates a new empty mock display.","","","","","Sets if out of bounds drawing is allowed.","Sets if overdrawing is allowed.","Changes the value of a pixel without bounds checking.","Sets the points in an iterator to the given color.","","Returns a copy of with the content mirrored by swapping x …","","","","","","","","","Decoration dimensions.","Monospaced bitmap font.","Style properties for text using a monospaced font.","Text style builder for monospaced fonts.","ASCII glyph subset.","","","","","Sets the background color.","Background color.","The baseline.","","","","","","","","","Builds the text style.","","","","","Size of a single character in pixel.","Spacing between characters.","","","","","","","","","","","","","","","Creates a new default strikethrough decoration for the …","Creates a new default underline decoration for the given …","","","","","","","","","","Sets the font.","Font.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Glyph mapping.","","Height of the decoration.","Raw image data containing the font.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the style is transparent.","ISO_8859_1 glyph subset.","ISO_8859_10 glyph subset.","ISO_8859_13 glyph subset.","ISO_8859_14 glyph subset.","ISO_8859_15 glyph subset.","ISO_8859_16 glyph subset.","ISO_8859_2 glyph subset.","ISO_8859_3 glyph subset.","ISO_8859_4 glyph subset.","ISO_8859_5 glyph subset.","ISO_8859_7 glyph subset.","ISO_8859_9 glyph subset.","JIS_X0201 glyph subset.","","Glyph mapping.","","Creates a text style with transparent background.","Creates a new text style builder.","Creates new decoration dimensions.","Offset from the top of the character to the top of the …","","","","","","","","","","Resets the background color to transparent.","Removes the strikethrough decoration.","Resets the text color to transparent.","Removes the underline decoration.","","","","","","","","","","","","","Enables strikethrough using the text color.","Strikethrough decoration dimensions.","Strikethrough color.","Enables strikethrough with a custom color.","Sets the text color.","Text color.","","","","","","","","","","","","","Enables underline using the text color.","Underline decoration dimensions.","Underline color.","Enables underline with a custom color.","","","","","","","","","","","","","","","","","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","4x6 pixel monospace font.","5x7 pixel monospace font.","5x8 pixel monospace font.","6x10 pixel monospace font.","6x12 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x13 pixel monospace font.","6x9 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x13 pixel monospace font.","7x14 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","9x18 pixel monospace font.","10x20 pixel monospace font.","6x13 pixel monospace font.","7x14 pixel monospace font.","8x13 pixel monospace font.","9x15 pixel monospace font.","9x18 pixel monospace font.","ASCII.","ASCII.","Mapping from characters to glyph indices.","ISO/IEC 8859 Part 1: Latin-1, Western European.","ISO/IEC 8859 Part 10: Latin-6, Nordic.","ISO/IEC 8859 Part 13: Latin-7, Baltic Rim.","ISO/IEC 8859 Part 14: Latin-8, Celtic.","ISO/IEC 8859 Part 15: Latin-9 (revised Latin-1).","ISO/IEC 8859 Part 16: Latin-10: South-East European.","ISO/IEC 8859 Part 2: Latin-2, Central European.","ISO/IEC 8859 Part 3: Latin-3, South European.","ISO/IEC 8859 Part 4: Latin-4, North European.","ISO/IEC 8859 Part 5: Latin/Cyrillic.","ISO/IEC 8859 Part 7: Latin/Greek.","ISO/IEC 8859 Part 9: Latin-5, Turkish.","ISO/IEC 8859 Part 1: Latin-1, Western European.","ISO/IEC 8859 Part 10: Latin-6, Nordic.","ISO/IEC 8859 Part 13: Latin-7, Baltic Rim.","ISO/IEC 8859 Part 14: Latin-8, Celtic.","ISO/IEC 8859 Part 15: Latin-9 (revised Latin-1).","ISO/IEC 8859 Part 16: Latin-10: South-East European.","ISO/IEC 8859 Part 2: Latin-2, Central European.","ISO/IEC 8859 Part 3: Latin-3, South European.","ISO/IEC 8859 Part 4: Latin-4, North European.","ISO/IEC 8859 Part 5: Latin/Cyrillic.","ISO/IEC 8859 Part 7: Latin/Greek.","ISO/IEC 8859 Part 9: Latin-5, Turkish.","JIS X 0201: Japanese katakana (halfwidth).","JIS X 0201: Japanese katakana (halfwidth).","Mapping.","Glyph mapping stored as a UTF-8 string.","","","","","","","","","Returns an iterator over the characters in this mapping.","","","","","","","","","Returns if the mapping contains the given char.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a glyph mapping for this mapping.","","","Maps a character to a glyph index.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over all mappings.","Returns the MIME identifier for this mapping.","Creates a new glyph mapping.","","","","","","","Returns an iterator over the character ranges.","","","","","","","","","","","","","","","","","","","Black color (0% luma).","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr666 color.","Bgr888 color.","Binary color."," Alice Blue"," Antique White"," Aqua"," Aquamarine"," Azure"," Beige"," Bisque"," Black"," Blanched Almond"," Blue"," Blue Violet"," Brown"," Burly Wood"," Cadet Blue"," Chartreuse"," Chocolate"," Coral"," Cornflower Blue"," Cornsilk"," Crimson"," Cyan"," Dark Blue"," Dark Cyan"," Dark Goldenrod"," Dark Gray"," Dark Green"," Dark Khaki"," Dark Magenta"," Dark Olive Green"," Dark Orange"," Dark Orchid"," Dark Red"," Dark Salmon"," Dark Sea Green"," Dark Slate Blue"," Dark Slate Gray"," Dark Turquoise"," Dark Violet"," Deep Pink"," Deep Sky Blue"," Dim Gray"," Dodger Blue"," Fire Brick"," Floral White"," Forest Green"," Fuchsia"," Gainsboro"," Ghost White"," Gold"," Goldenrod"," Gray"," Green"," Green Yellow"," Honeydew"," Hot Pink"," Indian Red"," Indigo"," Ivory"," Khaki"," Lavender"," Lavender Blush"," Lawn Green"," Lemon Chiffon"," Light Blue"," Light Coral"," Light Cyan"," Light Goldenrod Yellow"," Light Gray"," Light Green"," Light Pink"," Light Salmon"," Light Sea Green"," Light Sky Blue"," Light Slate Gray"," Light Steel Blue"," Light Yellow"," Lime"," Lime Green"," Linen"," Magenta"," Maroon"," Medium Aquamarine"," Medium Blue"," Medium Orchid"," Medium Purple"," Medium Sea Green"," Medium Slate Blue"," Medium Spring Green"," Medium Turquoise"," Medium Violet Red"," Midnight Blue"," Mint Cream"," Misty Rose"," Moccasin"," Navajo White"," Navy"," Old Lace"," Olive"," Olive Drab"," Orange"," Orange Red"," Orchid"," Pale Goldenrod"," Pale Green"," Pale Turquoise"," Pale Violet Red"," Papaya Whip"," Peach Puff"," Peru"," Pink"," Plum"," Powder Blue"," Purple"," Rebeccapurple"," Red"," Rosy Brown"," Royal Blue"," Saddle Brown"," Salmon"," Sandy Brown"," Seashell"," Sea Green"," Sienna"," Silver"," Sky Blue"," Slate Blue"," Slate Gray"," Snow"," Spring Green"," Steel Blue"," Tan"," Teal"," Thistle"," Tomato"," Turquoise"," Violet"," Wheat"," White"," White Smoke"," Yellow"," Yellow Green","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb666 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma).","White color (R: 100%, G: 100%, B: 100%)","Named colors as defined in the CSS specification.","Yellow color (R: 100%, G: 100%, B: 0%)","","","","","","","","","","","","","Returns the blue channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the green channel value.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>PixelColor</code> into its raw storage form","","","","","","","","","","","","","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb666 color. Too large channel values will …","Creates a new Bgr666 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the red channel value.","","","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Return type of methods in this trait.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","Trait to convert colors into a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this raw data into the storage type.","","","","","","","","Creates a new color from the least significant 1 bit of …","Creates a new color from the least significant 2 bits of …","Creates a new color from the least significant 4 bits of …","Creates a new color from the least significant 8 bits of …","Creates a new color from the least significant 16 bits of …","Creates a new color from the least significant 24 bits of …","Creates a new color from the least significant 32 bits of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a color into a byte array with big endian byte …","","","","","","","","Converts a color into a byte array with little endian byte …","","","","","","","","Converts a color into a byte array with native byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Center.","","Color type.","Trait to check if a point is inside a closed shape.","","","","Inside.","Iterator over all points inside the primitive.","","Offset outline trait.","Output type.","Outside.","Create an iterator over all points in the primitive.","","Primitive trait","Style properties for primitives.","Primitive style builder.","","","","Stroke alignment.","Styled.","Styled dimensions.","Styled drawable.","","The arc primitive","","","","","","","","","","","","","","Builds the primitive style.","","","","","","","","","","","","","The circle primitive","","","","","","","","","Returns <code>true</code> if the given point is inside the shape.","","","","","","Draws the primitive using the given style.","The ellipse primitive","","","","","Returns the fill area.","Sets the fill color.","Fill color of the primitive.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this primitive into a <code>Styled</code>.","Returns if a primitive drawn with this style is completely …","The line primitive","Creates a primitive style without fill and stroke.","Creates a new primitive style builder.","Creates a styled.","Offsets the outline of the shape.","","","","","","","","","","","","","Returns an iterator over the pixels in this styled …","Returns an iterator over all points inside the primitive.","The polyline primitive","Primitive.","The rectangle primitive. Also good for drawing squares.","Resets the fill color to transparent.","Resets the stroke color to transparent.","The rounded rectangle primitive.","","","","","","","","","The sector primitive","Sets the stroke alignment.","Stroke alignment.","Returns the stroke area.","Sets the stroke color.","Stroke color of the primitive.","Sets the stroke width.","Stroke width in pixels.","Style.","Returns the bounding box using the given style.","","","The triangle primitive.","","","","","","","","","","","","","","","","","","","","","Creates a fill primitive style.","Creates a stroke primitive style.","","","","","","","","","Arc primitive","Iterator over all points on the arc line.","Pixel iterator for each pixel in the arc border","Angle at which the arc starts","Angle defining the arc sweep starting at angle_start","","","","","","","","","","","","","","Return the center point of the arc.","","","","","","","","","","Diameter of the circle supporting the arc","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an arc based on a circle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new arc delimited with a top-left point with a …","","","","","","","","","","","","","","","","","","Returns a circle with the same <code>top_left</code> and <code>diameter</code> as …","Top-left point of the bounding-box of the circle …","Translate the arc from its current position to a new …","Translate the arc from its current position to a new …","","","","","","","","","","","","","","","","","Create a new arc centered around a given point with a …","","","","","","","Circle primitive","Iterator over all points inside the circle.","Pixel iterator for each pixel in the circle border","","","","","","","","","","","","","","Return the center point of the circle","","","","","","","","","","","","","Diameter of the circle","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new circle delimited with a top-left point with a …","","","","","","","","","","","","","","","","","","","Top-left point of circle’s bounding box","Translate the circle from its current position to a new …","Translate the circle from its current position to a new …","","","","","","","","","","","","","","","","","Create a new circle centered around a given point with a …","","","","","","","Ellipse primitive","Iterator over all points inside the ellipse","Pixel iterator for each pixel in the ellipse border","","","","","","","","","","","","","","Return the center point of the ellipse","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new ellipse delimited with a top-left point with …","","","","","","","","","","","","","","","","","","Size of the ellipse","","Top-left point of ellipse’s bounding box","Translate the ellipse from its current position to a new …","Translate the ellipse from its current position to a new …","","","","","","","","","","","","","","","","","Create a new ellipse centered around a given point with a …","","","","","","","Line primitive","Iterator over all points on the line.","Styled line iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the delta (<code>end - start</code>) of the line.","","","End point","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Compute the midpoint of the line.","Creates a line between two points.","","","","","","","","","","","","","","","","","","Start point","","Translate the line from its current position to a new …","Translate the line from its current position to a new …","","","","","","","","","","","","","","","","","Creates a line with a start point and a delta vector.","","","","","","","An iterator over all pixel positions on the polyline","Polyline primitive","Pixel iterator for each pixel in the line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new polyline from a list of vertices","","","","","","","","","","","","","","","","","","","Translate the polyline from its current position to a new …","An offset to apply to the polyline as a whole","Translate the polyline from its current position to a new …","","","","","","","","","","","","","","","","","All vertices in the line","","","","","","","Iterator over all points inside the rectangle.","Rectangle primitive","Pixel iterator for each pixel in the rect border","Returns an anchor point.","Returns the X coordinate of a given anchor edge of the …","Returns the Y coordinate of a given anchor edge of the …","","","","","","","","","","Returns the bottom right corner of this rectangle.","","","","","Returns the center of this rectangle.","","","","","","","","","","","Returns the range of X coordinates in this rectangle.","","Return whether the rectangle contains a given point.","","","","Create a points iterator that returns no items.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a new <code>Rectangle</code> containing the intersection of <code>self</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> is the rectangle is zero sized.","Creates a new rectangle from the top left point and the …","","","","Offset the rectangle by a given value.","","","","","","","","","Returns a resized copy of this rectangle.","Returns a new rectangle with the given height, resized …","Returns a new rectangle with the given width, resized …","Returns the range of Y coordinates in this rectangle.","","","","","","","Size of the rectangle.","","Top left point of the rectangle.","Translate the rect from its current position to a new …","Translate the rect from its current position to a new …","","","","","","","","","","","","","","","","","Creates a new rectangle from the center point and the size.","Creates a new rectangle from two corners.","","","","","","","Returns a zero sized rectangle.","The definition of each corner radius for a rounded …","<code>CornerRadii</code> builder.","Iterator over all points inside the rounded rectangle.","Rounded rectangle primitive.","Pixel iterator for each pixel in the rect border","Set all corner radii to the same value.","","","","","","","","","","","","","","","","Set the bottom left and bottom right corner radii to the …","Set the bottom left corner radius.","Bottom left corner radius","Set the bottom right corner radius.","Bottom right corner radius","","Consume the builder and produce a <code>CornerRadii</code> …","","","","","","","","","","","","","","","","","","","","","","","","Return the rounded rectangle with confined corner radii.","","The radius of each corner","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Set the top left and bottom left corner radii to the same …","Create a new set of corner radii with all corners having …","Create a new corner radii builder.","Creates a new rounded rectangle with the given corner …","","","","","","","","","","","","","","","","","","The base rectangle","Set the top right and bottom right corner radii to the …","","","","","","","","","","","","Set the top left and top right corner radii to the same …","Set the top left corner radius.","Top left corner radius","Set the top right corner radius.","Top right corner radius","Translate the rounded rectangle from its current position …","Translate the rounded rectangle from its current position …","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new rounded rectangle with equal corner radius …","","","","","","","","","","","Iterator over all points inside the sector.","Sector primitive","Pixel iterator for each pixel in the sector border","Angle at which the sector starts","Angle defining the sector sweep starting at angle_start","","","","","","","","","","","","","","Return the center point of the sector","","","","","","","","","","","Diameter of the circle supporting the sector","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an arc based on a circle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new sector delimited with a top-left point with a …","","","","","","","","","","","","","","","","","","","Returns a circle with the same <code>top_left</code> and <code>diameter</code> as …","Top-left point of the bounding-box of the circle …","Translate the sector from its current position to a new …","Translate the sector from its current position to a new …","","","","","","","","","","","","","","","","","Create a new sector centered around a given point with a …","","","","","","","Iterator over all points inside the triangle.","Pixel iterator for each pixel in the triangle border","Triangle primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new triangle from a <code>Point</code> slice.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new triangle with the given vertices.","","","","","","","","","","","","","","","","","","Translate the triangle from its current position to a new …","Translate the triangle from its current position to a new …","","","","","","","","","","","","","","","","","The vertices of the triangle.","","","","","","","Horizontal text alignment.","Alphabetic baseline.","Text baseline.","Bottom.","Center.","Text decoration with a custom color.","Text decoration color.","Left.","Text line height.","Middle.","No text decoration.","Relative line height in percent of the default line height.","Absolute line height in pixels.","Right.","Text drawable.","Text decoration with the same color as the text.","Text style.","Builder for text styles.","Top.","Sets the horizontal text alignment.","Horizontal text alignment.","","","","","","","","Sets the text baseline.","Text baseline.","","","","","","","","","","","","","","","","Builds the text style.","","","","","","","","The character style.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the decoration_color is <code>Custom</code>.","Returns <code>true</code> if the decoration_color is <code>None</code>.","Returns <code>true</code> if the decoration_color is <code>TextColor</code>.","Sets the line height.","Line height.","Creates a text drawable with the default text style.","Creates a new text style builder.","","","","","","","","","","","","","","","","","","","","","","The position.","Text renderer.","","","","","","","","","","","","","","","The string.","The text style.","Converts the line height to an absolute pixel distance.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a text drawable with the given alignment.","Creates a new text style with the given alignment.","Creates a text drawable with the given baseline.","Creates a new text style with the given baseline.","Creates a text drawable with the given text style.","","","","","","","","","","","","","","","Character style.","The color type.","Color type.","Text metrics.","Text renderer.","","","","Bounding box.","","","","","","Draws a string.","Draws whitespace of the given width.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the default line height.","Returns the text metrics for a string.","The position of the next text.","","","","","","Sets the background color.","Sets the background color.","Sets the strikethrough color.","Sets the strikethrough color.","Sets the text color.","Sets the text color.","Sets the underline color.","Sets the underline color.","","","","","","","","Transform operations","Move the origin of an object by a given number of (x, y) …","Move the origin of an object by a given number of (x, y) …"],"i":[10,0,10,0,2,2,2,2,2,2,2,2,2,10,2,0,2,0,2,0,2,0,2,0,2,0,0,0,2,2,2,0,0,0,2,2,0,0,2,2,2,2,2,2,2,0,12,0,0,0,0,12,0,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,12,25,26,29,23,25,30,26,29,23,25,30,26,29,23,25,30,26,12,23,25,30,26,12,23,25,30,26,12,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,30,29,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,23,25,30,26,0,36,36,36,36,36,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,57,55,55,55,55,56,57,55,55,0,56,0,0,56,0,57,55,55,55,35,53,35,35,34,53,35,35,34,53,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,54,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,35,34,35,34,35,34,35,34,35,34,58,35,34,35,34,35,34,55,56,57,53,35,35,34,34,55,56,57,53,35,35,35,35,34,34,34,34,55,56,57,53,53,53,55,35,34,55,56,57,34,35,34,35,34,55,56,57,53,35,34,35,34,35,53,35,34,35,34,53,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,58,34,35,34,55,56,57,53,35,34,55,56,57,53,34,62,35,35,34,53,35,35,34,53,53,53,35,35,35,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,35,34,55,56,57,53,34,35,34,55,56,57,53,35,34,55,56,57,53,55,35,35,34,55,35,35,34,35,34,53,64,67,0,0,0,0,0,0,0,0,37,65,63,37,65,63,37,65,63,37,65,63,37,65,63,37,65,63,37,65,63,37,63,37,64,37,65,63,64,37,65,37,37,65,63,37,65,63,37,37,65,63,37,63,37,65,63,37,65,63,37,67,37,37,65,63,37,65,63,37,65,68,37,65,63,63,37,65,63,37,65,63,37,65,63,37,65,63,37,65,63,63,37,65,63,37,65,63,0,0,0,69,70,0,0,69,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,0,0,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,74,75,77,74,74,75,76,77,74,75,76,77,74,74,75,76,77,74,74,74,74,74,74,74,74,74,74,75,76,77,74,75,75,75,76,77,77,77,77,77,77,75,75,75,76,77,77,77,77,77,77,74,75,76,77,74,75,76,77,74,74,75,76,77,74,75,76,77,75,75,75,76,77,77,77,77,77,77,75,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,0,0,79,79,78,78,78,78,78,78,78,78,78,78,79,78,78,78,78,78,79,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,0,0,86,85,87,88,85,86,87,86,85,87,88,86,85,87,88,85,86,85,87,88,87,87,86,85,87,88,86,85,87,88,86,85,87,88,88,88,88,88,86,86,86,87,88,86,85,87,88,85,86,86,85,85,87,88,87,88,88,87,86,85,87,88,86,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,86,86,85,88,88,86,85,87,88,86,85,87,88,88,85,85,85,85,86,85,87,88,86,85,87,88,86,86,86,86,85,87,86,85,85,86,86,85,87,88,86,85,87,88,86,85,87,88,85,87,86,85,86,85,87,88,86,85,87,88,86,85,87,88,86,85,87,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,93,93,93,93,93,93,93,93,93,0,93,0,0,92,93,92,93,92,93,92,93,92,92,93,92,93,92,93,92,93,92,92,93,92,93,92,93,93,92,93,94,92,92,93,93,93,92,92,93,92,93,92,93,92,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,110,96,96,0,0,0,0,0,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,96,96,0,0,0,0,0,96,96,96,96,104,104,0,96,4,0,0,0,0,0,109,110,96,0,96,104,105,106,107,97,98,99,100,101,102,83,103,96,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,83,83,83,83,83,83,83,83,83,83,83,83,83,103,103,103,103,103,103,103,103,103,103,103,103,103,96,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,109,104,105,106,107,97,98,99,100,101,102,83,103,104,104,104,110,105,106,107,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,96,97,98,99,100,101,102,83,103,0,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,104,105,106,107,97,98,99,100,101,102,83,103,112,0,0,114,0,0,0,0,0,0,0,0,0,112,0,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,49,49,48,48,48,50,50,50,51,51,51,43,43,43,43,43,43,52,52,52,52,52,52,46,46,44,47,112,49,48,50,51,43,52,46,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,112,49,48,50,51,43,52,46,49,48,50,51,43,52,46,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,114,49,48,50,51,43,52,46,114,49,48,50,51,43,52,46,114,49,48,50,51,43,52,46,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,49,48,50,51,43,52,46,44,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,0,121,0,0,0,0,119,125,0,0,121,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,117,119,115,118,117,119,115,118,117,119,115,115,117,118,117,119,115,118,117,119,115,118,117,119,115,0,118,117,119,115,118,117,119,115,120,118,117,119,115,115,121,0,118,117,119,115,115,117,118,118,117,119,115,118,117,117,119,115,118,117,119,115,118,117,119,115,123,118,0,118,117,115,122,118,117,119,115,118,117,119,115,118,117,119,115,115,125,0,115,0,117,117,0,118,117,119,115,118,117,119,115,0,117,118,115,117,118,117,118,115,116,115,115,0,118,117,119,115,118,117,119,115,118,117,119,115,118,117,119,115,118,117,119,115,118,118,118,117,119,115,118,117,119,115,0,0,0,127,127,128,129,127,128,129,127,128,129,127,127,128,129,127,127,128,129,127,128,129,127,128,129,127,127,129,127,128,129,127,128,129,127,128,129,127,127,128,129,127,128,129,127,128,129,128,129,127,128,129,127,127,127,128,129,127,128,129,127,127,127,127,127,127,129,128,129,127,128,129,127,128,129,127,128,129,127,128,129,127,127,128,129,127,128,129,127,0,0,0,131,132,130,131,132,130,131,132,130,130,131,132,130,130,131,132,130,131,132,130,131,132,130,130,130,130,130,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,130,130,131,132,130,131,132,130,130,130,130,130,132,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,130,131,132,130,131,132,130,0,0,0,134,135,133,134,135,133,134,135,133,133,134,135,133,133,134,135,133,134,135,133,134,135,133,133,133,133,135,133,134,135,133,134,135,133,134,135,133,134,135,133,134,135,133,134,135,133,134,135,133,134,135,133,134,135,133,133,133,134,135,133,134,135,133,133,133,133,133,133,135,134,135,133,134,135,133,134,135,133,134,135,133,134,135,133,133,134,135,133,134,135,133,0,0,0,137,138,136,137,138,136,137,138,136,136,137,138,136,137,138,136,137,138,136,137,138,136,137,136,136,136,138,136,136,137,136,137,138,136,137,138,136,137,136,137,138,136,137,138,136,136,137,138,137,138,136,137,138,136,137,136,136,137,138,136,137,138,136,136,136,136,136,138,137,138,136,137,138,136,137,138,136,137,138,136,137,138,136,136,137,138,136,137,138,136,0,0,0,140,141,139,140,141,139,140,141,139,139,140,141,139,140,141,139,140,141,139,140,141,139,140,139,139,141,139,140,139,140,141,139,140,141,139,140,139,140,141,139,140,141,139,140,141,140,141,139,140,141,139,140,139,139,140,141,139,140,141,139,139,139,139,139,141,140,141,139,140,141,139,140,141,139,140,141,139,140,141,139,139,140,141,139,140,141,139,0,0,0,24,24,24,142,24,143,142,24,143,142,24,143,24,24,142,24,143,24,142,24,143,142,24,143,142,24,143,24,24,24,24,24,143,24,142,142,24,143,142,24,143,142,24,143,142,24,143,24,142,24,143,142,143,24,24,142,143,24,24,142,24,143,142,24,143,24,24,24,24,24,24,142,24,143,142,24,143,24,24,24,24,24,143,142,24,143,142,24,143,142,24,143,142,24,143,142,24,143,24,24,142,24,143,142,24,143,24,0,0,0,0,0,145,147,145,148,149,146,147,145,148,149,146,147,145,148,149,146,145,145,147,145,147,146,145,147,145,148,149,146,147,145,148,149,146,147,145,148,149,146,147,145,148,149,146,147,145,146,146,146,146,147,145,149,146,147,145,148,149,146,147,145,148,149,146,147,145,145,148,149,146,147,145,148,149,146,147,145,148,149,146,148,149,145,147,145,146,148,149,146,147,145,148,149,146,147,145,148,149,146,147,145,146,146,146,145,147,145,148,149,146,147,145,148,149,146,146,145,145,147,145,147,146,146,149,147,145,148,149,146,147,145,148,149,146,147,145,148,149,146,147,145,148,149,146,147,145,148,149,146,146,147,145,148,149,146,147,145,148,149,146,0,0,0,150,150,151,152,150,151,152,150,151,152,150,150,151,152,150,150,151,152,150,151,152,150,151,152,150,150,150,152,150,151,152,150,151,152,150,151,152,150,150,151,152,150,151,152,150,151,152,150,151,152,150,151,152,150,150,150,151,152,150,151,152,150,150,150,150,150,150,152,151,152,150,151,152,150,151,152,150,151,152,150,151,152,150,150,151,152,150,151,152,150,0,0,0,154,155,153,154,155,153,154,155,153,153,154,155,153,154,155,153,154,155,153,154,155,153,153,153,153,155,153,154,155,153,154,155,153,154,155,153,153,154,155,153,154,155,153,154,155,153,154,155,154,155,153,154,155,153,153,153,154,155,153,154,155,153,153,153,153,155,154,155,153,154,155,153,154,155,153,154,155,153,154,155,153,153,154,155,153,154,155,153,0,89,0,89,157,91,0,157,0,89,91,161,161,157,0,91,0,0,89,156,160,158,160,156,89,157,91,161,156,160,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,156,158,160,156,89,157,91,161,158,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,89,157,91,161,160,161,158,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,156,156,89,157,91,161,158,160,89,157,91,161,158,160,156,89,157,91,161,91,91,91,156,160,158,156,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,0,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,158,161,158,158,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,156,89,157,91,161,158,160,158,160,158,158,160,156,89,157,91,161,158,160,156,89,157,91,161,0,162,159,0,0,90,90,90,90,90,90,90,90,90,159,159,90,90,90,90,90,159,159,90,90,90,90,90,90,162,162,162,162,162,162,162,162,90,90,90,90,90,90,90,0,126,126],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[2,[-1]]],[[2,[-1]]],[3,4]],[[[2,[-1]],[2,[-1]]],5,[6,4]],[[],[[2,[-1]]],[7,4]],[[[10,[],[[8,[-1]],[9,[-2]]]],-3],[[11,[-2]]],4,[],[[12,[],[[8,[-1]]]]]],[[[2,[-1]],-2],11,4,[[12,[],[[8,[-1]]]]]],0,[[[2,[-1]],[2,[-1]]],13,[14,4]],0,[[[2,[-1]],15],[[11,[16,17]]],[18,4]],0,[-1,-1,[]],0,[[[2,[-1]],-2],16,[19,4],20],0,[-1,-2,[],[]],0,0,0,[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[[2,[-1]],[2,[-1]]],[[1,[5]]],[21,4]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],24,12],[[[25,[-1,-2]]],24,12,[]],[-1,24,[]],[[[26,[-1]]],24,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[12,[],[[8,[-1]],[27,[-2]]]],-1],[[11,[16,-2]]],4,[]],[[[25,[-1,-2]],-3],[[11,[16,-4]]],12,[4,28],[],[]],[[[26,[-1]],-2],[[11,[16,-3]]],12,[],[]],[[29,24],[[23,[29]]]],[[-1,24],[[23,[-2]]],[],[]],[[-1,24],[[23,[-2]]],[],[]],[[-1,24],[[23,[-2]]],[],[]],[[-1,24],[[23,[-2]]],[],[]],[29,[[25,[29,-2]]],[],[4,[28,[-1]]]],[-1,[[25,[-2,-3]]],[],[],[4,28]],[-1,[[25,[-2,-3]]],[],[],[4,28]],[-1,[[25,[-2,-3]]],[],[],[4,28]],[-1,[[25,[-2,-3]]],[],[],[4,28]],[[29,24],[[30,[29]]]],[[-1,24],[[30,[-2]]],[],[]],[[-1,24],[[30,[-2]]],[],[]],[[-1,24],[[30,[-2]]],[],[]],[[-1,24],[[30,[-2]]],[],[]],[[[12,[],[[8,[-1]],[27,[-2]]]],-3],[[11,[16,-2]]],4,[],[[32,[],[[31,[[2,[-1]]]]]]]],[[[23,[-1]],-3],[[11,[16,-4]]],12,[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[25,[-1,-2]],-4],[[11,[16,-5]]],12,[4,28],[],[[32,[],[[31,[[2,[-3]]]]]]],[]],[[[30,[-1]],-3],[[11,[16,-4]]],12,[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[26,[-1]],-3],[[11,[16,-4]]],12,[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[12,[],[[8,[-1]],[27,[-2]]]],24,-3],[[11,[16,-2]]],4,[],[[32,[],[[31,[-1]]]]]],[[[23,[-1]],24,-3],[[11,[16,-4]]],12,[],[[32,[],[[31,[-2]]]]],[]],[[[25,[-1,-2]],24,-4],[[11,[16,-5]]],12,[4,28],[],[[32,[],[[31,[-3]]]]],[]],[[[30,[-1]],24,-3],[[11,[16,-4]]],12,[],[[32,[],[[31,[-2]]]]],[]],[[[26,[-1]],24,-3],[[11,[16,-4]]],12,[],[[32,[],[[31,[-2]]]]],[]],[[[12,[],[[8,[-1]],[27,[-2]]]],24,-1],[[11,[16,-2]]],4,[]],[[[23,[-1]],24,-2],[[11,[16,-3]]],12,[],[]],[[[25,[-1,-2]],24,-3],[[11,[16,-4]]],12,[4,28],[],[]],[[[30,[-1]],24,-2],[[11,[16,-3]]],12,[],[]],[[[26,[-1]],24,-2],[[11,[16,-3]]],12,[],[]],[[[23,[-1]],15],33,[12,18]],[[[25,[-1,-2]],15],33,18,18],[[[30,[-1]],15],33,[12,18]],[[[26,[-1]],15],33,[12,18]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1]]],34,12],[[29,35],[[26,[29]]]],[[-1,35],[[26,[-2]]],[],[]],[[-1,35],[[26,[-2]]],[],[]],[[-1,35],[[26,[-2]]],[],[]],[[-1,35],[[26,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[36,[-1,-2]]],[[37,[-1,-2]]],[4,38],39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[[40,40],40],[[40,40,40],40],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,24],[[23,[-2]]],[],[]],[[[36,[-1,-2,-3]]],[[36,[-1,-2,-3]]],3,3,3],[[[36,[-1,-2,-3]],[36,[-1,-2,-3]]],5,6,6,6],[-1,[[25,[-2,-3]]],[],[],[4,28]],[[-1,24],[[30,[-2]]],[],[]],[[[36,[-1,-2]]],[[42,[41]]],4,[]],[[[36,[-1,-2]]],[[42,[41]]],4,[]],[[[36,[-1,43,44]],-3],[[11,[16,-4]]],[[4,[],[[45,[43]]]],[28,[43]]],[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[36,[-1,46,44]],-3],[[11,[16,-4]]],[[4,[],[[45,[46]]]],[28,[46]]],[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[36,[-1,46,47]],-3],[[11,[16,-4]]],[[4,[],[[45,[46]]]],[28,[46]]],[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[36,[-1,48,-2]],-4],[[11,[16,-5]]],[[4,[],[[45,[48]]]],[28,[48]]],[],[],[[32,[],[[31,[[2,[-3]]]]]]],[]],[[[36,[-1,49,-2]],-4],[[11,[16,-5]]],[[4,[],[[45,[49]]]],[28,[49]]],[],[],[[32,[],[[31,[[2,[-3]]]]]]],[]],[[[36,[-1,50,-2]],-4],[[11,[16,-5]]],[[4,[],[[45,[50]]]],[28,[50]]],[],[],[[32,[],[[31,[[2,[-3]]]]]]],[]],[[[36,[-1,43,47]],-3],[[11,[16,-4]]],[[4,[],[[45,[43]]]],[28,[43]]],[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[36,[-1,51,-2]],-4],[[11,[16,-5]]],[[4,[],[[45,[51]]]],[28,[51]]],[],[],[[32,[],[[31,[[2,[-3]]]]]]],[]],[[[36,[-1,52,44]],-3],[[11,[16,-4]]],[[4,[],[[45,[52]]]],[28,[52]]],[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[36,[-1,52,47]],-3],[[11,[16,-4]]],[[4,[],[[45,[52]]]],[28,[52]]],[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[36,[-1,-2,-3]],[36,[-1,-2,-3]]],13,14,14,14],[[[36,[-1,-2,-3]],15],33,18,18,18],[-1,-1,[]],[[[36,[-1,-2,-3]],-4],16,19,19,19,20],[-1,-2,[],[]],[[],[[36,[-1,-2]]],4,[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[[36,[-1,-2,-3]],[36,[-1,-2,-3]]],[[1,[5]]],21,21,21],[[[36,[-1,-2]],35],[[1,[-1]]],[4,38],39],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1,52,47]],35,-1],16,[4,[28,[52]]]],[[[36,[-1,48,-2]],35,-1],16,[4,[28,[48]]],[]],[[[36,[-1,49,-2]],35,-1],16,[4,[28,[49]]],[]],[[[36,[-1,50,-2]],35,-1],16,[4,[28,[50]]],[]],[[[36,[-1,51,-2]],35,-1],16,[4,[28,[51]]],[]],[[[36,[-1,43,44]],35,-1],16,[4,[28,[43]]]],[[[36,[-1,46,47]],35,-1],16,[4,[28,[46]]]],[[[36,[-1,43,47]],35,-1],16,[4,[28,[43]]]],[[[36,[-1,52,44]],35,-1],16,[4,[28,[52]]]],[[[36,[-1,46,44]],35,-1],16,[4,[28,[46]]]],[[[36,[-1,-2,-3]]],34,[],[],[]],[[-1,35],[[26,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[35,35],[53,53],[[35,35],35],[[35,34],35],[[34,34],34],[[53,53],53],[[35,35],16],[[35,34],16],[[34,34],16],[[53,53],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[54,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[35,35],[34,34],[55,55],[56,56],[57,57],[53,53],[[35,35],5],[[34,34],5],[[55,55],5],[[56,56],5],[[57,57],5],[[35,35],35],[[34,34],34],[[35,35],35],[[34,34],34],[[35,35],35],[[34,34],34],[[35,35],35],[[34,34],34],[[],35],[[],34],[58,53],[[35,59],35],[[34,60],34],[[35,59],16],[[34,60],16],[[35,35],13],[[34,34],13],[[55,55],13],[[56,56],13],[[57,57],13],[[53,53],13],[[35,15],[[11,[16,17]]]],[[35,15],[[11,[16,17]]]],[[34,15],[[11,[16,17]]]],[[34,15],[[11,[16,17]]]],[[55,15],[[11,[16,17]]]],[[56,15],[[11,[16,17]]]],[[57,15],[[11,[16,17]]]],[[53,15],33],[[[42,[59]]],35],[[[16,[59,59]]],35],[-1,-1,[]],[[[42,[59]]],35],[[[16,[60,60]]],34],[[[42,[60]]],34],[-1,-1,[]],[[[42,[60]]],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[61,53],[61,53],[[56,57],55],[[35,-1],16,20],[[34,-1],16,20],[[55,-1],16,20],[[56,-1],16,20],[[57,-1],16,20],0,[[35,40],59],[[34,40],60],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,59],35],[[34,60],34],[[35,59],16],[[34,60],16],[35],[53,53],[[59,59],35],[[60,60],34],[59,35],[60,34],[53,53],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[35,35],[[1,[5]]]],[[34,34],[[1,[5]]]],[[55,55],[[1,[5]]]],[[56,56],[[1,[5]]]],[[57,57],[[1,[5]]]],[[53,53],[[1,[5]]]],[58,53],[[34,34],34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[34,34],34],[62,34],[[35,34],35],[[35,35],35],[[34,34],34],[[53,53],53],[[35,34],16],[[35,35],16],[[34,34],16],[[53,53],16],[53,61],[53,61],[[[42,[60]]],[[11,[35]]]],[[[16,[60,60]]],[[11,[35]]]],[[[42,[60]]],[[11,[35]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,56],0,[35,35],[34,34],[55,57],0,[35,35],[34,34],[[],35],[[],34],[[],53],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[-1,24,[]],[[[63,[-1]]],24,62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[37,[-1,-2]]],[[37,[-1,-2]]],[4,38,3],[39,3]],[[[63,[-1]]],[[63,[-1]]],3],[[[37,[-1,-2]],[37,[-1,-2]]],5,[4,38,6],[39,6]],[[[64,[],[[8,[-1]]]],-2],[[11,[16]]],4,[[12,[],[[8,[-1]]]]]],[[[37,[-1,-2]],-3],[[11,[16]]],[4,38],39,[[12,[],[[8,[-1]]]]]],[[[65,[-1]],-3],[[11,[16]]],64,[],[[12,[],[[8,[-2]]]]]],[[[63,[-1]],-3],[[11,[-4]]],64,[],[[12,[],[[8,[-2]]]]],[]],[[[64,[],[[8,[-1]]]],-2,24],[[11,[16]]],4,[[12,[],[[8,[-1]]]]]],[[[37,[-1,-2]],-4,24],[[11,[16]]],[4,38],39,[],[[12,[],[[8,[-3]]]]]],[[[65,[-1]],-3,24],[[11,[16]]],64,[],[[12,[],[[8,[-2]]]]]],[[[37,[-1,-2]],[37,[-1,-2]]],13,[4,38,14],[39,14]],[[[37,[-1,-2]],15],33,[4,38,18],[39,18]],[[[65,[-1]],15],33,18],[[[63,[-1]],15],33,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[37,[-1,-2]],-3],16,[4,38,19],[39,19],20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[41]],60],[[37,[-1,-2]]],[4,38],39],[[-1,35],[[63,[-1]]],64],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[[37,[-1,-2]],[37,[-1,-2]]],[[1,[5]]],[4,38,21],[39,21]],[[[67,[],[[8,[-1]]]],35],[[1,[-1]]],4],[[[37,[-1,-2]],35],[[1,[-3]]],[4,38],39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],34,[4,38],39],[[[65,[-1]]],34,[]],[[68,24],[[65,[68]]]],[[-1,24],[[65,[-2]]],[],[]],[[-1,24],[[65,[-2]]],[],[]],[[[63,[-1]],35],[[63,[-1]]],[]],[[[63,[-1]],35],[[63,[-1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,35],[[63,[-1]]],64],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[69,-2],[[11,[16]]],4,[[12,[],[[8,[-1]]]]]],[[70,24],[[71,[70]]]],0,0,[[69,35],[[72,[69]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[[71,[-1]],15],33,[73,18]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[71,[-1]]],[[1,[-2]]],73,[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[[72,[-1]],[72,[-1]]],13,14],[[[72,[-1]],15],33,18],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-2]]],[[1,[-3]]],4,[[73,[],[[31,[[2,[-1]]]]]]],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[74,[-1,-2]]],[[74,[-1,-2]]],3,3],[[[74,[-1,-2]],[74,[-1,-2]]],5,6,6],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[[74,[-1,-2]],[74,[-1,-2]]],13,14,14],[[[74,[-1,-2]],15],33,18,18],[[[75,[-1]],15],33,18],[[76,15],33],[[[77,[-1,-2]],15],33,18,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[74,[-1,-2]],-3],16,19,19,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[74,[46,44]]],-1,[]],[[[74,[50,-1]]],-2,[],[]],[[[74,[46,47]]],-1,[]],[[[74,[43,44]]],-1,[]],[[[74,[52,47]]],-1,[]],[[[74,[48,-1]]],-2,[],[]],[[[74,[49,-1]]],-2,[],[]],[[[74,[52,44]]],-1,[]],[[[74,[51,-1]]],-2,[],[]],[[[74,[43,47]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[41]]],[[74,[-1,-2]]],[],[]],[[[75,[49]]],[[1,[-1]]],[]],[[[75,[50]]],[[1,[-1]]],[]],[[[75,[48]]],[[1,[-1]]],[]],[76,[[1,[-1]]],[]],[[[77,[43,47]]],[[1,[-1]]],[]],[[[77,[46,47]]],[[1,[-1]]],[]],[[[77,[43,44]]],[[1,[-1]]],[]],[[[77,[52,47]]],[[1,[-1]]],[]],[[[77,[52,44]]],[[1,[-1]]],[]],[[[77,[46,44]]],[[1,[-1]]],[]],[[[75,[48]],40],[[1,[-1]]],[]],[[[75,[50]],40],[[1,[-1]]],[]],[[[75,[49]],40],[[1,[-1]]],[]],[[76,40],[[1,[-1]]],[]],[[[77,[43,47]],40],[[1,[-1]]],[]],[[[77,[52,47]],40],[[1,[-1]]],[]],[[[77,[46,47]],40],[[1,[-1]]],[]],[[[77,[43,44]],40],[[1,[-1]]],[]],[[[77,[46,44]],40],[[1,[-1]]],[]],[[[77,[52,44]],40],[[1,[-1]]],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[[74,[-1,-2]],[74,[-1,-2]]],[[1,[5]]],21,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[50]]],[[16,[40,[1,[40]]]]]],[[[75,[48]]],[[16,[40,[1,[40]]]]]],[[[75,[49]]],[[16,[40,[1,[40]]]]]],[76,[[16,[40,[1,[40]]]]]],[[[77,[52,47]]],[[16,[40,[1,[40]]]]]],[[[77,[43,47]]],[[16,[40,[1,[40]]]]]],[[[77,[46,47]]],[[16,[40,[1,[40]]]]]],[[[77,[43,44]]],[[16,[40,[1,[40]]]]]],[[[77,[52,44]]],[[16,[40,[1,[40]]]]]],[[[77,[46,44]]],[[16,[40,[1,[40]]]]]],[[-1,35],[[72,[-2]]],[],[]],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[78,[-1]]],24,4],[[[78,[-1]],[78,[-1]]],16,[4,79]],[[[78,[-1]],[78,[-1]],-2],16,[4,79],[[80,[15],[[9,[33]]]]]],[[[78,[-1]],[66,[81]]],16,[4,79]],[[[78,[-1]],[66,[81]],-2],16,[4,79],[[80,[15],[[9,[33]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[-1,-2,[],[]],[82,79],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,24],[[23,[-2]]],[],[]],[[[78,[-1]]],[[78,[-1]]],[4,3]],[-1,[[25,[-2,-3]]],[],[],[4,28]],[79,82],[[-1,24],[[30,[-2]]],[],[]],[[],[[78,[-1]]],4],[[[78,[-1]],[78,[-1]]],[[78,[83]]],4],[[[78,[-1]],-3],[[11,[16,-4]]],4,[],[[32,[],[[31,[[2,[-2]]]]]]],[]],[[[78,[-1]],35,-1],16,4],[[[78,[-1]],[78,[-1]]],13,4],[[[78,[-1]],15],33,[4,79]],[-1,-1,[]],[[[66,[81]]],[[78,[-1]]],[4,79]],[[-1,-2],[[78,[-2]]],[[32,[],[[31,[35]]]]],4],[[[78,[-1]],35],[[1,[-1]]],4],[-1,-2,[],[]],[[[78,[-1]],-3],[[78,[-2]]],4,4,[[80,[-1],[[9,[-2]]]],84]],[[],[[78,[-1]]],4],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1]],13],16,4],[[[78,[-1]],13],16,4],[[[78,[-1]],35,[1,[-1]]],16,4],[[[78,[-1]],-2,[1,[-1]]],16,4,[[32,[],[[31,[35]]]]]],[[[78,[-1]]],34,4],[[[78,[-1]]],[[78,[-1]]],4],[[-1,35],[[26,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1]],-1],[[85,[-1]]],4],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1]]],[[86,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[86,[-1]]],[[86,[-1]]],3],[[[85,[-1]]],[[85,[-1]]],3],[87,87],[88,88],[[88,88],5],[[],88],[60,88],[60,88],[[[86,[-1]],81,35,89,-3],[[11,[35]]],4,[],[[12,[],[[8,[-2]]]]]],[[[86,[-1]],60,35,89,-3],[[11,[35]]],4,[],[[12,[],[[8,[-2]]]]]],[[[86,[-1]],[86,[-1]]],13,14],[[87,87],13],[[88,88],13],[[[86,[-1]],15],33,18],[[[85,[-1]],15],33,18],[[87,15],33],[[88,15],33],[[[85,[-1]],87],[[85,[-1]]],4],0,[-1,-1,[]],[-1,-1,[]],[[[86,[-1]]],[[85,[-1]]],4],[-1,-1,[]],[-1,-1,[]],0,[[88,-1],16,20],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[86,[-1]]],13,4],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[86,[-1]]],60,4],0,[[[86,[-1]],81,35,89],90,4],[[87,-1],[[86,[-1]]],4],[[],[[85,[-1]]],4],[[60,60],88],0,[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[88,88],[[1,[5]]]],[[[85,[-1]]],[[85,[-1]]],4],[[[85,[-1]]],[[85,[-1]]],4],[[[85,[-1]]],[[85,[-1]]],4],[[[85,[-1]]],[[85,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[86,[-1]],[1,[-2]]],16,4,[]],[[[86,[-1]],[91,[-2]]],16,4,[]],[[[86,[-1]],[1,[-2]]],16,4,[]],[[[86,[-1]],[91,[-2]]],16,4,[]],[[[85,[-1]]],[[85,[-1]]],4],0,0,[[[85,[-1]],-1],[[85,[-1]]],4],[[[85,[-1]],-1],[[85,[-1]]],4],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[[[85,[-1]]],[[85,[-1]]],4],0,0,[[[85,[-1]],-1],[[85,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,[[0,[[73,[],[[31,[82]]]]]]]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[92,92],[93,93],[[92,92],5],[[93,93],5],[[92,82],13],[[92,92],13],[[93,93],13],[[92,15],33],[[93,15],33],[-1,-1,[]],[-1,-1,[]],[93,92],[[92,-1],16,20],[[93,-1],16,20],[[94,82],40],[[92,82],40],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[73,[],[[31,[93]]]]]]]],[93,81],[[81,40],92],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[92,92],[[1,[5]]]],[[93,93],[[1,[5]]]],[92,[[0,[[73,[],[[31,[[16,[40,[95,[82]]]]]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[96,41],[97,41],[98,41],[99,41],[100,41],[101,41],[102,41],[83,41],[103,41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[82,104],[82,105],[82,106],[82,107],[82,97],[82,98],[82,99],[82,100],[82,83],[82,103],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[104,104],[105,105],[106,106],[107,107],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[83,83],[103,103],[[104,104],5],[[105,105],5],[[106,106],5],[[107,107],5],[[97,97],5],[[98,98],5],[[99,99],5],[[100,100],5],[[101,101],5],[[102,102],5],[[83,83],5],[[103,103],5],[104,82],[105,82],[106,82],[107,82],[97,82],[98,82],[99,82],[100,82],[83,82],[103,82],[[],104],[[],105],[[],106],[[],107],[[],97],[[],98],[[],99],[[],100],[[],101],[[],102],[[],83],[[],103],[[104,104],13],[[105,105],13],[[106,106],13],[[107,107],13],[[97,97],13],[[98,98],13],[[99,99],13],[[100,100],13],[[101,101],13],[[102,102],13],[[83,83],13],[[103,103],13],[[104,15],[[11,[16,17]]]],[[105,15],[[11,[16,17]]]],[[106,15],[[11,[16,17]]]],[[107,15],[[11,[16,17]]]],[[97,15],[[11,[16,17]]]],[[98,15],[[11,[16,17]]]],[[99,15],[[11,[16,17]]]],[[100,15],[[11,[16,17]]]],[[101,15],[[11,[16,17]]]],[[102,15],[[11,[16,17]]]],[[83,15],[[11,[16,17]]]],[[103,15],[[11,[16,17]]]],[100,104],[107,104],[105,104],[98,104],[102,104],[106,104],[13,104],[83,104],[49,104],[97,104],[99,104],[103,104],[101,104],[-1,-1,[]],[100,105],[102,105],[106,105],[48,105],[101,105],[99,105],[104,105],[-1,-1,[]],[103,105],[97,105],[107,105],[83,105],[98,105],[105,106],[50,106],[98,106],[102,106],[101,106],[97,106],[103,106],[107,106],[104,106],[83,106],[99,106],[100,106],[-1,-1,[]],[103,107],[101,107],[83,107],[51,107],[102,107],[99,107],[-1,-1,[]],[98,107],[105,107],[100,107],[106,107],[104,107],[97,107],[100,97],[102,97],[107,97],[-1,-1,[]],[101,97],[103,97],[106,97],[43,97],[104,97],[105,97],[99,97],[98,97],[83,97],[102,98],[105,98],[101,98],[107,98],[-1,-1,[]],[104,98],[97,98],[83,98],[43,98],[100,98],[99,98],[103,98],[106,98],[107,99],[106,99],[102,99],[-1,-1,[]],[97,99],[104,99],[43,99],[100,99],[98,99],[83,99],[105,99],[103,99],[101,99],[99,100],[83,100],[105,100],[106,100],[101,100],[103,100],[43,100],[104,100],[97,100],[98,100],[102,100],[107,100],[-1,-1,[]],[104,101],[106,101],[98,101],[102,101],[99,101],[105,101],[103,101],[100,101],[83,101],[107,101],[52,101],[97,101],[-1,-1,[]],[99,102],[97,102],[-1,-1,[]],[106,102],[52,102],[98,102],[107,102],[104,102],[100,102],[105,102],[83,102],[101,102],[103,102],[99,83],[105,83],[102,83],[106,83],[52,83],[101,83],[107,83],[103,83],[97,83],[98,83],[-1,-1,[]],[104,83],[100,83],[83,103],[104,103],[106,103],[107,103],[97,103],[100,103],[101,103],[98,103],[105,103],[99,103],[52,103],[102,103],[-1,-1,[]],[96,41],[97,41],[98,41],[99,41],[100,41],[101,41],[102,41],[83,41],[103,41],[[104,-1],16,20],[[105,-1],16,20],[[106,-1],16,20],[[107,-1],16,20],[[97,-1],16,20],[[98,-1],16,20],[[99,-1],16,20],[[100,-1],16,20],[[101,-1],16,20],[[102,-1],16,20],[[83,-1],16,20],[[103,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[109,[],[[108,[-1]]]]],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[104,104],[104,13],[104,13],[110,41],[105,41],[106,41],[107,41],[41,105],[41,106],[41,107],[[41,41,41],97],[[41,41,41],98],[[41,41,41],99],[[41,41,41],100],[[41,41,41],101],[[41,41,41],102],[[41,41,41],83],[[41,41,41],103],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[104,104],[[1,[5]]]],[[105,105],[[1,[5]]]],[[106,106],[[1,[5]]]],[[107,107],[[1,[5]]]],[[97,97],[[1,[5]]]],[[98,98],[[1,[5]]]],[[99,99],[[1,[5]]]],[[100,100],[[1,[5]]]],[[101,101],[[1,[5]]]],[[102,102],[[1,[5]]]],[[83,83],[[1,[5]]]],[[103,103],[[1,[5]]]],[96,41],[97,41],[98,41],[99,41],[100,41],[101,41],[102,41],[83,41],[103,41],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[49,49],[48,48],[50,50],[51,51],[43,43],[52,52],[46,46],[44,44],[47,47],[[49,49],5],[[48,48],5],[[50,50],5],[[51,51],5],[[43,43],5],[[52,52],5],[[46,46],5],[[44,44],5],[[47,47],5],[[],49],[[],48],[[],50],[[],51],[[],43],[[],52],[[],46],[[49,49],13],[[48,48],13],[[50,50],13],[[51,51],13],[[43,43],13],[[52,52],13],[[46,46],13],[[44,44],13],[[47,47],13],[[49,15],[[11,[16,17]]]],[[48,15],[[11,[16,17]]]],[[50,15],[[11,[16,17]]]],[[51,15],[[11,[16,17]]]],[[43,15],[[11,[16,17]]]],[[52,15],[[11,[16,17]]]],[[46,15],[[11,[16,17]]]],[[44,15],[[11,[16,17]]]],[[47,15],[[11,[16,17]]]],[41,49],[104,49],[-1,-1,[]],[-1,-1,[]],[41,48],[105,48],[41,50],[106,50],[-1,-1,[]],[-1,-1,[]],[41,51],[107,51],[97,43],[-1,-1,[]],[100,43],[111,43],[98,43],[99,43],[-1,-1,[]],[102,52],[60,52],[103,52],[101,52],[83,52],[60,46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[60,[[112,[],[[108,[-1]]]]],[]],[60,49],[60,48],[60,50],[60,51],[60,43],[60,52],[60,46],[[49,-1],16,20],[[48,-1],16,20],[[50,-1],16,20],[[51,-1],16,20],[[43,-1],16,20],[[52,-1],16,20],[[46,-1],16,20],[[44,-1],16,20],[[47,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[112,[],[[108,[-1]]]]],-1,[]],[49],[48],[50],[51],[43],[52],[46],[41,49],[41,48],[41,50],[41,51],[111,43],[60,52],[60,46],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[49,49],[[1,[5]]]],[[48,48],[[1,[5]]]],[[50,50],[[1,[5]]]],[[51,51],[[1,[5]]]],[[43,43],[[1,[5]]]],[[52,52],[[1,[5]]]],[[46,46],[[1,[5]]]],[[44,44],[[1,[5]]]],[[47,47],[[1,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[],[[113,[-1]]]]],-1,[]],[49],[48],[50],[51],[43],[52],[46],[[[114,[],[[113,[-1]]]]],-1,[]],[49],[48],[50],[51],[43],[52],[46],[[[114,[],[[113,[-1]]]]],-1,[]],[49],[48],[50],[51],[43],[52],[46],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[115,[-2,-1]]],24,[],[[116,[-1]]]],[[[117,[-1]]],[[118,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],0,[[[118,[-1]]],[[118,[-1]]],[4,3]],[[[117,[-1]]],[[117,[-1]]],[4,3]],[119,119],[[[115,[-1,-2]]],[[115,[-1,-2]]],3,3],[[[118,[-1]],[118,[-1]]],5,[4,6]],[[[117,[-1]],[117,[-1]]],5,[4,6]],[[119,119],5],[[[115,[-1,-2]],[115,[-1,-2]]],5,6,6],[[120,35],13],[[],[[118,[-1]]],4],[[],[[117,[-1]]],[4,7]],[[],119],[[],[[115,[-1,-2]]],7,7],[[[115,[-2,-1]],-4],[[11,[-5]]],[],[[121,[-1]]],[],[[12,[],[[8,[-3]]]]],[]],[[[121,[],[[8,[-1]],[9,[-2]]]],-3,-4],[[11,[-2]]],4,[],[],[[12,[],[[8,[-1]]]]]],0,[[[118,[-1]],[118,[-1]]],13,[4,14]],[[[117,[-1]],[117,[-1]]],13,[4,14]],[[119,119],13],[[[115,[-1,-2]],[115,[-1,-2]]],13,14,14],[[[115,[-1,[118,[-2]]]]],-1,122,4],[[[117,[-1]],-1],[[117,[-1]]],4],0,[[[118,[-1]],15],33,[4,18]],[[[117,[-1]],15],33,[4,18]],[[119,15],33],[[[115,[-1,-2]],15],33,18,18],[-1,-1,[]],[-1,-1,[]],[[[118,[-1]]],[[117,[-1]]],4],[-1,-1,[]],[-1,-1,[]],[[[118,[-1]],-2],16,[4,19],20],[[[117,[-1]],-2],16,[4,19],20],[[119,-1],16,20],[[[115,[-1,-2]],-3],16,19,19,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[123,-1],[[115,[123,-1]]],[]],[[[118,[-1]]],13,4],0,[[],[[118,[-1]]],4],[[],[[117,[-1]]],4],[[-1,-2],[[115,[-1,-2]]],[],[]],[[122,59],122],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[[118,[-1]],[118,[-1]]],[[1,[5]]],[4,21]],[[[117,[-1]],[117,[-1]]],[[1,[5]]],[4,21]],[[119,119],[[1,[5]]]],[[[115,[-1,-2]],[115,[-1,-2]]],[[1,[5]]],21,21],[[[115,[-2,-1]]],[],[],[[0,[-1]]]],[[[125,[],[[124,[-1]]]]],-1,[[73,[],[[31,[35]]]]]],0,0,0,[[[117,[-1]]],[[117,[-1]]],4],[[[117,[-1]]],[[117,[-1]]],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[117,[-1]],119],[[117,[-1]]],4],0,[[[115,[-1,[118,[-2]]]]],-1,122,4],[[[117,[-1]],-1],[[117,[-1]]],4],0,[[[117,[-1]],60],[[117,[-1]]],4],0,0,[[116,-1],24,[]],[[[115,[-1,-2]],35],[[115,[-1,-2]]],126,3],[[[115,[-1,-2]],35],[[115,[-1,-2]]],126,3],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[118,[-1]]],4],[[-1,60],[[118,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[127,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[127,35],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[128,128],[[[129,[-1]]],[[129,[-1]]],3],[127,127],0,[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[127,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[128,128],13],[[[129,[-1]],[129,[-1]]],13,14],[[127,127],13],[[128,15],33],[[[129,[-1]],15],33,18],[[127,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[130,53,53],127],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,60,53,53],127],[128,[[1,[-1]]],[]],[[[129,[-1]]],[[1,[-2]]],4,[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[127,127],[[1,[5]]]],[127,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[127,[118,[-1]]],24,4],[127,130],0,[[127,35],127],[[127,35],127],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,60,53,53],127],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,35],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[131,131],[[[132,[-1]]],[[132,[-1]]],3],[130,130],[[130,130],5],[[130,35],13],[[],130],0,[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[130,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[131,131],13],[[[132,[-1]],[132,[-1]]],13,14],[[130,130],13],[[131,15],33],[[[132,[-1]],15],33,18],[[130,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[131,-1],16,20],[[[132,[-1]],-2],16,19,20],[[130,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,60],130],[131,[[1,[-1]]],[]],[[[132,[-1]]],[[1,[-2]]],4,[]],[[130,59],130],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[130,130],[[1,[5]]]],[130,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[130,[118,[-1]]],24,4],0,[[130,35],130],[[130,35],130],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,60],130],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,35],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[134,134],[[[135,[-1]]],[[135,[-1]]],3],[133,133],[[133,133],5],[[133,35],13],[[],133],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[133,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[134,134],13],[[[135,[-1]],[135,[-1]]],13,14],[[133,133],13],[[134,15],33],[[[135,[-1]],15],33,18],[[133,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[134,-1],16,20],[[[135,[-1]],-2],16,19,20],[[133,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,34],133],[134,[[1,[-1]]],[]],[[[135,[-1]]],[[1,[-2]]],4,[]],[[133,59],133],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[133,133],[[1,[5]]]],[133,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[133,[118,[-1]]],24,4],0,[[133,35],133],[[133,35],133],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,34],133],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[136,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[137,137],[[[138,[-1]]],[[138,[-1]]],3],[136,136],[[137,137],5],[[136,136],5],[[],136],[136,35],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[136,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],0,[[137,137],13],[[136,136],13],[[137,15],33],[[[138,[-1]],15],33,18],[[136,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[137,-1],16,20],[[136,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[136,35],[[35,35],136],[137,[[1,[-1]]],[]],[[[138,[-1]]],[[1,[-2]]],4,[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[137,137],[[1,[5]]]],[[136,136],[[1,[5]]]],[136,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[136,[118,[-1]]],24,4],[[136,35],136],[[136,35],136],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,35],136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[139,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[140,140],[[[141,[-1]]],[[141,[-1]]],3],[139,139],[[140,140],5],[[139,139],5],[[],139],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[139,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[140,140],13],[[139,139],13],[[140,15],33],[[[141,[-1]],15],33,18],[[139,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[140,-1],16,20],[[139,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[35]]],139],[140,[[1,[-1]]],[]],[[[141,[-1]]],[[1,[-2]]],4,[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[140,140],[[1,[5]]]],[[139,139],[[1,[5]]]],[139,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[139,[118,[-1]]],24,4],[[139,35],139],0,[[139,35],139],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[24,55],35],[[24,56],59],[[24,57],59],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,[[1,[35]]]],[24,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,35],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[142,142],[24,24],[[[143,[-1]]],[[143,[-1]]],3],[[24,24],5],[24,[[144,[59]]]],[[24,35],13],[[24,35],13],[[],24],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[24,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[],142],[[142,142],13],[[24,24],13],[[[143,[-1]],[143,[-1]]],13,14],[[142,15],[[11,[16,17]]]],[[24,15],[[11,[16,17]]]],[[[143,[-1]],15],33,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[142,-1],16,20],[[24,-1],16,20],[[[143,[-1]],-2],16,19,20],[[24,24],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,13],[[35,34],24],[142,1],[[[143,[-1]]],[[1,[-2]]],4,[]],[[24,59],24],[[24,59],24],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[24,24],[[1,[5]]]],[24],[[24,34,55],24],[[24,60,57],24],[[24,60,56],24],[24,[[144,[59]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[24,[118,[-1]]],24,4],0,[[24,35],24],[[24,35],24],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,34],24],[[35,35],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],24],0,0,0,0,0,[[145,34],145],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[145,34],145],[[145,34],145],0,[[145,34],145],0,[146,24],[145,147],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[147,147],[145,145],[148,148],[[[149,[-1]]],[[149,[-1]]],3],[146,146],[[147,147],5],[[145,145],5],[[146,146],5],[146,146],[[146,35],13],0,[[],147],[[],145],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[146,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[147,147],13],[[145,145],13],[[148,148],13],[[[149,[-1]],[149,[-1]]],13,14],[[146,146],13],[[147,15],33],[[145,15],33],[[148,15],33],[[[149,[-1]],15],33,18],[[146,15],33],[-1,-1,[]],[147,145],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[147,-1],16,20],[[145,-1],16,20],[[148,-1],16,20],[[[149,[-1]],-2],16,19,20],[[146,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[145,34],145],[34,147],[[],145],[[24,147],146],[148,[[1,[-1]]],[]],[[[149,[-1]]],[[1,[-2]]],4,[]],[[146,59],146],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[147,147],[[1,[5]]]],[[145,145],[[1,[5]]]],[[146,146],[[1,[5]]]],[146,-1,[]],0,[[145,34],145],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[146,[118,[-1]]],24,4],[[145,34],145],[[145,34],145],0,[[145,34],145],0,[[146,35],146],[[146,35],146],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[24,34],146],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[150,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[150,35],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[151,151],[[[152,[-1]]],[[152,[-1]]],3],[150,150],[[150,35],13],0,[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[150,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[151,151],13],[[[152,[-1]],[152,[-1]]],13,14],[[150,150],13],[[151,15],33],[[[152,[-1]],15],33,18],[[150,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[130,53,53],150],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,60,53,53],150],[151,[[1,[-1]]],[]],[[[152,[-1]]],[[1,[-2]]],4,[]],[[150,59],150],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[150,150],[[1,[5]]]],[150,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[150,[118,[-1]]],24,4],[150,130],0,[[150,35],150],[[150,35],150],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,60,53,53],150],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[153,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[154,154],[[[155,[-1]]],[[155,[-1]]],3],[153,153],[[153,153],5],[[153,35],13],[[],153],[[-1,-3],[[11,[16]]],[],[],[[12,[],[[8,[-2]]]]]],[[153,[118,[-1]],-2],[[11,[-3]]],4,[[12,[],[[8,[-1]]]]],[]],[[154,154],13],[[[155,[-1]],[155,[-1]]],13,14],[[153,153],13],[[154,15],33],[[[155,[-1]],15],33,18],[[153,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[66,[35]]],153],[[154,-1],16,20],[[[155,[-1]],-2],16,19,20],[[153,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,35,35],153],[154,[[1,[-1]]],[]],[[[155,[-1]]],[[1,[-2]]],4,[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[153,153],[[1,[5]]]],[153,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[153,[118,[-1]]],24,4],[[153,35],153],[[153,35],153],[[-1,35],[[72,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[156,157],156],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[156,89],156],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[158,[-1]]],24,159],[156,160],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[158,[-1]]],[[158,[-1]]],3],[160,160],[156,156],[89,89],[157,157],[[[91,[-1]]],[[91,[-1]]],3],[161,161],[[[158,[-1]],[158,[-1]]],5,6],[[160,160],5],[[89,89],5],[[157,157],5],[[[91,[-1]],[91,[-1]]],5,6],[[161,161],5],[[],160],[[],161],[[[158,[-1]],-3],[[11,[35]]],159,[],[[12,[],[[8,[-2]]]]]],[[[158,[-1]],[158,[-1]]],13,14],[[160,160],13],[[156,156],13],[[89,89],13],[[157,157],13],[[[91,[-1]],[91,[-1]]],13,14],[[161,161],13],[[[158,[-1]],15],33,18],[[160,15],33],[[156,15],33],[[89,15],33],[[157,15],33],[[[91,[-1]],15],33,18],[[161,15],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[160,156],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[158,[-1]],-2],16,19,20],[[160,-1],16,20],[[89,-1],16,20],[[157,-1],16,20],[[[91,[-1]],-2],16,19,20],[[161,-1],16,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[91,[-1]]],13,4],[[[91,[-1]]],13,4],[[[91,[-1]]],13,4],[[156,161],156],0,[[81,35,-1],[[158,[-1]]],[]],[[],156],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[[158,[-1]],[158,[-1]]],[[1,[5]]],21],[[160,160],[[1,[5]]]],[[156,156],[[1,[5]]]],[[89,89],[[1,[5]]]],[[157,157],[[1,[5]]]],[[[91,[-1]],[91,[-1]]],[[1,[5]]],21],[[161,161],[[1,[5]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[161,60],60],[[[158,[-1]],35],[[158,[-1]]],3],[[[158,[-1]],35],[[158,[-1]]],3],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[81,35,-1,157],[[158,[-1]]],[]],[157,160],[[81,35,-1,89],[[158,[-1]]],[]],[89,160],[[81,35,-1,160],[[158,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[90,90],[[90,90],5],[[[159,[],[[8,[-1]]]],81,35,89,-2],[[11,[35]]],4,[[12,[],[[8,[-1]]]]]],[[[159,[],[[8,[-1]]]],60,35,89,-2],[[11,[35]]],4,[[12,[],[[8,[-1]]]]]],[[90,90],13],[[90,15],33],[-1,-1,[]],[[90,-1],16,20],[-1,-2,[],[]],[[[159,[],[[8,[-1]]]]],60,4],[[[159,[],[[8,[-1]]]],81,35,89],90,4],0,[-1,[[16,[-2,13]]],[],[]],[-1,[[16,[-2,13]]],[],[]],[[90,90],[[1,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[162,[],[[8,[-1]]]],[1,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[1,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[91,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[91,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[1,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[1,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[91,[-1]]],16,4],[[[162,[],[[8,[-1]]]],[91,[-1]]],16,4],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[126,35],126],[[126,35],126]],"c":[],"p":[[6,"Option",3815],[5,"Pixel",0],[10,"Clone",3816],[10,"PixelColor",1367],[6,"Ordering",3817],[10,"Ord",3817],[10,"Default",3818],[17,"Color"],[17,"Output"],[10,"Drawable",0],[6,"Result",3819],[10,"DrawTarget",45],[1,"bool"],[10,"PartialEq",3817],[5,"Formatter",3820],[1,"tuple"],[5,"Error",3820],[10,"Debug",3820],[10,"Hash",3821],[10,"Hasher",3821],[10,"PartialOrd",3817],[5,"TypeId",3822],[5,"Clipped",45],[5,"Rectangle",3088],[5,"ColorConverted",45],[5,"Translated",45],[17,"Error"],[10,"Into",3823],[10,"DrawTargetExt",45],[5,"Cropped",45],[17,"Item"],[10,"IntoIterator",3824],[8,"Result",3820],[5,"Size",235],[5,"Point",235],[5,"Framebuffer",176],[5,"ImageRaw",487],[10,"From",3823],[10,"ByteOrder",2114],[1,"usize"],[1,"u8"],[1,"array"],[5,"RawU16",2114],[6,"LittleEndian",2114],[17,"Raw"],[5,"RawU32",2114],[6,"BigEndian",2114],[5,"RawU2",2114],[5,"RawU1",2114],[5,"RawU4",2114],[5,"RawU8",2114],[5,"RawU24",2114],[5,"Angle",235],[10,"Dimensions",235],[6,"AnchorPoint",235],[6,"AnchorX",235],[6,"AnchorY",235],[10,"AngleUnit",235],[1,"i32"],[1,"u32"],[1,"f32"],[10,"OriginDimensions",235],[5,"Image",487],[10,"ImageDrawable",487],[5,"SubImage",487],[1,"slice"],[10,"GetPixel",487],[10,"ImageDrawableExt",487],[10,"PixelIteratorExt",585],[10,"ContiguousIteratorExt",585],[5,"IntoPixels",593],[5,"Translated",618],[10,"Iterator",3825],[5,"RawDataSlice",644],[5,"BitsIterator",644],[5,"ByteIterator",644],[5,"BytesIterator",644],[5,"MockDisplay",781],[10,"ColorMapping",781],[10,"Fn",3826],[1,"str"],[1,"char"],[5,"Rgb888",1367],[10,"Copy",3827],[5,"MonoTextStyleBuilder",834],[5,"MonoTextStyle",834],[5,"MonoFont",834],[5,"DecorationDimensions",834],[6,"Baseline",3546],[5,"TextMetrics",3768],[6,"DecorationColor",3546],[5,"StrGlyphMapping",1277],[6,"Mapping",1277],[10,"GlyphMapping",1277],[5,"RangeInclusive",3828],[10,"RgbColor",1367],[5,"Rgb555",1367],[5,"Bgr555",1367],[5,"Rgb565",1367],[5,"Bgr565",1367],[5,"Rgb666",1367],[5,"Bgr666",1367],[5,"Bgr888",1367],[6,"BinaryColor",1367],[5,"Gray2",1367],[5,"Gray4",1367],[5,"Gray8",1367],[17,"Storage"],[10,"IntoStorage",1367],[10,"GrayColor",1367],[1,"u16"],[10,"RawData",2114],[17,"Bytes"],[10,"ToBytes",2114],[5,"Styled",2453],[10,"StyledDimensions",2453],[5,"PrimitiveStyleBuilder",2453],[5,"PrimitiveStyle",2453],[6,"StrokeAlignment",2453],[10,"ContainsPoint",2453],[10,"StyledDrawable",2453],[10,"OffsetOutline",2453],[10,"Primitive",2453],[17,"Iter"],[10,"PointsIter",2453],[10,"Transform",3812],[5,"Arc",2626],[5,"Points",2626],[5,"StyledPixelsIterator",2626],[5,"Circle",2717],[5,"Points",2717],[5,"StyledPixelsIterator",2717],[5,"Ellipse",2811],[5,"Points",2811],[5,"StyledPixelsIterator",2811],[5,"Line",2905],[5,"Points",2905],[5,"StyledPixelsIterator",2905],[5,"Polyline",2998],[5,"Points",2998],[5,"StyledPixelsIterator",2998],[5,"Points",3088],[5,"StyledPixelsIterator",3088],[5,"Range",3828],[5,"CornerRadiiBuilder",3198],[5,"RoundedRectangle",3198],[5,"CornerRadii",3198],[5,"Points",3198],[5,"StyledPixelsIterator",3198],[5,"Sector",3362],[5,"Points",3362],[5,"StyledPixelsIterator",3362],[5,"Triangle",3455],[5,"Points",3455],[5,"StyledPixelsIterator",3455],[5,"TextStyleBuilder",3546],[6,"Alignment",3546],[5,"Text",3546],[10,"TextRenderer",3768],[5,"TextStyle",3546],[6,"LineHeight",3546],[10,"CharacterStyle",3768],[10,"WebColors",1367]],"b":[[194,"impl-DrawTarget-for-Framebuffer%3CC,+RawU16,+LittleEndian,+WIDTH,+HEIGHT,+N%3E"],[195,"impl-DrawTarget-for-Framebuffer%3CC,+RawU32,+LittleEndian,+WIDTH,+HEIGHT,+N%3E"],[196,"impl-DrawTarget-for-Framebuffer%3CC,+RawU32,+BigEndian,+WIDTH,+HEIGHT,+N%3E"],[197,"impl-DrawTarget-for-Framebuffer%3CC,+RawU2,+BO,+WIDTH,+HEIGHT,+N%3E"],[198,"impl-DrawTarget-for-Framebuffer%3CC,+RawU1,+BO,+WIDTH,+HEIGHT,+N%3E"],[199,"impl-DrawTarget-for-Framebuffer%3CC,+RawU4,+BO,+WIDTH,+HEIGHT,+N%3E"],[200,"impl-DrawTarget-for-Framebuffer%3CC,+RawU16,+BigEndian,+WIDTH,+HEIGHT,+N%3E"],[201,"impl-DrawTarget-for-Framebuffer%3CC,+RawU8,+BO,+WIDTH,+HEIGHT,+N%3E"],[202,"impl-DrawTarget-for-Framebuffer%3CC,+RawU24,+LittleEndian,+WIDTH,+HEIGHT,+N%3E"],[203,"impl-DrawTarget-for-Framebuffer%3CC,+RawU24,+BigEndian,+WIDTH,+HEIGHT,+N%3E"],[216,"impl-Framebuffer%3CC,+RawU24,+BigEndian,+WIDTH,+HEIGHT,+N%3E"],[217,"impl-Framebuffer%3CC,+RawU2,+BO,+WIDTH,+HEIGHT,+N%3E"],[218,"impl-Framebuffer%3CC,+RawU1,+BO,+WIDTH,+HEIGHT,+N%3E"],[219,"impl-Framebuffer%3CC,+RawU4,+BO,+WIDTH,+HEIGHT,+N%3E"],[220,"impl-Framebuffer%3CC,+RawU8,+BO,+WIDTH,+HEIGHT,+N%3E"],[221,"impl-Framebuffer%3CC,+RawU16,+LittleEndian,+WIDTH,+HEIGHT,+N%3E"],[222,"impl-Framebuffer%3CC,+RawU32,+BigEndian,+WIDTH,+HEIGHT,+N%3E"],[223,"impl-Framebuffer%3CC,+RawU16,+BigEndian,+WIDTH,+HEIGHT,+N%3E"],[224,"impl-Framebuffer%3CC,+RawU24,+LittleEndian,+WIDTH,+HEIGHT,+N%3E"],[225,"impl-Framebuffer%3CC,+RawU32,+LittleEndian,+WIDTH,+HEIGHT,+N%3E"],[261,"impl-Add-for-Point"],[262,"impl-Add%3CSize%3E-for-Point"],[265,"impl-AddAssign-for-Point"],[266,"impl-AddAssign%3CSize%3E-for-Point"],[338,"impl-Display-for-Point"],[339,"impl-Debug-for-Point"],[340,"impl-Debug-for-Size"],[341,"impl-Display-for-Size"],[346,"impl-From%3C%26%5Bi32;+2%5D%3E-for-Point"],[347,"impl-From%3C(i32,+i32)%3E-for-Point"],[349,"impl-From%3C%5Bi32;+2%5D%3E-for-Point"],[350,"impl-From%3C(u32,+u32)%3E-for-Size"],[351,"impl-From%3C%26%5Bu32;+2%5D%3E-for-Size"],[353,"impl-From%3C%5Bu32;+2%5D%3E-for-Size"],[420,"impl-Sub%3CSize%3E-for-Point"],[421,"impl-Sub-for-Point"],[424,"impl-SubAssign%3CSize%3E-for-Point"],[425,"impl-SubAssign-for-Point"],[430,"impl-TryFrom%3C%26%5Bu32;+2%5D%3E-for-Point"],[431,"impl-TryFrom%3C(u32,+u32)%3E-for-Point"],[432,"impl-TryFrom%3C%5Bu32;+2%5D%3E-for-Point"],[690,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU32,+LittleEndian%3E"],[691,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU4,+BO%3E"],[692,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU32,+BigEndian%3E"],[693,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU16,+LittleEndian%3E"],[694,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU24,+BigEndian%3E"],[695,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU2,+BO%3E"],[696,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU1,+BO%3E"],[697,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU24,+LittleEndian%3E"],[698,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU8,+BO%3E"],[699,"impl-IntoIterator-for-RawDataSlice%3C\'a,+RawU16,+BigEndian%3E"],[704,"impl-Iterator-for-BitsIterator%3C\'a,+RawU1%3E"],[705,"impl-Iterator-for-BitsIterator%3C\'a,+RawU4%3E"],[706,"impl-Iterator-for-BitsIterator%3C\'a,+RawU2%3E"],[708,"impl-Iterator-for-BytesIterator%3C\'a,+RawU16,+BigEndian%3E"],[709,"impl-Iterator-for-BytesIterator%3C\'a,+RawU32,+BigEndian%3E"],[710,"impl-Iterator-for-BytesIterator%3C\'a,+RawU16,+LittleEndian%3E"],[711,"impl-Iterator-for-BytesIterator%3C\'a,+RawU24,+BigEndian%3E"],[712,"impl-Iterator-for-BytesIterator%3C\'a,+RawU24,+LittleEndian%3E"],[713,"impl-Iterator-for-BytesIterator%3C\'a,+RawU32,+LittleEndian%3E"],[714,"impl-Iterator-for-BitsIterator%3C\'a,+RawU2%3E"],[715,"impl-Iterator-for-BitsIterator%3C\'a,+RawU4%3E"],[716,"impl-Iterator-for-BitsIterator%3C\'a,+RawU1%3E"],[718,"impl-Iterator-for-BytesIterator%3C\'a,+RawU16,+BigEndian%3E"],[719,"impl-Iterator-for-BytesIterator%3C\'a,+RawU24,+BigEndian%3E"],[720,"impl-Iterator-for-BytesIterator%3C\'a,+RawU32,+BigEndian%3E"],[721,"impl-Iterator-for-BytesIterator%3C\'a,+RawU16,+LittleEndian%3E"],[722,"impl-Iterator-for-BytesIterator%3C\'a,+RawU32,+LittleEndian%3E"],[723,"impl-Iterator-for-BytesIterator%3C\'a,+RawU24,+LittleEndian%3E"],[741,"impl-Iterator-for-BitsIterator%3C\'a,+RawU4%3E"],[742,"impl-Iterator-for-BitsIterator%3C\'a,+RawU2%3E"],[743,"impl-Iterator-for-BitsIterator%3C\'a,+RawU1%3E"],[745,"impl-Iterator-for-BytesIterator%3C\'a,+RawU24,+BigEndian%3E"],[746,"impl-Iterator-for-BytesIterator%3C\'a,+RawU16,+BigEndian%3E"],[747,"impl-Iterator-for-BytesIterator%3C\'a,+RawU32,+BigEndian%3E"],[748,"impl-Iterator-for-BytesIterator%3C\'a,+RawU16,+LittleEndian%3E"],[749,"impl-Iterator-for-BytesIterator%3C\'a,+RawU24,+LittleEndian%3E"],[750,"impl-Iterator-for-BytesIterator%3C\'a,+RawU32,+LittleEndian%3E"],[1703,"impl-From%3CBgr565%3E-for-BinaryColor"],[1704,"impl-From%3CGray8%3E-for-BinaryColor"],[1705,"impl-From%3CGray2%3E-for-BinaryColor"],[1706,"impl-From%3CBgr555%3E-for-BinaryColor"],[1707,"impl-From%3CBgr666%3E-for-BinaryColor"],[1708,"impl-From%3CGray4%3E-for-BinaryColor"],[1709,"impl-From%3Cbool%3E-for-BinaryColor"],[1710,"impl-From%3CRgb888%3E-for-BinaryColor"],[1711,"impl-From%3CRawU1%3E-for-BinaryColor"],[1712,"impl-From%3CRgb555%3E-for-BinaryColor"],[1713,"impl-From%3CRgb565%3E-for-BinaryColor"],[1714,"impl-From%3CBgr888%3E-for-BinaryColor"],[1715,"impl-From%3CRgb666%3E-for-BinaryColor"],[1717,"impl-From%3CBgr565%3E-for-Gray2"],[1718,"impl-From%3CBgr666%3E-for-Gray2"],[1719,"impl-From%3CGray4%3E-for-Gray2"],[1720,"impl-From%3CRawU2%3E-for-Gray2"],[1721,"impl-From%3CRgb666%3E-for-Gray2"],[1722,"impl-From%3CRgb565%3E-for-Gray2"],[1723,"impl-From%3CBinaryColor%3E-for-Gray2"],[1725,"impl-From%3CBgr888%3E-for-Gray2"],[1726,"impl-From%3CRgb555%3E-for-Gray2"],[1727,"impl-From%3CGray8%3E-for-Gray2"],[1728,"impl-From%3CRgb888%3E-for-Gray2"],[1729,"impl-From%3CBgr555%3E-for-Gray2"],[1730,"impl-From%3CGray2%3E-for-Gray4"],[1731,"impl-From%3CRawU4%3E-for-Gray4"],[1732,"impl-From%3CBgr555%3E-for-Gray4"],[1733,"impl-From%3CBgr666%3E-for-Gray4"],[1734,"impl-From%3CRgb666%3E-for-Gray4"],[1735,"impl-From%3CRgb555%3E-for-Gray4"],[1736,"impl-From%3CBgr888%3E-for-Gray4"],[1737,"impl-From%3CGray8%3E-for-Gray4"],[1738,"impl-From%3CBinaryColor%3E-for-Gray4"],[1739,"impl-From%3CRgb888%3E-for-Gray4"],[1740,"impl-From%3CRgb565%3E-for-Gray4"],[1741,"impl-From%3CBgr565%3E-for-Gray4"],[1743,"impl-From%3CBgr888%3E-for-Gray8"],[1744,"impl-From%3CRgb666%3E-for-Gray8"],[1745,"impl-From%3CRgb888%3E-for-Gray8"],[1746,"impl-From%3CRawU8%3E-for-Gray8"],[1747,"impl-From%3CBgr666%3E-for-Gray8"],[1748,"impl-From%3CRgb565%3E-for-Gray8"],[1750,"impl-From%3CBgr555%3E-for-Gray8"],[1751,"impl-From%3CGray2%3E-for-Gray8"],[1752,"impl-From%3CBgr565%3E-for-Gray8"],[1753,"impl-From%3CGray4%3E-for-Gray8"],[1754,"impl-From%3CBinaryColor%3E-for-Gray8"],[1755,"impl-From%3CRgb555%3E-for-Gray8"],[1756,"impl-From%3CBgr565%3E-for-Rgb555"],[1757,"impl-From%3CBgr666%3E-for-Rgb555"],[1758,"impl-From%3CGray8%3E-for-Rgb555"],[1760,"impl-From%3CRgb666%3E-for-Rgb555"],[1761,"impl-From%3CBgr888%3E-for-Rgb555"],[1762,"impl-From%3CGray4%3E-for-Rgb555"],[1763,"impl-From%3CRawU16%3E-for-Rgb555"],[1764,"impl-From%3CBinaryColor%3E-for-Rgb555"],[1765,"impl-From%3CGray2%3E-for-Rgb555"],[1766,"impl-From%3CRgb565%3E-for-Rgb555"],[1767,"impl-From%3CBgr555%3E-for-Rgb555"],[1768,"impl-From%3CRgb888%3E-for-Rgb555"],[1769,"impl-From%3CBgr666%3E-for-Bgr555"],[1770,"impl-From%3CGray2%3E-for-Bgr555"],[1771,"impl-From%3CRgb666%3E-for-Bgr555"],[1772,"impl-From%3CGray8%3E-for-Bgr555"],[1774,"impl-From%3CBinaryColor%3E-for-Bgr555"],[1775,"impl-From%3CRgb555%3E-for-Bgr555"],[1776,"impl-From%3CRgb888%3E-for-Bgr555"],[1777,"impl-From%3CRawU16%3E-for-Bgr555"],[1778,"impl-From%3CBgr565%3E-for-Bgr555"],[1779,"impl-From%3CRgb565%3E-for-Bgr555"],[1780,"impl-From%3CBgr888%3E-for-Bgr555"],[1781,"impl-From%3CGray4%3E-for-Bgr555"],[1782,"impl-From%3CGray8%3E-for-Rgb565"],[1783,"impl-From%3CGray4%3E-for-Rgb565"],[1784,"impl-From%3CBgr666%3E-for-Rgb565"],[1786,"impl-From%3CRgb555%3E-for-Rgb565"],[1787,"impl-From%3CBinaryColor%3E-for-Rgb565"],[1788,"impl-From%3CRawU16%3E-for-Rgb565"],[1789,"impl-From%3CBgr565%3E-for-Rgb565"],[1790,"impl-From%3CBgr555%3E-for-Rgb565"],[1791,"impl-From%3CRgb888%3E-for-Rgb565"],[1792,"impl-From%3CGray2%3E-for-Rgb565"],[1793,"impl-From%3CBgr888%3E-for-Rgb565"],[1794,"impl-From%3CRgb666%3E-for-Rgb565"],[1795,"impl-From%3CRgb565%3E-for-Bgr565"],[1796,"impl-From%3CRgb888%3E-for-Bgr565"],[1797,"impl-From%3CGray2%3E-for-Bgr565"],[1798,"impl-From%3CGray4%3E-for-Bgr565"],[1799,"impl-From%3CRgb666%3E-for-Bgr565"],[1800,"impl-From%3CBgr888%3E-for-Bgr565"],[1801,"impl-From%3CRawU16%3E-for-Bgr565"],[1802,"impl-From%3CBinaryColor%3E-for-Bgr565"],[1803,"impl-From%3CRgb555%3E-for-Bgr565"],[1804,"impl-From%3CBgr555%3E-for-Bgr565"],[1805,"impl-From%3CBgr666%3E-for-Bgr565"],[1806,"impl-From%3CGray8%3E-for-Bgr565"],[1808,"impl-From%3CBinaryColor%3E-for-Rgb666"],[1809,"impl-From%3CGray4%3E-for-Rgb666"],[1810,"impl-From%3CBgr555%3E-for-Rgb666"],[1811,"impl-From%3CBgr666%3E-for-Rgb666"],[1812,"impl-From%3CRgb565%3E-for-Rgb666"],[1813,"impl-From%3CGray2%3E-for-Rgb666"],[1814,"impl-From%3CBgr888%3E-for-Rgb666"],[1815,"impl-From%3CBgr565%3E-for-Rgb666"],[1816,"impl-From%3CRgb888%3E-for-Rgb666"],[1817,"impl-From%3CGray8%3E-for-Rgb666"],[1818,"impl-From%3CRawU24%3E-for-Rgb666"],[1819,"impl-From%3CRgb555%3E-for-Rgb666"],[1821,"impl-From%3CRgb565%3E-for-Bgr666"],[1822,"impl-From%3CRgb555%3E-for-Bgr666"],[1824,"impl-From%3CGray4%3E-for-Bgr666"],[1825,"impl-From%3CRawU24%3E-for-Bgr666"],[1826,"impl-From%3CBgr555%3E-for-Bgr666"],[1827,"impl-From%3CGray8%3E-for-Bgr666"],[1828,"impl-From%3CBinaryColor%3E-for-Bgr666"],[1829,"impl-From%3CBgr565%3E-for-Bgr666"],[1830,"impl-From%3CGray2%3E-for-Bgr666"],[1831,"impl-From%3CRgb888%3E-for-Bgr666"],[1832,"impl-From%3CRgb666%3E-for-Bgr666"],[1833,"impl-From%3CBgr888%3E-for-Bgr666"],[1834,"impl-From%3CRgb565%3E-for-Rgb888"],[1835,"impl-From%3CGray2%3E-for-Rgb888"],[1836,"impl-From%3CBgr666%3E-for-Rgb888"],[1837,"impl-From%3CGray4%3E-for-Rgb888"],[1838,"impl-From%3CRawU24%3E-for-Rgb888"],[1839,"impl-From%3CRgb666%3E-for-Rgb888"],[1840,"impl-From%3CGray8%3E-for-Rgb888"],[1841,"impl-From%3CBgr888%3E-for-Rgb888"],[1842,"impl-From%3CRgb555%3E-for-Rgb888"],[1843,"impl-From%3CBgr555%3E-for-Rgb888"],[1845,"impl-From%3CBinaryColor%3E-for-Rgb888"],[1846,"impl-From%3CBgr565%3E-for-Rgb888"],[1847,"impl-From%3CRgb888%3E-for-Bgr888"],[1848,"impl-From%3CBinaryColor%3E-for-Bgr888"],[1849,"impl-From%3CGray4%3E-for-Bgr888"],[1850,"impl-From%3CGray8%3E-for-Bgr888"],[1851,"impl-From%3CRgb555%3E-for-Bgr888"],[1852,"impl-From%3CBgr565%3E-for-Bgr888"],[1853,"impl-From%3CRgb666%3E-for-Bgr888"],[1854,"impl-From%3CBgr555%3E-for-Bgr888"],[1855,"impl-From%3CGray2%3E-for-Bgr888"],[1856,"impl-From%3CRgb565%3E-for-Bgr888"],[1857,"impl-From%3CRawU24%3E-for-Bgr888"],[1858,"impl-From%3CBgr666%3E-for-Bgr888"],[2226,"impl-From%3Cu8%3E-for-RawU1"],[2227,"impl-From%3CBinaryColor%3E-for-RawU1"],[2230,"impl-From%3Cu8%3E-for-RawU2"],[2231,"impl-From%3CGray2%3E-for-RawU2"],[2232,"impl-From%3Cu8%3E-for-RawU4"],[2233,"impl-From%3CGray4%3E-for-RawU4"],[2236,"impl-From%3Cu8%3E-for-RawU8"],[2237,"impl-From%3CGray8%3E-for-RawU8"],[2238,"impl-From%3CRgb555%3E-for-RawU16"],[2240,"impl-From%3CBgr565%3E-for-RawU16"],[2241,"impl-From%3Cu16%3E-for-RawU16"],[2242,"impl-From%3CBgr555%3E-for-RawU16"],[2243,"impl-From%3CRgb565%3E-for-RawU16"],[2245,"impl-From%3CBgr666%3E-for-RawU24"],[2246,"impl-From%3Cu32%3E-for-RawU24"],[2247,"impl-From%3CBgr888%3E-for-RawU24"],[2248,"impl-From%3CRgb666%3E-for-RawU24"],[2249,"impl-From%3CRgb888%3E-for-RawU24"],[3120,"impl-ContainsPoint-for-Rectangle"],[3121,"impl-Rectangle"],[3148,"impl-OffsetOutline-for-Rectangle"],[3149,"impl-Rectangle"]]}],\
["embedded_graphics_core",{"doc":"embedded-graphics-core contains the core components of …","t":"RKRFNNNNNNNNNMNCNNNCNCNNNNCCCNNNNNNNNNRKRNMNNGGGPPPPPPPPPKPKFPFPPPPNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNONNNONNNNRRKKMMMTTTFFFFGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFFFKKTTTTPPKTRFFFFKRTTKTNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTGKRGKFFFFFFFRKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNMNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEEEEEEEEERKEMCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNN","n":["Color","Drawable","Output","Pixel","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","cmp","default","draw","draw","draw_target","eq","fmt","from","geometry","hash","image","into","overflowing_as","overflowing_cast_from","partial_cmp","pixelcolor","prelude","primitives","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","Color","DrawTarget","Error","clear","draw_iter","fill_contiguous","fill_solid","AnchorPoint","AnchorX","AnchorY","Bottom","BottomCenter","BottomLeft","BottomRight","Center","Center","Center","CenterLeft","CenterRight","Dimensions","Left","OriginDimensions","Point","Right","Size","Top","TopCenter","TopLeft","TopRight","abs","add","add","add","add_assign","add_assign","add_assign","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","component_div","component_div","component_max","component_max","component_min","component_min","component_mul","component_mul","default","default","div","div","div_assign","div_assign","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_xy","hash","hash","hash","hash","hash","height","index","index","into","into","into","into","into","mul","mul","mul_assign","mul_assign","neg","new","new","new_equal","new_equal","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_add","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_sub","size","sub","sub","sub","sub_assign","sub_assign","sub_assign","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x_axis","x_axis","y","y","y_axis","y_axis","zero","zero","Color","Color","GetPixel","ImageDrawable","draw","draw_sub_image","pixel","BLACK","BLACK","BLUE","Bgr555","Bgr565","Bgr666","Bgr888","BinaryColor","CSS_ALICE_BLUE","CSS_ANTIQUE_WHITE","CSS_AQUA","CSS_AQUAMARINE","CSS_AZURE","CSS_BEIGE","CSS_BISQUE","CSS_BLACK","CSS_BLANCHED_ALMOND","CSS_BLUE","CSS_BLUE_VIOLET","CSS_BROWN","CSS_BURLY_WOOD","CSS_CADET_BLUE","CSS_CHARTREUSE","CSS_CHOCOLATE","CSS_CORAL","CSS_CORNFLOWER_BLUE","CSS_CORNSILK","CSS_CRIMSON","CSS_CYAN","CSS_DARK_BLUE","CSS_DARK_CYAN","CSS_DARK_GOLDENROD","CSS_DARK_GRAY","CSS_DARK_GREEN","CSS_DARK_KHAKI","CSS_DARK_MAGENTA","CSS_DARK_OLIVE_GREEN","CSS_DARK_ORANGE","CSS_DARK_ORCHID","CSS_DARK_RED","CSS_DARK_SALMON","CSS_DARK_SEA_GREEN","CSS_DARK_SLATE_BLUE","CSS_DARK_SLATE_GRAY","CSS_DARK_TURQUOISE","CSS_DARK_VIOLET","CSS_DEEP_PINK","CSS_DEEP_SKY_BLUE","CSS_DIM_GRAY","CSS_DODGER_BLUE","CSS_FIRE_BRICK","CSS_FLORAL_WHITE","CSS_FOREST_GREEN","CSS_FUCHSIA","CSS_GAINSBORO","CSS_GHOST_WHITE","CSS_GOLD","CSS_GOLDENROD","CSS_GRAY","CSS_GREEN","CSS_GREEN_YELLOW","CSS_HONEYDEW","CSS_HOT_PINK","CSS_INDIAN_RED","CSS_INDIGO","CSS_IVORY","CSS_KHAKI","CSS_LAVENDER","CSS_LAVENDER_BLUSH","CSS_LAWN_GREEN","CSS_LEMON_CHIFFON","CSS_LIGHT_BLUE","CSS_LIGHT_CORAL","CSS_LIGHT_CYAN","CSS_LIGHT_GOLDENROD_YELLOW","CSS_LIGHT_GRAY","CSS_LIGHT_GREEN","CSS_LIGHT_PINK","CSS_LIGHT_SALMON","CSS_LIGHT_SEA_GREEN","CSS_LIGHT_SKY_BLUE","CSS_LIGHT_SLATE_GRAY","CSS_LIGHT_STEEL_BLUE","CSS_LIGHT_YELLOW","CSS_LIME","CSS_LIME_GREEN","CSS_LINEN","CSS_MAGENTA","CSS_MAROON","CSS_MEDIUM_AQUAMARINE","CSS_MEDIUM_BLUE","CSS_MEDIUM_ORCHID","CSS_MEDIUM_PURPLE","CSS_MEDIUM_SEA_GREEN","CSS_MEDIUM_SLATE_BLUE","CSS_MEDIUM_SPRING_GREEN","CSS_MEDIUM_TURQUOISE","CSS_MEDIUM_VIOLET_RED","CSS_MIDNIGHT_BLUE","CSS_MINT_CREAM","CSS_MISTY_ROSE","CSS_MOCCASIN","CSS_NAVAJO_WHITE","CSS_NAVY","CSS_OLD_LACE","CSS_OLIVE","CSS_OLIVE_DRAB","CSS_ORANGE","CSS_ORANGE_RED","CSS_ORCHID","CSS_PALE_GOLDENROD","CSS_PALE_GREEN","CSS_PALE_TURQUOISE","CSS_PALE_VIOLET_RED","CSS_PAPAYA_WHIP","CSS_PEACH_PUFF","CSS_PERU","CSS_PINK","CSS_PLUM","CSS_POWDER_BLUE","CSS_PURPLE","CSS_REBECCAPURPLE","CSS_RED","CSS_ROSY_BROWN","CSS_ROYAL_BLUE","CSS_SADDLE_BROWN","CSS_SALMON","CSS_SANDY_BROWN","CSS_SEASHELL","CSS_SEA_GREEN","CSS_SIENNA","CSS_SILVER","CSS_SKY_BLUE","CSS_SLATE_BLUE","CSS_SLATE_GRAY","CSS_SNOW","CSS_SPRING_GREEN","CSS_STEEL_BLUE","CSS_TAN","CSS_TEAL","CSS_THISTLE","CSS_TOMATO","CSS_TURQUOISE","CSS_VIOLET","CSS_WHEAT","CSS_WHITE","CSS_WHITE_SMOKE","CSS_YELLOW","CSS_YELLOW_GREEN","CYAN","GREEN","Gray2","Gray4","Gray8","GrayColor","IntoStorage","MAGENTA","MAX_B","MAX_G","MAX_R","Off","On","PixelColor","RED","Raw","Rgb555","Rgb565","Rgb666","Rgb888","RgbColor","Storage","WHITE","WHITE","WebColors","YELLOW","az","az","az","az","az","az","az","az","az","az","az","az","b","b","b","b","b","b","b","b","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","g","g","g","g","g","g","g","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","into_storage","invert","is_off","is_on","luma","luma","luma","luma","new","new","new","new","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","r","r","r","r","r","r","r","raw","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BITS_PER_PIXEL","BigEndian","ByteOrder","Bytes","LittleEndian","RawData","RawU1","RawU16","RawU2","RawU24","RawU32","RawU4","RawU8","Storage","ToBytes","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Dimensions","DrawTarget","Drawable","GrayColor","ImageDrawable","IntoStorage","OriginDimensions","Pixel","PixelColor","Point","PointsIter","RawData","RgbColor","Size","WebColors","_","Iter","PointsIter","Rectangle","points","rectangle","Points","Rectangle","anchor_point","anchor_x","anchor_y","az","az","borrow","borrow","borrow_mut","borrow_mut","bottom_right","bounding_box","cast_from","cast_from","center","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","cmp","columns","contains","default","empty","eq","eq","fmt","fmt","from","from","hash","hash","intersection","into","into","into_iter","is_zero_sized","new","next","offset","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","points","resized","resized_height","resized_width","rows","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","size","top_left","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","with_center","with_corners","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","zero"],"q":[[0,"embedded_graphics_core"],[38,"embedded_graphics_core::draw_target"],[45,"embedded_graphics_core::geometry"],[258,"embedded_graphics_core::image"],[265,"embedded_graphics_core::pixelcolor"],[992,"embedded_graphics_core::pixelcolor::raw"],[1305,"embedded_graphics_core::prelude"],[1321,"embedded_graphics_core::primitives"],[1326,"embedded_graphics_core::primitives::rectangle"],[1402,"core::option"],[1403,"core::clone"],[1404,"core::cmp"],[1405,"core::cmp"],[1406,"core::result"],[1407,"core::cmp"],[1408,"core::fmt"],[1409,"core::hash"],[1410,"core::iter::traits::collect"],[1411,"core::iter::traits::iterator"],[1412,"core::ops::range"]],"d":["The pixel color type.","Marks an object as “drawable”. Must be implemented for …","The return type of the <code>draw</code> method.","A single pixel.","","","","","","","","","","Draw the graphics object using the supplied DrawTarget.","","A target for embedded-graphics drawing operations.","","","Returns the argument unchanged.","Geometry module.","","Image drawable.","Calls <code>U::from(self)</code>.","","","","Pixel color types.","Prelude","Core primitives.","","","","","","","","","","The pixel color type the targetted display supports.","A target for embedded-graphics drawing operations.","Error type to return when a drawing operation fails.","Fill the entire display with a solid color.","Draw individual pixels to the display without a defined …","Fill a given area with an iterator providing a contiguous …","Fill a given area with a solid color.","Anchor point.","X axis anchor point.","Y axis anchor point.","Bottom.","Bottom center.","Bottom left.","Bottom right.","Center.","Center.","Center.","Center left.","Center right.","Adds the ability to get the bounding box of an item.","Left.","Dimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.","2D point.","Right.","2D size.","Top.","Top center.","Top left.","Top right.","Remove the sign from a coordinate","","Offsets a point by adding a size.","","Offsets a point by adding a size.","","","","","","","","","","","","","","","","","","Returns the bounding box.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the componentwise division of two <code>Points</code>s.","Returns the componentwise division of two <code>Size</code>s.","Returns the componentwise maximum of two <code>Point</code>s","Returns the componentwise maximum of two <code>Size</code>s.","Returns the componentwise minimum of two <code>Point</code>s","Returns the componentwise minimum of two <code>Size</code>s.","Returns the componentwise multiplication of two <code>Point</code>s.","Returns the componentwise multiplication of two <code>Size</code>s.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an anchor point from an X and Y component.","","","","","","The height.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a point from  X and Y coordinates.","Creates a size from a width and a height.","Creates a point with X and Y values set to an equal value.","Creates a size with width and height set to an equal value.","","","","","","","","","","","","","","","","Saturating addition.","","","","","","","","","","","Saturating subtraction.","Returns the size of the bounding box.","","Offsets a point by subtracting a size.","","","Offsets a point by subtracting a size.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width.","","","","","","","","","","","Returns the X axis component.","The x coordinate.","Returns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.","Returns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.","Returns the Y axis component.","The y coordinate.","Returns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.","Returns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.","Creates a point with X and Y equal to zero.","Creates a size with width and height equal to zero.","The color type.","The color type.","Pixel getter.","Image drawable.","Draws the entire image to the target.","Draws a part of the image to the target.","Gets the color of a pixel.","Black color (0% luma).","Black color (R: 0%, G: 0%, B: 0%)","Blue color (R: 0%, G: 0%, B: 100%)","Bgr555 color.","Bgr565 color.","Bgr666 color.","Bgr888 color.","Binary color."," Alice Blue"," Antique White"," Aqua"," Aquamarine"," Azure"," Beige"," Bisque"," Black"," Blanched Almond"," Blue"," Blue Violet"," Brown"," Burly Wood"," Cadet Blue"," Chartreuse"," Chocolate"," Coral"," Cornflower Blue"," Cornsilk"," Crimson"," Cyan"," Dark Blue"," Dark Cyan"," Dark Goldenrod"," Dark Gray"," Dark Green"," Dark Khaki"," Dark Magenta"," Dark Olive Green"," Dark Orange"," Dark Orchid"," Dark Red"," Dark Salmon"," Dark Sea Green"," Dark Slate Blue"," Dark Slate Gray"," Dark Turquoise"," Dark Violet"," Deep Pink"," Deep Sky Blue"," Dim Gray"," Dodger Blue"," Fire Brick"," Floral White"," Forest Green"," Fuchsia"," Gainsboro"," Ghost White"," Gold"," Goldenrod"," Gray"," Green"," Green Yellow"," Honeydew"," Hot Pink"," Indian Red"," Indigo"," Ivory"," Khaki"," Lavender"," Lavender Blush"," Lawn Green"," Lemon Chiffon"," Light Blue"," Light Coral"," Light Cyan"," Light Goldenrod Yellow"," Light Gray"," Light Green"," Light Pink"," Light Salmon"," Light Sea Green"," Light Sky Blue"," Light Slate Gray"," Light Steel Blue"," Light Yellow"," Lime"," Lime Green"," Linen"," Magenta"," Maroon"," Medium Aquamarine"," Medium Blue"," Medium Orchid"," Medium Purple"," Medium Sea Green"," Medium Slate Blue"," Medium Spring Green"," Medium Turquoise"," Medium Violet Red"," Midnight Blue"," Mint Cream"," Misty Rose"," Moccasin"," Navajo White"," Navy"," Old Lace"," Olive"," Olive Drab"," Orange"," Orange Red"," Orchid"," Pale Goldenrod"," Pale Green"," Pale Turquoise"," Pale Violet Red"," Papaya Whip"," Peach Puff"," Peru"," Pink"," Plum"," Powder Blue"," Purple"," Rebeccapurple"," Red"," Rosy Brown"," Royal Blue"," Saddle Brown"," Salmon"," Sandy Brown"," Seashell"," Sea Green"," Sienna"," Silver"," Sky Blue"," Slate Blue"," Slate Gray"," Snow"," Spring Green"," Steel Blue"," Tan"," Teal"," Thistle"," Tomato"," Turquoise"," Violet"," Wheat"," White"," White Smoke"," Yellow"," Yellow Green","Cyan color (R: 0%, G: 100%, B: 100%)","Green color (R: 0%, G: 100%, B: 0%)","2 bit grayscale color.","4 bit grayscale color.","8 bit grayscale color.","Grayscale color.","Convert a <code>PixelColor</code> into its underlying storage type","Magenta color (R: 100%, G: 0%, B: 100%)","The maximum value in the blue channel.","The maximum value in the green channel.","The maximum value in the red channel.","Inactive pixel.","Active pixel.","Pixel color trait.","Red color (R: 100%, G: 0%, B: 0%)","Raw data type.","Rgb555 color.","Rgb565 color.","Rgb666 color.","Rgb888 color.","RGB color.","The underlying storage type for the pixel color","White color (100% luma).","White color (R: 100%, G: 100%, B: 100%)","Named colors as defined in the CSS specification.","Yellow color (R: 100%, G: 100%, B: 0%)","","","","","","","","","","","","","Returns the blue channel value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the green channel value.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the <code>PixelColor</code> into its raw storage form","","","","","","","","","","","","","Inverts the color.","Returns <code>true</code> if this color is <code>Off</code>.","Returns <code>true</code> if this color is <code>On</code>.","Returns the luma channel value.","","","","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new grayscale color.","Creates a new Rgb555 color. Too large channel values will …","Creates a new Bgr555 color. Too large channel values will …","Creates a new Rgb565 color. Too large channel values will …","Creates a new Bgr565 color. Too large channel values will …","Creates a new Rgb666 color. Too large channel values will …","Creates a new Bgr666 color. Too large channel values will …","Creates a new Rgb888 color. Too large channel values will …","Creates a new Bgr888 color. Too large channel values will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the red channel value.","","","","","","","","","Raw color types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bits per pixel.","Big endian byte order marker.","Raw data byte order.","Return type of methods in this trait.","Little endian byte order marker.","Trait implemented by all <code>RawUx</code> types.","1 bit per pixel raw data.","16 bits per pixel raw data.","2 bits per pixel raw data.","24 bits per pixel raw data.","32 bits per pixel raw data.","4 bits per pixel raw data.","8 bits per pixel raw data.","Storage type.","Trait to convert colors into a byte array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>u32</code> into a <code>RawData</code> type.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this raw data into the storage type.","","","","","","","","Creates a new color from the least significant 1 bit of …","Creates a new color from the least significant 2 bits of …","Creates a new color from the least significant 4 bits of …","Creates a new color from the least significant 8 bits of …","Creates a new color from the least significant 16 bits of …","Creates a new color from the least significant 24 bits of …","Creates a new color from the least significant 32 bits of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a color into a byte array with big endian byte …","","","","","","","","Converts a color into a byte array with little endian byte …","","","","","","","","Converts a color into a byte array with native byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterator over all points inside the primitive.","Create an iterator over all points in the primitive.","","Returns an iterator over all points inside the primitive.","The rectangle primitive.","Iterator over all points inside the rectangle.","Rectangle primitive","Returns an anchor point.","Returns the X coordinate of a given anchor edge of the …","Returns the Y coordinate of a given anchor edge of the …","","","","","","","Returns the bottom right corner of this rectangle.","","","","Returns the center of this rectangle.","","","","","","","","Returns the range of X coordinates in this rectangle.","Return whether the rectangle contains a given point.","","Create a points iterator that returns no items.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns a new <code>Rectangle</code> containing the intersection of <code>self</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> is the rectangle is zero sized.","Creates a new rectangle from the top left point and the …","","Offset the rectangle by a given value.","","","","","","","Returns a resized copy of this rectangle.","Returns a new rectangle with the given height, resized …","Returns a new rectangle with the given width, resized …","Returns the range of Y coordinates in this rectangle.","","","","","Size of the rectangle.","Top left point of the rectangle.","","","","","","","","","","","Creates a new rectangle from the center point and the size.","Creates a new rectangle from two corners.","","","","","Returns a zero sized rectangle."],"i":[10,0,10,0,2,2,2,2,2,2,2,2,2,10,2,0,2,2,2,0,2,0,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,12,0,12,12,12,12,12,0,0,0,32,30,30,30,30,31,32,30,30,0,31,0,0,31,0,32,30,30,30,27,27,27,28,27,27,28,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,29,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,30,31,32,27,27,28,28,30,31,32,27,27,27,27,28,28,28,28,30,31,32,30,27,28,30,31,32,28,27,28,27,28,30,31,32,27,28,27,28,27,27,28,27,28,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,28,27,28,30,31,32,27,28,30,31,32,28,37,27,27,28,27,27,28,27,27,27,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,27,28,30,31,32,28,27,28,30,31,32,27,28,30,31,32,30,27,27,28,30,27,27,28,27,28,38,39,0,0,38,38,39,62,40,40,0,0,0,0,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,40,40,0,0,0,0,0,40,40,40,40,50,50,0,40,3,0,0,0,0,0,61,62,40,0,40,50,51,52,53,42,43,44,45,46,47,48,49,40,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,40,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,61,50,51,52,53,42,43,44,45,46,47,48,49,50,50,50,62,51,52,53,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,40,42,43,44,45,46,47,48,49,0,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,50,51,52,53,42,43,44,45,46,47,48,49,67,0,0,69,0,0,0,0,0,0,0,0,0,67,0,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,58,58,58,59,59,59,59,59,59,63,63,64,65,67,54,55,56,57,58,59,63,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,67,54,55,56,57,58,59,63,54,55,56,57,58,59,63,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,69,54,55,56,57,58,59,63,69,54,55,56,57,58,59,63,69,54,55,56,57,58,59,63,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,54,55,56,57,58,59,63,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,71,0,0,0,26,26,26,73,26,73,26,73,26,26,26,73,26,26,73,26,73,26,73,26,26,26,26,26,73,73,26,73,26,73,26,73,26,26,73,26,73,26,26,73,26,73,26,73,26,26,26,26,26,26,26,73,26,73,26,26,26,73,26,73,26,73,26,73,26,73,26,26,26,73,26,73,26,26],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[[2,[-1]]],[[2,[-1]]],[3,4]],[[[2,[-1]],[2,[-1]]],5,[3,6]],[[],[[2,[-1]]],[3,7]],[[[10,[],[[8,[-1]],[9,[-2]]]],-3],[[11,[-2]]],3,[],[[12,[],[[8,[-1]]]]]],[[[2,[-1]],-2],[[11,[-3]]],3,[[12,[],[[8,[-1]]]]],[]],0,[[[2,[-1]],[2,[-1]]],13,[3,14]],[[[2,[-1]],15],16,[3,17]],[-1,-1,[]],0,[[[2,[-1]],-2],18,[3,19],20],0,[-1,-2,[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[[[2,[-1]],[2,[-1]]],[[1,[5]]],[3,21]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[12,[],[[8,[-1]],[23,[-2]]]],-1],[[11,[18,-2]]],3,[]],[[[12,[],[[8,[-1]],[23,[-2]]]],-3],[[11,[18,-2]]],3,[],[[25,[],[[24,[[2,[-1]]]]]]]],[[[12,[],[[8,[-1]],[23,[-2]]]],26,-3],[[11,[18,-2]]],3,[],[[25,[],[[24,[-1]]]]]],[[[12,[],[[8,[-1]],[23,[-2]]]],26,-1],[[11,[18,-2]]],3,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27,27],[[27,27],27],[[27,28],27],[[28,28],28],[[27,28],18],[[27,27],18],[[28,28],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[27,27],[28,28],[30,30],[31,31],[32,32],[[27,27],5],[[28,28],5],[[30,30],5],[[31,31],5],[[32,32],5],[[27,27],27],[[28,28],28],[[27,27],27],[[28,28],28],[[27,27],27],[[28,28],28],[[27,27],27],[[28,28],28],[[],27],[[],28],[[27,33],27],[[28,34],28],[[27,33],18],[[28,34],18],[[27,27],13],[[28,28],13],[[30,30],13],[[31,31],13],[[32,32],13],[[27,15],16],[[27,15],16],[[28,15],16],[[28,15],16],[[30,15],16],[[31,15],16],[[32,15],16],[-1,-1,[]],[[[35,[33]]],27],[[[18,[33,33]]],27],[[[35,[33]]],27],[[[35,[34]]],28],[-1,-1,[]],[[[18,[34,34]]],28],[[[35,[34]]],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[31,32],30],[[27,-1],18,20],[[28,-1],18,20],[[30,-1],18,20],[[31,-1],18,20],[[32,-1],18,20],0,[[27,36],33],[[28,36],34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[27,33],27],[[28,34],28],[[27,33],18],[[28,34],18],[27,-1,[]],[[33,33],27],[[34,34],28],[33,27],[34,28],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[[27,27],[[1,[5]]]],[[28,28],[[1,[5]]]],[[30,30],[[1,[5]]]],[[31,31],[[1,[5]]]],[[32,32],[[1,[5]]]],[[28,28],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[28,28],28],[37,28],[[27,27],27],[[27,28],27],[[28,28],28],[[27,27],18],[[27,28],18],[[28,28],18],[[[18,[34,34]]],[[11,[27,-1]]],[]],[[[35,[34]]],[[11,[27,-1]]],[]],[-1,[[11,[-2]]],[],[]],[[[35,[34]]],[[11,[27,-1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,31],0,[27,27],[28,28],[30,32],0,[27,27],[28,28],[[],27],[[],28],0,0,0,0,[[[38,[],[[8,[-1]]]],-2],[[11,[18]]],3,[[12,[],[[8,[-1]]]]]],[[[38,[],[[8,[-1]]]],-2,26],[[11,[18]]],3,[[12,[],[[8,[-1]]]]]],[[[39,[],[[8,[-1]]]],27],[[1,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,41],[42,41],[43,41],[44,41],[45,41],[46,41],[47,41],[48,41],[49,41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[50,50],[51,51],[52,52],[53,53],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[[50,50],5],[[51,51],5],[[52,52],5],[[53,53],5],[[42,42],5],[[43,43],5],[[44,44],5],[[45,45],5],[[46,46],5],[[47,47],5],[[48,48],5],[[49,49],5],[[],50],[[],51],[[],52],[[],53],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],48],[[],49],[[50,50],13],[[51,51],13],[[52,52],13],[[53,53],13],[[42,42],13],[[43,43],13],[[44,44],13],[[45,45],13],[[46,46],13],[[47,47],13],[[48,48],13],[[49,49],13],[[50,15],16],[[51,15],16],[[52,15],16],[[53,15],16],[[42,15],16],[[43,15],16],[[44,15],16],[[45,15],16],[[46,15],16],[[47,15],16],[[48,15],16],[[49,15],16],[48,50],[47,50],[49,50],[45,50],[52,50],[53,50],[46,50],[13,50],[44,50],[43,50],[51,50],[-1,-1,[]],[42,50],[54,50],[49,51],[53,51],[47,51],[48,51],[43,51],[42,51],[55,51],[50,51],[-1,-1,[]],[44,51],[52,51],[46,51],[45,51],[48,52],[53,52],[45,52],[56,52],[51,52],[43,52],[46,52],[42,52],[50,52],[47,52],[-1,-1,[]],[49,52],[44,52],[48,53],[51,53],[43,53],[42,53],[52,53],[45,53],[44,53],[50,53],[49,53],[47,53],[57,53],[-1,-1,[]],[46,53],[51,42],[46,42],[44,42],[52,42],[58,42],[49,42],[-1,-1,[]],[53,42],[47,42],[48,42],[43,42],[50,42],[45,42],[51,43],[-1,-1,[]],[47,43],[50,43],[48,43],[49,43],[45,43],[58,43],[53,43],[46,43],[42,43],[52,43],[44,43],[-1,-1,[]],[58,44],[43,44],[49,44],[53,44],[48,44],[50,44],[52,44],[51,44],[47,44],[46,44],[42,44],[45,44],[-1,-1,[]],[44,45],[51,45],[42,45],[47,45],[52,45],[46,45],[50,45],[43,45],[58,45],[49,45],[53,45],[48,45],[49,46],[52,46],[-1,-1,[]],[53,46],[44,46],[59,46],[51,46],[47,46],[50,46],[45,46],[43,46],[42,46],[48,46],[50,47],[45,47],[51,47],[-1,-1,[]],[43,47],[49,47],[48,47],[42,47],[59,47],[46,47],[44,47],[53,47],[52,47],[45,48],[51,48],[49,48],[-1,-1,[]],[43,48],[59,48],[44,48],[52,48],[42,48],[47,48],[46,48],[50,48],[53,48],[53,49],[51,49],[59,49],[43,49],[42,49],[45,49],[52,49],[46,49],[-1,-1,[]],[50,49],[44,49],[47,49],[48,49],[40,41],[42,41],[43,41],[44,41],[45,41],[46,41],[47,41],[48,41],[49,41],[[50,-1],18,20],[[51,-1],18,20],[[52,-1],18,20],[[53,-1],18,20],[[42,-1],18,20],[[43,-1],18,20],[[44,-1],18,20],[[45,-1],18,20],[[46,-1],18,20],[[47,-1],18,20],[[48,-1],18,20],[[49,-1],18,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[],[[60,[-1]]]]],-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[50,50],[50,13],[50,13],[62,41],[51,41],[52,41],[53,41],[41,51],[41,52],[41,53],[[41,41,41],42],[[41,41,41],43],[[41,41,41],44],[[41,41,41],45],[[41,41,41],46],[[41,41,41],47],[[41,41,41],48],[[41,41,41],49],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[[50,50],[[1,[5]]]],[[51,51],[[1,[5]]]],[[52,52],[[1,[5]]]],[[53,53],[[1,[5]]]],[[42,42],[[1,[5]]]],[[43,43],[[1,[5]]]],[[44,44],[[1,[5]]]],[[45,45],[[1,[5]]]],[[46,46],[[1,[5]]]],[[47,47],[[1,[5]]]],[[48,48],[[1,[5]]]],[[49,49],[[1,[5]]]],[40,41],[42,41],[43,41],[44,41],[45,41],[46,41],[47,41],[48,41],[49,41],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[63,63],[64,64],[65,65],[[54,54],5],[[55,55],5],[[56,56],5],[[57,57],5],[[58,58],5],[[59,59],5],[[63,63],5],[[64,64],5],[[65,65],5],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],63],[[54,54],13],[[55,55],13],[[56,56],13],[[57,57],13],[[58,58],13],[[59,59],13],[[63,63],13],[[64,64],13],[[65,65],13],[[54,15],16],[[55,15],16],[[56,15],16],[[57,15],16],[[58,15],16],[[59,15],16],[[63,15],16],[[64,15],16],[[65,15],16],[50,54],[-1,-1,[]],[41,54],[-1,-1,[]],[51,55],[41,55],[52,56],[41,56],[-1,-1,[]],[-1,-1,[]],[53,57],[41,57],[42,58],[66,58],[43,58],[44,58],[45,58],[-1,-1,[]],[48,59],[-1,-1,[]],[47,59],[46,59],[49,59],[34,59],[34,63],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,[[67,[],[[60,[-1]]]]],[]],[34,54],[34,55],[34,56],[34,57],[34,58],[34,59],[34,63],[[54,-1],18,20],[[55,-1],18,20],[[56,-1],18,20],[[57,-1],18,20],[[58,-1],18,20],[[59,-1],18,20],[[63,-1],18,20],[[64,-1],18,20],[[65,-1],18,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[],[[60,[-1]]]]],-1,[]],[54,-1,[]],[55,-1,[]],[56,-1,[]],[57,-1,[]],[58,-1,[]],[59,-1,[]],[63,-1,[]],[41,54],[41,55],[41,56],[41,57],[66,58],[34,59],[34,63],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[[54,54],[[1,[5]]]],[[55,55],[[1,[5]]]],[[56,56],[[1,[5]]]],[[57,57],[[1,[5]]]],[[58,58],[[1,[5]]]],[[59,59],[[1,[5]]]],[[63,63],[[1,[5]]]],[[64,64],[[1,[5]]]],[[65,65],[[1,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[69,[],[[68,[-1]]]]],-1,[]],[54,-1,[]],[55,-1,[]],[56,-1,[]],[57,-1,[]],[58,-1,[]],[59,-1,[]],[63,-1,[]],[[[69,[],[[68,[-1]]]]],-1,[]],[54,-1,[]],[55,-1,[]],[56,-1,[]],[57,-1,[]],[58,-1,[]],[59,-1,[]],[63,-1,[]],[[[69,[],[[68,[-1]]]]],-1,[]],[54,-1,[]],[55,-1,[]],[56,-1,[]],[57,-1,[]],[58,-1,[]],[59,-1,[]],[63,-1,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[71,[],[[70,[-1]]]]],-1,[[72,[],[[24,[27]]]]]],0,0,0,[[26,30],27],[[26,31],33],[[26,32],33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[1,[27]]]],[26,26],[-1,-2,[],[]],[-1,-2,[],[]],[26,27],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[73,73],[26,26],[[26,26],5],[26,[[74,[33]]]],[[26,27],13],[[],26],[[],73],[[73,73],13],[[26,26],13],[[73,15],16],[[26,15],16],[-1,-1,[]],[-1,-1,[]],[[73,-1],18,20],[[26,-1],18,20],[[26,26],26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,13],[[27,28],26],[73,[[1,[-1]]],[]],[[26,33],26],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[-1,[[18,[-2,13]]],[],[]],[[26,26],[[1,[5]]]],[26,-1,[]],[[26,28,30],26],[[26,34,32],26],[[26,34,31],26],[26,[[74,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[27,28],26],[[27,27],26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],26]],"c":[],"p":[[6,"Option",1402],[5,"Pixel",0],[10,"PixelColor",265],[10,"Clone",1403],[6,"Ordering",1404],[10,"Ord",1404],[10,"Default",1405],[17,"Color"],[17,"Output"],[10,"Drawable",0],[6,"Result",1406],[10,"DrawTarget",38],[1,"bool"],[10,"PartialEq",1404],[5,"Formatter",1407],[8,"Result",1407],[10,"Debug",1407],[1,"tuple"],[10,"Hash",1408],[10,"Hasher",1408],[10,"PartialOrd",1404],[5,"TypeId",1409],[17,"Error"],[17,"Item"],[10,"IntoIterator",1410],[5,"Rectangle",1326],[5,"Point",45],[5,"Size",45],[10,"Dimensions",45],[6,"AnchorPoint",45],[6,"AnchorX",45],[6,"AnchorY",45],[1,"i32"],[1,"u32"],[1,"array"],[1,"usize"],[10,"OriginDimensions",45],[10,"ImageDrawable",258],[10,"GetPixel",258],[10,"RgbColor",265],[1,"u8"],[5,"Rgb555",265],[5,"Bgr555",265],[5,"Rgb565",265],[5,"Bgr565",265],[5,"Rgb666",265],[5,"Bgr666",265],[5,"Rgb888",265],[5,"Bgr888",265],[6,"BinaryColor",265],[5,"Gray2",265],[5,"Gray4",265],[5,"Gray8",265],[5,"RawU1",992],[5,"RawU2",992],[5,"RawU4",992],[5,"RawU8",992],[5,"RawU16",992],[5,"RawU24",992],[17,"Storage"],[10,"IntoStorage",265],[10,"GrayColor",265],[5,"RawU32",992],[6,"LittleEndian",992],[6,"BigEndian",992],[1,"u16"],[10,"RawData",992],[17,"Bytes"],[10,"ToBytes",992],[17,"Iter"],[10,"PointsIter",1321],[10,"Iterator",1411],[5,"Points",1326],[5,"Range",1412],[10,"WebColors",265]],"b":[[68,"impl-Add-for-Point"],[69,"impl-Add%3CSize%3E-for-Point"],[71,"impl-AddAssign%3CSize%3E-for-Point"],[72,"impl-AddAssign-for-Point"],[134,"impl-Display-for-Point"],[135,"impl-Debug-for-Point"],[136,"impl-Display-for-Size"],[137,"impl-Debug-for-Size"],[142,"impl-From%3C%5Bi32;+2%5D%3E-for-Point"],[143,"impl-From%3C(i32,+i32)%3E-for-Point"],[144,"impl-From%3C%26%5Bi32;+2%5D%3E-for-Point"],[145,"impl-From%3C%26%5Bu32;+2%5D%3E-for-Size"],[147,"impl-From%3C(u32,+u32)%3E-for-Size"],[148,"impl-From%3C%5Bu32;+2%5D%3E-for-Size"],[203,"impl-Sub-for-Point"],[204,"impl-Sub%3CSize%3E-for-Point"],[206,"impl-SubAssign-for-Point"],[207,"impl-SubAssign%3CSize%3E-for-Point"],[209,"impl-TryFrom%3C(u32,+u32)%3E-for-Point"],[210,"impl-TryFrom%3C%26%5Bu32;+2%5D%3E-for-Point"],[212,"impl-TryFrom%3C%5Bu32;+2%5D%3E-for-Point"],[581,"impl-From%3CRgb888%3E-for-BinaryColor"],[582,"impl-From%3CBgr666%3E-for-BinaryColor"],[583,"impl-From%3CBgr888%3E-for-BinaryColor"],[584,"impl-From%3CBgr565%3E-for-BinaryColor"],[585,"impl-From%3CGray4%3E-for-BinaryColor"],[586,"impl-From%3CGray8%3E-for-BinaryColor"],[587,"impl-From%3CRgb666%3E-for-BinaryColor"],[588,"impl-From%3Cbool%3E-for-BinaryColor"],[589,"impl-From%3CRgb565%3E-for-BinaryColor"],[590,"impl-From%3CBgr555%3E-for-BinaryColor"],[591,"impl-From%3CGray2%3E-for-BinaryColor"],[593,"impl-From%3CRgb555%3E-for-BinaryColor"],[594,"impl-From%3CRawU1%3E-for-BinaryColor"],[595,"impl-From%3CBgr888%3E-for-Gray2"],[596,"impl-From%3CGray8%3E-for-Gray2"],[597,"impl-From%3CBgr666%3E-for-Gray2"],[598,"impl-From%3CRgb888%3E-for-Gray2"],[599,"impl-From%3CBgr555%3E-for-Gray2"],[600,"impl-From%3CRgb555%3E-for-Gray2"],[601,"impl-From%3CRawU2%3E-for-Gray2"],[602,"impl-From%3CBinaryColor%3E-for-Gray2"],[604,"impl-From%3CRgb565%3E-for-Gray2"],[605,"impl-From%3CGray4%3E-for-Gray2"],[606,"impl-From%3CRgb666%3E-for-Gray2"],[607,"impl-From%3CBgr565%3E-for-Gray2"],[608,"impl-From%3CRgb888%3E-for-Gray4"],[609,"impl-From%3CGray8%3E-for-Gray4"],[610,"impl-From%3CBgr565%3E-for-Gray4"],[611,"impl-From%3CRawU4%3E-for-Gray4"],[612,"impl-From%3CGray2%3E-for-Gray4"],[613,"impl-From%3CBgr555%3E-for-Gray4"],[614,"impl-From%3CRgb666%3E-for-Gray4"],[615,"impl-From%3CRgb555%3E-for-Gray4"],[616,"impl-From%3CBinaryColor%3E-for-Gray4"],[617,"impl-From%3CBgr666%3E-for-Gray4"],[619,"impl-From%3CBgr888%3E-for-Gray4"],[620,"impl-From%3CRgb565%3E-for-Gray4"],[621,"impl-From%3CRgb888%3E-for-Gray8"],[622,"impl-From%3CGray2%3E-for-Gray8"],[623,"impl-From%3CBgr555%3E-for-Gray8"],[624,"impl-From%3CRgb555%3E-for-Gray8"],[625,"impl-From%3CGray4%3E-for-Gray8"],[626,"impl-From%3CBgr565%3E-for-Gray8"],[627,"impl-From%3CRgb565%3E-for-Gray8"],[628,"impl-From%3CBinaryColor%3E-for-Gray8"],[629,"impl-From%3CBgr888%3E-for-Gray8"],[630,"impl-From%3CBgr666%3E-for-Gray8"],[631,"impl-From%3CRawU8%3E-for-Gray8"],[633,"impl-From%3CRgb666%3E-for-Gray8"],[634,"impl-From%3CGray2%3E-for-Rgb555"],[635,"impl-From%3CRgb666%3E-for-Rgb555"],[636,"impl-From%3CRgb565%3E-for-Rgb555"],[637,"impl-From%3CGray4%3E-for-Rgb555"],[638,"impl-From%3CRawU16%3E-for-Rgb555"],[639,"impl-From%3CBgr888%3E-for-Rgb555"],[641,"impl-From%3CGray8%3E-for-Rgb555"],[642,"impl-From%3CBgr666%3E-for-Rgb555"],[643,"impl-From%3CRgb888%3E-for-Rgb555"],[644,"impl-From%3CBgr555%3E-for-Rgb555"],[645,"impl-From%3CBinaryColor%3E-for-Rgb555"],[646,"impl-From%3CBgr565%3E-for-Rgb555"],[647,"impl-From%3CGray2%3E-for-Bgr555"],[649,"impl-From%3CBgr666%3E-for-Bgr555"],[650,"impl-From%3CBinaryColor%3E-for-Bgr555"],[651,"impl-From%3CRgb888%3E-for-Bgr555"],[652,"impl-From%3CBgr888%3E-for-Bgr555"],[653,"impl-From%3CBgr565%3E-for-Bgr555"],[654,"impl-From%3CRawU16%3E-for-Bgr555"],[655,"impl-From%3CGray8%3E-for-Bgr555"],[656,"impl-From%3CRgb666%3E-for-Bgr555"],[657,"impl-From%3CRgb555%3E-for-Bgr555"],[658,"impl-From%3CGray4%3E-for-Bgr555"],[659,"impl-From%3CRgb565%3E-for-Bgr555"],[661,"impl-From%3CRawU16%3E-for-Rgb565"],[662,"impl-From%3CBgr555%3E-for-Rgb565"],[663,"impl-From%3CBgr888%3E-for-Rgb565"],[664,"impl-From%3CGray8%3E-for-Rgb565"],[665,"impl-From%3CRgb888%3E-for-Rgb565"],[666,"impl-From%3CBinaryColor%3E-for-Rgb565"],[667,"impl-From%3CGray4%3E-for-Rgb565"],[668,"impl-From%3CGray2%3E-for-Rgb565"],[669,"impl-From%3CBgr666%3E-for-Rgb565"],[670,"impl-From%3CRgb666%3E-for-Rgb565"],[671,"impl-From%3CRgb555%3E-for-Rgb565"],[672,"impl-From%3CBgr565%3E-for-Rgb565"],[674,"impl-From%3CRgb565%3E-for-Bgr565"],[675,"impl-From%3CGray2%3E-for-Bgr565"],[676,"impl-From%3CRgb555%3E-for-Bgr565"],[677,"impl-From%3CBgr666%3E-for-Bgr565"],[678,"impl-From%3CGray4%3E-for-Bgr565"],[679,"impl-From%3CRgb666%3E-for-Bgr565"],[680,"impl-From%3CBinaryColor%3E-for-Bgr565"],[681,"impl-From%3CBgr555%3E-for-Bgr565"],[682,"impl-From%3CRawU16%3E-for-Bgr565"],[683,"impl-From%3CBgr888%3E-for-Bgr565"],[684,"impl-From%3CGray8%3E-for-Bgr565"],[685,"impl-From%3CRgb888%3E-for-Bgr565"],[686,"impl-From%3CBgr888%3E-for-Rgb666"],[687,"impl-From%3CGray4%3E-for-Rgb666"],[689,"impl-From%3CGray8%3E-for-Rgb666"],[690,"impl-From%3CRgb565%3E-for-Rgb666"],[691,"impl-From%3CRawU24%3E-for-Rgb666"],[692,"impl-From%3CGray2%3E-for-Rgb666"],[693,"impl-From%3CBgr666%3E-for-Rgb666"],[694,"impl-From%3CBinaryColor%3E-for-Rgb666"],[695,"impl-From%3CBgr565%3E-for-Rgb666"],[696,"impl-From%3CBgr555%3E-for-Rgb666"],[697,"impl-From%3CRgb555%3E-for-Rgb666"],[698,"impl-From%3CRgb888%3E-for-Rgb666"],[699,"impl-From%3CBinaryColor%3E-for-Bgr666"],[700,"impl-From%3CBgr565%3E-for-Bgr666"],[701,"impl-From%3CGray2%3E-for-Bgr666"],[703,"impl-From%3CBgr555%3E-for-Bgr666"],[704,"impl-From%3CBgr888%3E-for-Bgr666"],[705,"impl-From%3CRgb888%3E-for-Bgr666"],[706,"impl-From%3CRgb555%3E-for-Bgr666"],[707,"impl-From%3CRawU24%3E-for-Bgr666"],[708,"impl-From%3CRgb666%3E-for-Bgr666"],[709,"impl-From%3CRgb565%3E-for-Bgr666"],[710,"impl-From%3CGray8%3E-for-Bgr666"],[711,"impl-From%3CGray4%3E-for-Bgr666"],[712,"impl-From%3CBgr565%3E-for-Rgb888"],[713,"impl-From%3CGray2%3E-for-Rgb888"],[714,"impl-From%3CBgr888%3E-for-Rgb888"],[716,"impl-From%3CBgr555%3E-for-Rgb888"],[717,"impl-From%3CRawU24%3E-for-Rgb888"],[718,"impl-From%3CRgb565%3E-for-Rgb888"],[719,"impl-From%3CGray4%3E-for-Rgb888"],[720,"impl-From%3CRgb555%3E-for-Rgb888"],[721,"impl-From%3CBgr666%3E-for-Rgb888"],[722,"impl-From%3CRgb666%3E-for-Rgb888"],[723,"impl-From%3CBinaryColor%3E-for-Rgb888"],[724,"impl-From%3CGray8%3E-for-Rgb888"],[725,"impl-From%3CGray8%3E-for-Bgr888"],[726,"impl-From%3CGray2%3E-for-Bgr888"],[727,"impl-From%3CRawU24%3E-for-Bgr888"],[728,"impl-From%3CBgr555%3E-for-Bgr888"],[729,"impl-From%3CRgb555%3E-for-Bgr888"],[730,"impl-From%3CBgr565%3E-for-Bgr888"],[731,"impl-From%3CGray4%3E-for-Bgr888"],[732,"impl-From%3CRgb666%3E-for-Bgr888"],[734,"impl-From%3CBinaryColor%3E-for-Bgr888"],[735,"impl-From%3CRgb565%3E-for-Bgr888"],[736,"impl-From%3CBgr666%3E-for-Bgr888"],[737,"impl-From%3CRgb888%3E-for-Bgr888"],[1104,"impl-From%3CBinaryColor%3E-for-RawU1"],[1106,"impl-From%3Cu8%3E-for-RawU1"],[1108,"impl-From%3CGray2%3E-for-RawU2"],[1109,"impl-From%3Cu8%3E-for-RawU2"],[1110,"impl-From%3CGray4%3E-for-RawU4"],[1111,"impl-From%3Cu8%3E-for-RawU4"],[1114,"impl-From%3CGray8%3E-for-RawU8"],[1115,"impl-From%3Cu8%3E-for-RawU8"],[1116,"impl-From%3CRgb555%3E-for-RawU16"],[1117,"impl-From%3Cu16%3E-for-RawU16"],[1118,"impl-From%3CBgr555%3E-for-RawU16"],[1119,"impl-From%3CRgb565%3E-for-RawU16"],[1120,"impl-From%3CBgr565%3E-for-RawU16"],[1122,"impl-From%3CRgb888%3E-for-RawU24"],[1124,"impl-From%3CBgr666%3E-for-RawU24"],[1125,"impl-From%3CRgb666%3E-for-RawU24"],[1126,"impl-From%3CBgr888%3E-for-RawU24"],[1127,"impl-From%3Cu32%3E-for-RawU24"]]}],\
["emerald_kernel_user_link",{"doc":"","t":"SSSQCCCCCCQCQQFGPPNNNNNNNNNNNNOONNNNNNNPGPPFFPPPGFGPPSPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNOPFFPGPPNNNNNNONNNOONNNNNNNNONNNOONONNOOONNNNNNNNNNOPPPTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPSFGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNOCOONNNNNNNNSSSSSSSSTPPSFPGPPNNNNNCONNNNNNNNNONNNNNNOOSSSSSFFNNNNNNNOOONNNNNOONNOHOOOONNNNNNPPPPPPPPPPKPPPPPPPPPPPPPPPSPPPPSSSSSSSSSSSSSSSSSSSSSSGGPINNNNNNNNNNNNMNNHHHHNNNNNN","n":["FD_STDERR","FD_STDIN","FD_STDOUT","call_syscall","clock","file","graphics","keyboard","mouse","process","sys_arg","syscalls","to_arg_err","verify_args","ClockTime","ClockType","RealTime","SystemTime","borrow","borrow","borrow_mut","borrow_mut","clone","clone","fmt","fmt","from","from","into","into","nanoseconds","seconds","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Block","BlockingMode","BlockingMode","Current","DirEntry","DirFilename","Directory","End","File","FileMeta","FileStat","FileType","IsTerminal","Line","MAX_FILENAME_LEN","None","SeekFrom","SeekWhence","Start","as_cstr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","file_type","filename_cstr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_flags","hash","hash","hash","hash","hash","hash","hash","hash","inner_u64","into","into","into","into","into","into","into","into","name","new","offset","parse_flags","size","stat","to_u64","to_u64_meta_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","whence","Blit","BlitCommand","FrameBufferInfo","GetFrameBufferInfo","GraphicsCommand","ReleaseOwnership","TakeOwnership","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_per_pixel","clone","clone","clone","dst","field_pos","fmt","fmt","fmt","from","from","from","from_u64","get_arr_pos","height","into","into","into","mask","memory","memory_size","pitch","pixel_mem","pixel_mem_mut","size","src","src_framebuffer_info","to_u64","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","A","Application","B","BYTES_SIZE","Backslash","Backspace","Backtick","C","Calculator","CapsLock","Comma","D","Delete","Dot","DownArrow","E","Email","End","Enter","Equals","Escape","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","G","H","Home","I","Insert","J","K","KEYBOARD_PATH","Key","KeyType","Keypad0","Keypad1","Keypad2","Keypad3","Keypad4","Keypad5","Keypad6","Keypad7","Keypad8","Keypad9","KeypadAsterisk","KeypadDot","KeypadEnter","KeypadMinus","KeypadPlus","KeypadSlash","L","LeftAlt","LeftArrow","LeftBracket","LeftCtrl","LeftGUI","LeftShift","M","Minus","MultimediaMute","MultimediaNextTrack","MultimediaPlayPause","MultimediaPreviousTrack","MultimediaSelect","MultimediaStop","MyComputer","N","Num0","Num1","Num2","Num3","Num4","Num5","Num6","Num7","Num8","Num9","NumLock","O","P","PageDown","PageUp","Power","Q","R","RightAlt","RightArrow","RightBracket","RightCtrl","RightGUI","RightShift","S","ScrollLock","Semicolon","SingleQuote","Slash","Sleep","Space","T","Tab","U","UpArrow","V","VolumeDown","VolumeUp","W","WWWBack","WWWFavorites","WWWForward","WWWHome","WWWRefresh","WWWSearch","WWWStop","Wake","X","Y","Z","_None1","_None2","_None3","_None4","as_bytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","fmt","fmt","from","from","from_bytes","into","into","key_type","modifier","modifiers","pressed","try_from","try_from","try_into","try_into","type_id","type_id","virtual_char","virtual_key","ALT","CAPS_LOCK","CTRL","EXTENDED","NUM_LOCK","PRESSED","SCROLL_LOCK","SHIFT","BYTES_SIZE","HorizontalNegative","HorizontalRight","MOUSE_PATH","MouseEvent","None","ScrollType","VerticalDown","VerticalUp","as_bytes","borrow","borrow","borrow_mut","borrow_mut","buttons","buttons","clone","clone","fmt","fmt","from","from","from_bytes","into","into","scroll_type","try_from","try_from","try_into","try_into","type_id","type_id","x","y","FIFTH","FOURTH","LEFT","MIDDLE","RIGHT","ProcessMetadata","SpawnFileMapping","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","dst_fd","eh_frame_address","eh_frame_size","empty","fmt","fmt","from","from","image_base","image_size","into","into","pid","process_metadata","program_headers_offset","src_fd","text_address","text_size","try_from","try_from","try_into","try_into","type_id","type_id","BufferTooSmall","CouldNotAllocateProcess","CouldNotLoadElf","CouldNotOpenFile","CouldNotReadFromFile","CouldNotWriteToFile","DuplicateFileMappings","EndOfFile","Err","FileNotFound","FromSyscallArgU64","GeneralInvalid","GraphicsAlreadyTaken","GraphicsNotAvailable","GraphicsNotOwned","HeapRangesExceeded","InvalidArgument","InvalidError","InvalidFileIndex","InvalidGraphicsBuffer","InvalidHeapIncrement","InvalidNanoseconds","InvalidOffset","InvalidUserPointer","IsDirectory","IsNotDirectory","NUM_SYSCALLS","NotValidUtf8","Ok","PidNotFound","ProcessStillRunning","SYSCALL_INTERRUPT_NUMBER","SYS_BLOCKING_MODE","SYS_CHDIR","SYS_CLOSE","SYS_CREATE_PIPE","SYS_EXIT","SYS_GET_CWD","SYS_GET_FILE_META","SYS_GET_TIME","SYS_GRAPHICS","SYS_INC_HEAP","SYS_OPEN","SYS_OPEN_DIR","SYS_READ","SYS_READ_DIR","SYS_SEEK","SYS_SET_FILE_META","SYS_SLEEP","SYS_SPAWN","SYS_STAT","SYS_WAIT_PID","SYS_WRITE","SyscallArgError","SyscallError","SyscallNotFound","SyscallResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","fmt","fmt","from","from","from","from_syscall_arg_u64","into","into","syscall_arg_to_u64","syscall_handler_wrapper","syscall_result_from_u64","syscall_result_to_u64","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"emerald_kernel_user_link"],[14,"emerald_kernel_user_link::clock"],[39,"emerald_kernel_user_link::file"],[168,"emerald_kernel_user_link::graphics"],[219,"emerald_kernel_user_link::keyboard"],[377,"emerald_kernel_user_link::keyboard::modifier"],[385,"emerald_kernel_user_link::mouse"],[419,"emerald_kernel_user_link::mouse::buttons"],[424,"emerald_kernel_user_link::process"],[457,"emerald_kernel_user_link::syscalls"],[539,"core::fmt"],[540,"core::fmt"],[541,"core::any"],[542,"core::ffi::c_str"],[543,"core::hash"],[544,"core::option"],[545,"core::ops::function"]],"d":["","","","Creates a syscall, the first argument is the syscall …","","","","","","","Get the syscall arguments from the interrupt state, the …","","","","","","Real time clock, this follows the unix time","Monotonic system time, this is based on the system time …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","A blocking flag when dealing with files When using …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Will extract all the information from the flags, will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blit a region from userspace memory into the graphics …","","","Get information about the framebuffer &amp;mut FrameBufferInfo","","Release ownership of the graphics device No arguments","Take ownership of the graphics device No arguments","","","","","","","","","","","The position in the destination framebuffer to start …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the position in the memory buffer for a given pixel …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The memory buffer to blit from, this represent the whole …","The size of the memory buffer required to hold the …","","Get the pixel slice at a given position (read-only)","Get the pixel slice at a given position","The size of the region to blit (width, height)","The position in the source framebuffer to start blitting …","The framebuffer info of the source memory i.e. metadata …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Safety","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Safety","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Contains the error value","","","","","","","","","","","","","","","","","","","","Contains the success value","","","must be one of user interrupts, i.e. 0x20+","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,2,1,2,1,2,10,0,14,15,0,0,11,15,11,0,0,0,14,10,0,10,0,0,15,8,10,11,12,8,13,14,15,16,10,11,12,8,13,14,15,16,10,11,12,8,13,14,15,16,11,12,8,13,10,11,12,8,13,14,15,16,12,13,10,11,12,8,13,14,15,16,10,11,12,8,8,13,14,15,16,10,10,11,12,8,13,14,15,16,14,10,11,12,8,13,14,15,16,13,16,16,0,12,13,10,14,10,10,11,12,8,13,14,14,15,15,16,10,11,12,8,13,14,15,16,10,11,12,8,13,14,15,16,16,23,0,0,23,0,23,23,23,24,25,23,24,25,24,23,24,25,25,24,23,24,25,23,24,25,23,24,24,23,24,25,24,25,24,24,24,24,25,25,25,23,23,24,25,23,24,25,23,24,25,24,31,31,31,29,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,29,31,29,31,29,31,29,31,31,29,31,29,29,31,29,29,0,29,29,31,29,31,29,31,29,29,31,0,0,0,0,0,0,0,0,32,33,33,0,0,33,0,33,33,32,33,32,33,32,0,32,33,32,33,32,33,32,32,33,32,32,33,32,33,32,33,32,32,32,0,0,0,0,0,0,0,34,35,34,35,34,35,35,34,35,35,35,34,35,34,35,35,35,34,35,35,0,35,34,35,35,34,35,34,35,34,35,37,37,37,37,37,37,36,37,38,37,0,36,37,37,37,37,37,37,37,37,36,36,37,36,37,37,0,36,38,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,36,37,36,37,36,37,36,36,37,38,36,37,39,36,37,0,0,0,0,36,37,36,37,36,37],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[1,3],4],[[2,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[6,[[5,[2,-1]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[11,11],[12,12],[8,8],[13,13],[14,14],[15,15],[16,16],[[],11],[[],12],[[],8],[[],13],[[10,10],17],[[11,11],17],[[12,12],17],[[8,8],17],[[13,13],17],[[14,14],17],[[15,15],17],[[16,16],17],0,[13,9],[[10,3],4],[[11,3],4],[[12,3],4],[[8,3],4],[[13,3],4],[[14,3],4],[[15,3],4],[[16,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[18,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,10],[[10,-1],19,20],[[11,-1],19,20],[[12,-1],19,20],[[8,-1],19,20],[[13,-1],19,20],[[14,-1],19,20],[[15,-1],19,20],[[16,-1],19,20],[14,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[21,15],16],0,[6,[[22,[10]]]],0,0,[10,6],[14,6],[6,[[5,[10,-1]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[19,[6,6]]],[[5,[14,-1]]],[]],[-1,[[5,[-2]]],[],[]],[6,[[5,[15,-1]]],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[23,23],[24,24],[25,25],0,0,[[23,3],4],[[24,3],4],[[25,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,[[22,[23]]]],[[24,[19,[26,26]]],[[22,[26]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[24,26],0,[[24,[28,[27]],[19,[26,26]]],[[22,[[28,[27]]]]]],[[24,[28,[27]],[19,[26,26]]],[[22,[[28,[27]]]]]],0,0,0,[23,6],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[29,[[30,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[29,29],[[31,31],17],[[31,3],4],[[29,3],4],[-1,-1,[]],[-1,-1,[]],[[[30,[27]]],29],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[29,[[22,[27]]]],[[31,17],[[22,[27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[32,[[30,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[33,33],[32,32],[[33,3],4],[[32,3],4],[-1,-1,[]],[-1,-1,[]],[[[30,[27]]],32],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[35,35],[[],35],0,0,0,[[],35],[[34,3],4],[[35,3],4],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],35],0,0,0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[37,37],[[36,36],17],[[36,3],4],[[37,3],4],[37,38],[-1,-1,[]],[-1,-1,[]],[6,[[5,[39,36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[6,[[5,[-1,36]]],39],[[6,-1],6,[[41,[],[[40,[38]]]]]],[6,38],[38,6],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[489],"p":[[5,"ClockTime",14],[6,"ClockType",14],[5,"Formatter",539],[8,"Result",539],[6,"Result",540],[1,"u64"],[5,"TypeId",541],[5,"DirFilename",39],[5,"CStr",542],[6,"BlockingMode",39],[6,"FileType",39],[5,"FileStat",39],[5,"DirEntry",39],[6,"FileMeta",39],[6,"SeekWhence",39],[5,"SeekFrom",39],[1,"bool"],[1,"str"],[1,"tuple"],[10,"Hasher",543],[1,"i64"],[6,"Option",544],[6,"GraphicsCommand",168],[5,"FrameBufferInfo",168],[5,"BlitCommand",168],[1,"usize"],[1,"u8"],[1,"slice"],[5,"Key",219],[1,"array"],[6,"KeyType",219],[5,"MouseEvent",385],[6,"ScrollType",385],[5,"SpawnFileMapping",424],[5,"ProcessMetadata",424],[6,"SyscallArgError",457],[6,"SyscallError",457],[8,"SyscallResult",457],[10,"FromSyscallArgU64",457],[17,"Output"],[10,"FnOnce",545]],"b":[]}],\
["float_cmp",{"doc":"float-cmp","t":"KKKFFRRRKMQNNMNNNNNNQNNNNNNNNNNOONNNNNNNNMMNNNNNNMNNOONN","n":["ApproxEq","ApproxEqRatio","ApproxEqUlps","F32Margin","F64Margin","Flt","Margin","U","Ulps","approx_eq","approx_eq","approx_eq_ratio","approx_eq_ratio","approx_eq_ulps","approx_ne","approx_ne","approx_ne_ratio","approx_ne_ratio","approx_ne_ulps","approx_ne_ulps","assert_approx_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","default","epsilon","epsilon","epsilon","epsilon","fmt","fmt","from","from","from","from","into","into","next","prev","try_from","try_from","try_into","try_into","type_id","type_id","ulps","ulps","ulps","ulps","ulps","zero","zero"],"q":[[0,"float_cmp"],[56,"core::marker"],[57,"core::default"],[58,"core::convert"],[59,"core::fmt"],[60,"core::fmt"],[61,"core::any"]],"d":["A trait for approximate equality comparisons.","ApproxEqRatio is a trait for approximate equality …","ApproxEqUlps is a trait for approximate equality …","This type defines a margin within two <code>f32</code> values might be …","This type defines a margin within two <code>f64</code> values might be …","","This type type defines a margin within which two values …","","","This method tests that the <code>self</code> and <code>other</code> values are equal …","","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests for <code>self</code> and <code>other</code> values to be …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests for <code>self</code> and <code>other</code> values to be not …","This method tests for <code>self</code> and <code>other</code> values to be not …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The next representable number above this one","The previous representable number below this one","","","","","","","The number of representable values or ULPs (Units of Least …","","","","","",""],"i":[0,0,0,0,0,9,2,10,0,2,0,7,7,9,2,2,7,7,9,9,0,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,11,12,12,11,12,10,10,11,12,11,12,11,12,10,11,12,11,12,11,12],"f":[0,0,0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]],[2,[],[[1,[-1]]]],-2],3,[4,5],[[6,[-1]]]],0,[[7,7,7],3],[[7,7,7],3],[[[9,[],[[8,[-1]]]],[9,[],[[8,[-1]]]]],3,10],[[[2,[],[[1,[-1]]]],[2,[],[[1,[-1]]]],-2],3,[4,5],[[6,[-1]]]],[[[2,[],[[1,[-1]]]],[2,[],[[1,[-1]]]],-2],3,[4,5],[[6,[-1]]]],[[7,7,7],3],[[7,7,7],3],[[[9,[],[[8,[-1]]]],[9,[],[[8,[-1]]]]],3,10],[[[9,[],[[8,[-1]]]],[9,[],[[8,[-1]]]]],3,10],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[12,12],[[],11],[[],12],[[11,13],11],[[12,14],12],0,0,[[11,15],16],[[12,15],16],[[[18,[13,17]]],11],[-1,-1,[]],[-1,-1,[]],[[[18,[14,19]]],12],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[],[[20,[-1]]]]],[[10,[],[[20,[-1]]]]],4],[[[10,[],[[20,[-1]]]]],[[10,[],[[20,[-1]]]]],4],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[[10,[],[[20,[-1]]]],[10,[],[[20,[-1]]]]],-1,4],[[11,17],11],[[12,19],12],0,0,[[],11],[[],12]],"c":[],"p":[[17,"Margin"],[10,"ApproxEq",0],[1,"bool"],[10,"Copy",56],[10,"Default",57],[10,"Into",58],[10,"ApproxEqRatio",0],[17,"Flt"],[10,"ApproxEqUlps",0],[10,"Ulps",0],[5,"F32Margin",0],[5,"F64Margin",0],[1,"f32"],[1,"f64"],[5,"Formatter",59],[8,"Result",59],[1,"i32"],[1,"tuple"],[1,"i64"],[17,"U"],[6,"Result",60],[5,"TypeId",61]],"b":[]}],\
["gimli",{"doc":"<code>gimli</code> is a library for reading and writing the DWARF …","t":"TTTTTTTTTTTTTTTTFPTTTTTTTTFPFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTPFPFFPFPPFPFPPFPFPPFFPFPFPPPPFFPFPFFPFPFPPPPGPFTTTTTTTTTTTPPFFKTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTFPFFFTTTTTTTTTTTTTTTTTTPITTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFFFFGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNCOOOONNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCHHHHPPPPPPPPPFFFFPPKPFPPPPPPPPFPPPPPPGFPGFPPGFPPPPPFFFFPFFFFFFFFPPPPPPPPGPPPPPPFFFFPRIFPPPGFGKPPFPPPRPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPRPPFGFFPPPPPPPPPPPPPPPPPPPPPPRRPPPPPPGFPPFFPPFPPPGPPFFGFGFKKFPPPPPPGFPPPPPPPPPPPPPPPIRFPRPPKFPPPPPPRRPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPFFFFPPPPPPPPPPPPPPPPPPPPPPPPFKKKFFPPPPPGPGPPPPPNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONMNNNONMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMNMNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNMNNNNNONNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOMNNNMNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNOOMNNNNNMNNNNNONNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO","n":["A0","A0","A1","A1","A2","A2","A3","A3","A4","A4","A5","A5","A6","A6","A7","A7","AArch64","AArch64","ACC0","ACC1","ACC2","ACC3","ACC4","ACC5","ACC6","ACC7","Arm","Big","BigEndian","CS","CS","D0","D1","D10","D11","D12","D13","D14","D15","D16","D17","D18","D19","D2","D20","D21","D22","D23","D24","D25","D26","D27","D28","D29","D3","D30","D31","D4","D5","D6","D7","D8","D9","DS","DS","DebugAbbrev","DebugAbbrevOffset","DebugAddr","DebugAddrBase","DebugAddrIndex","DebugAranges","DebugArangesOffset","DebugCuIndex","DebugFrame","DebugFrameOffset","DebugInfo","DebugInfoOffset","DebugInfoOffset","DebugLine","DebugLineOffset","DebugLineStr","DebugLineStrOffset","DebugLoc","DebugLocLists","DebugLocListsBase","DebugLocListsIndex","DebugMacinfo","DebugMacinfoOffset","DebugMacro","DebugMacroOffset","DebugPubNames","DebugPubTypes","DebugRanges","DebugRngLists","DebugRngListsBase","DebugRngListsIndex","DebugStr","DebugStrOffset","DebugStrOffsets","DebugStrOffsetsBase","DebugStrOffsetsIndex","DebugTuIndex","DebugTypeSignature","DebugTypes","DebugTypesOffset","DebugTypesOffset","Default","Dwarf32","Dwarf64","DwarfFileType","Dwo","DwoId","EAX","EBP","EBX","ECX","EDI","EDX","ELR_MODE","ES","ES","ESI","ESP","EhFrame","EhFrameHdr","EhFrameOffset","Encoding","Endianity","F0","F0","F1","F1","F10","F10","F11","F11","F12","F12","F13","F13","F14","F14","F15","F15","F16","F16","F17","F17","F18","F18","F19","F19","F2","F2","F20","F20","F21","F21","F22","F22","F23","F23","F24","F24","F25","F25","F26","F26","F27","F27","F28","F28","F29","F29","F3","F3","F30","F30","F31","F31","F4","F4","F5","F5","F6","F6","F7","F7","F8","F8","F9","F9","FA0","FA0","FA1","FA1","FA2","FA2","FA3","FA3","FA4","FA4","FA5","FA5","FA6","FA6","FA7","FA7","FCC0","FCC1","FCC2","FCC3","FCC4","FCC5","FCC6","FCC7","FCW","FFR","FP","FS","FS","FS0","FS0","FS1","FS1","FS10","FS11","FS2","FS2","FS3","FS3","FS4","FS4","FS5","FS5","FS6","FS6","FS7","FS7","FS8","FS9","FSW","FS_BASE","FS_BASE","FT0","FT0","FT1","FT1","FT10","FT10","FT11","FT11","FT12","FT13","FT14","FT15","FT2","FT2","FT3","FT3","FT4","FT4","FT5","FT5","FT6","FT6","FT7","FT7","FT8","FT8","FT9","FT9","Format","GP","GS","GS","GS_BASE","GS_BASE","HTPIDPR","K0","K1","K2","K3","K4","K5","K6","K7","LDTR","LDTR","LR","LineEncoding","Little","LittleEndian","LocationListsOffset","LoongArch","MM0","MM0","MM1","MM1","MM2","MM2","MM3","MM3","MM4","MM4","MM5","MM5","MM6","MM6","MM7","MM7","MXCSR","MXCSR","Main","NativeEndian","P0","P1","P10","P11","P12","P13","P14","P15","P2","P3","P4","P5","P6","P7","P8","P9","PC","PC","R0","R0","R1","R1","R10","R10","R10","R10_FIQ","R10_USR","R11","R11","R11","R11_FIQ","R11_USR","R12","R12","R12","R12_FIQ","R12_USR","R13","R13","R13","R13_ABT","R13_FIQ","R13_IRQ","R13_SVC","R13_UND","R13_USR","R14","R14","R14","R14_ABT","R14_FIQ","R14_IRQ","R14_SVC","R14_UND","R14_USR","R15","R15","R15","R16","R17","R18","R19","R2","R2","R20","R21","R22","R23","R24","R25","R26","R27","R28","R29","R3","R3","R30","R31","R4","R4","R5","R5","R6","R6","R7","R7","R8","R8","R8","R8_FIQ","R8_USR","R9","R9","R9","R9_FIQ","R9_USR","RA","RA","RA","RA","RAX","RA_AUTH_CODE","RA_SIGN_STATE","RBP","RBX","RCX","RDI","RDX","RFLAGS","RSI","RSP","RangeListsOffset","RawRangeListsOffset","Register","RiscV","RunTimeEndian","S0","S0","S0","S1","S1","S1","S10","S10","S11","S11","S12","S13","S14","S15","S16","S17","S18","S19","S2","S2","S2","S20","S21","S22","S23","S24","S25","S26","S27","S28","S29","S3","S3","S3","S30","S31","S4","S4","S4","S5","S5","S5","S6","S6","S6","S7","S7","S7","S8","S8","S8","S9","S9","SP","SP","SP","SP","SPSR","SPSR_ABT","SPSR_FIQ","SPSR_IRQ","SPSR_SVC","SPSR_UND","SS","SS","ST0","ST0","ST1","ST1","ST2","ST2","ST3","ST3","ST4","ST4","ST5","ST5","ST6","ST6","ST7","ST7","SectionId","T0","T0","T1","T1","T2","T2","T3","T3","T4","T4","T5","T5","T6","T6","T7","T8","TP","TP","TPIDPR","TPIDRRO_EL0","TPIDRURO","TPIDRURW","TPIDR_EL0","TPIDR_EL1","TPIDR_EL2","TPIDR_EL3","TR","TR","UnitSectionOffset","V0","V1","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V2","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V3","V30","V31","V4","V5","V6","V7","V8","V9","VG","Vendor","WC0","WC1","WC2","WC3","WC4","WC5","WC6","WC7","WCGR0","WCGR1","WCGR2","WCGR3","WCGR4","WCGR5","WCGR6","WCGR7","WR0","WR1","WR10","WR11","WR12","WR13","WR14","WR15","WR2","WR3","WR4","WR5","WR6","WR7","WR8","WR9","X0","X0","X1","X1","X10","X10","X11","X11","X12","X12","X13","X13","X14","X14","X15","X15","X16","X16","X17","X17","X18","X18","X19","X19","X2","X2","X20","X20","X21","X21","X22","X22","X23","X23","X24","X24","X25","X25","X26","X26","X27","X27","X28","X28","X29","X29","X3","X3","X30","X30","X31","X4","X4","X5","X5","X6","X6","X7","X7","X8","X8","X86","X86_64","X9","X9","XMM0","XMM0","XMM1","XMM1","XMM10","XMM11","XMM12","XMM13","XMM14","XMM15","XMM16","XMM17","XMM18","XMM19","XMM2","XMM2","XMM20","XMM21","XMM22","XMM23","XMM24","XMM25","XMM26","XMM27","XMM28","XMM29","XMM3","XMM3","XMM30","XMM31","XMM4","XMM4","XMM5","XMM5","XMM6","XMM6","XMM7","XMM7","XMM8","XMM9","Z0","Z1","Z10","Z11","Z12","Z13","Z14","Z15","Z16","Z17","Z18","Z19","Z2","Z20","Z21","Z22","Z23","Z24","Z25","Z26","Z27","Z28","Z29","Z3","Z30","Z31","Z4","Z5","Z6","Z7","Z8","Z9","ZERO","ZERO","address_size","as_debug_info_offset","as_debug_types_offset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","constants","default","default","default","default","default","default_for_encoding_and_file","default_for_encoding_and_file","default_for_encoding_and_file","default_is_stmt","dwo_name","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","initial_length_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_big_endian","is_big_endian","is_big_endian","is_big_endian","is_little_endian","is_little_endian","leb128","line_base","line_range","maximum_operations_per_instruction","minimum_instruction_length","name","name_to_register","name_to_register","name_to_register","name_to_register","name_to_register","name_to_register","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read_f32","read_f32","read_f64","read_f64","read_i16","read_i16","read_i32","read_i32","read_i64","read_i64","read_u16","read_u16","read_u32","read_u32","read_u64","read_u64","read_uint","read_uint","register_name","register_name","register_name","register_name","register_name","register_name","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","word_size","write_u16","write_u16","write_u32","write_u32","write_u64","write_u64","xcoff_name","DW_ACCESS_private","DW_ACCESS_protected","DW_ACCESS_public","DW_ADDR_none","DW_ATE_ASCII","DW_ATE_UCS","DW_ATE_UTF","DW_ATE_address","DW_ATE_boolean","DW_ATE_complex_float","DW_ATE_decimal_float","DW_ATE_edited","DW_ATE_float","DW_ATE_hi_user","DW_ATE_imaginary_float","DW_ATE_lo_user","DW_ATE_numeric_string","DW_ATE_packed_decimal","DW_ATE_signed","DW_ATE_signed_char","DW_ATE_signed_fixed","DW_ATE_unsigned","DW_ATE_unsigned_char","DW_ATE_unsigned_fixed","DW_AT_ALTIUM_loclist","DW_AT_APPLE_block","DW_AT_APPLE_flags","DW_AT_APPLE_isa","DW_AT_APPLE_major_runtime_vers","DW_AT_APPLE_objc_complete_type","DW_AT_APPLE_omit_frame_ptr","DW_AT_APPLE_optimized","DW_AT_APPLE_property","DW_AT_APPLE_property_attribute","DW_AT_APPLE_property_getter","DW_AT_APPLE_property_name","DW_AT_APPLE_property_setter","DW_AT_APPLE_runtime_class","DW_AT_BORLAND_Delphi_ABI","DW_AT_BORLAND_Delphi_anonymous_method","DW_AT_BORLAND_Delphi_class","DW_AT_BORLAND_Delphi_constructor","DW_AT_BORLAND_Delphi_destructor","DW_AT_BORLAND_Delphi_frameptr","DW_AT_BORLAND_Delphi_interface","DW_AT_BORLAND_Delphi_metaclass","DW_AT_BORLAND_Delphi_record","DW_AT_BORLAND_Delphi_return","DW_AT_BORLAND_Delphi_unit","DW_AT_BORLAND_closure","DW_AT_BORLAND_property_default","DW_AT_BORLAND_property_implements","DW_AT_BORLAND_property_index","DW_AT_BORLAND_property_read","DW_AT_BORLAND_property_write","DW_AT_GNAT_descriptive_type","DW_AT_GNU_addr_base","DW_AT_GNU_all_call_sites","DW_AT_GNU_all_source_call_sites","DW_AT_GNU_all_tail_call_sites","DW_AT_GNU_bias","DW_AT_GNU_call_site_data_value","DW_AT_GNU_call_site_target","DW_AT_GNU_call_site_target_clobbered","DW_AT_GNU_call_site_value","DW_AT_GNU_deleted","DW_AT_GNU_denominator","DW_AT_GNU_discriminator","DW_AT_GNU_dwo_id","DW_AT_GNU_dwo_name","DW_AT_GNU_entry_view","DW_AT_GNU_exclusive_locks_required","DW_AT_GNU_guarded","DW_AT_GNU_guarded_by","DW_AT_GNU_locks_excluded","DW_AT_GNU_locviews","DW_AT_GNU_macros","DW_AT_GNU_numerator","DW_AT_GNU_odr_signature","DW_AT_GNU_pt_guarded","DW_AT_GNU_pt_guarded_by","DW_AT_GNU_pubnames","DW_AT_GNU_pubtypes","DW_AT_GNU_ranges_base","DW_AT_GNU_shared_locks_required","DW_AT_GNU_tail_call","DW_AT_GNU_template_name","DW_AT_GNU_vector","DW_AT_INTEL_other_endian","DW_AT_LLVM_config_macros","DW_AT_LLVM_include_path","DW_AT_LLVM_isysroot","DW_AT_MIPS_abstract_name","DW_AT_MIPS_allocatable_dopetype","DW_AT_MIPS_assumed_shape_dopetype","DW_AT_MIPS_assumed_size","DW_AT_MIPS_clone_origin","DW_AT_MIPS_epilog_begin","DW_AT_MIPS_fde","DW_AT_MIPS_has_inlines","DW_AT_MIPS_linkage_name","DW_AT_MIPS_loop_begin","DW_AT_MIPS_loop_unroll_factor","DW_AT_MIPS_ptr_dopetype","DW_AT_MIPS_software_pipeline_depth","DW_AT_MIPS_stride","DW_AT_MIPS_stride_byte","DW_AT_MIPS_stride_elem","DW_AT_MIPS_tail_loop_begin","DW_AT_PGI_lbase","DW_AT_PGI_lstride","DW_AT_PGI_soffset","DW_AT_SUN_alignment","DW_AT_SUN_amd64_parmdump","DW_AT_SUN_browser_file","DW_AT_SUN_c_vla","DW_AT_SUN_cf_kind","DW_AT_SUN_command_line","DW_AT_SUN_compile_options","DW_AT_SUN_count_guarantee","DW_AT_SUN_dtor_length","DW_AT_SUN_dtor_start","DW_AT_SUN_dtor_state_deltas","DW_AT_SUN_dtor_state_final","DW_AT_SUN_dtor_state_initial","DW_AT_SUN_f90_allocatable","DW_AT_SUN_f90_assumed_shape_array","DW_AT_SUN_f90_pointer","DW_AT_SUN_f90_use_only","DW_AT_SUN_fortran_based","DW_AT_SUN_fortran_main_alias","DW_AT_SUN_func_offset","DW_AT_SUN_func_offsets","DW_AT_SUN_hwcprof_signature","DW_AT_SUN_import_by_lname","DW_AT_SUN_import_by_name","DW_AT_SUN_is_omp_child_func","DW_AT_SUN_language","DW_AT_SUN_link_name","DW_AT_SUN_memop_signature","DW_AT_SUN_memop_type_ref","DW_AT_SUN_namelist_spec","DW_AT_SUN_obj_dir","DW_AT_SUN_obj_file","DW_AT_SUN_omp_child_func","DW_AT_SUN_omp_tpriv_addr","DW_AT_SUN_original_name","DW_AT_SUN_part_link_name","DW_AT_SUN_pass_by_ref","DW_AT_SUN_pass_with_const","DW_AT_SUN_profile_id","DW_AT_SUN_return_value_ptr","DW_AT_SUN_return_with_const","DW_AT_SUN_template","DW_AT_SUN_vbase","DW_AT_SUN_vtable","DW_AT_SUN_vtable_abi","DW_AT_SUN_vtable_index","DW_AT_abstract_origin","DW_AT_accessibility","DW_AT_addr_base","DW_AT_address_class","DW_AT_alignment","DW_AT_allocated","DW_AT_artificial","DW_AT_associated","DW_AT_base_types","DW_AT_binary_scale","DW_AT_bit_offset","DW_AT_bit_size","DW_AT_bit_stride","DW_AT_body_begin","DW_AT_body_end","DW_AT_byte_size","DW_AT_byte_stride","DW_AT_call_all_calls","DW_AT_call_all_source_calls","DW_AT_call_all_tail_calls","DW_AT_call_column","DW_AT_call_data_location","DW_AT_call_data_value","DW_AT_call_file","DW_AT_call_line","DW_AT_call_origin","DW_AT_call_parameter","DW_AT_call_pc","DW_AT_call_return_pc","DW_AT_call_tail_call","DW_AT_call_target","DW_AT_call_target_clobbered","DW_AT_call_value","DW_AT_calling_convention","DW_AT_common_reference","DW_AT_comp_dir","DW_AT_const_expr","DW_AT_const_value","DW_AT_containing_type","DW_AT_count","DW_AT_data_bit_offset","DW_AT_data_location","DW_AT_data_member_location","DW_AT_decimal_scale","DW_AT_decimal_sign","DW_AT_decl_column","DW_AT_decl_file","DW_AT_decl_line","DW_AT_declaration","DW_AT_default_value","DW_AT_defaulted","DW_AT_deleted","DW_AT_description","DW_AT_digit_count","DW_AT_discr","DW_AT_discr_list","DW_AT_discr_value","DW_AT_dwo_name","DW_AT_elemental","DW_AT_encoding","DW_AT_endianity","DW_AT_entry_pc","DW_AT_enum_class","DW_AT_explicit","DW_AT_export_symbols","DW_AT_extension","DW_AT_external","DW_AT_frame_base","DW_AT_friend","DW_AT_hi_user","DW_AT_high_pc","DW_AT_identifier_case","DW_AT_import","DW_AT_inline","DW_AT_is_optional","DW_AT_language","DW_AT_linkage_name","DW_AT_lo_user","DW_AT_location","DW_AT_loclists_base","DW_AT_low_pc","DW_AT_lower_bound","DW_AT_mac_info","DW_AT_macro_info","DW_AT_macros","DW_AT_main_subprogram","DW_AT_mutable","DW_AT_name","DW_AT_namelist_item","DW_AT_noreturn","DW_AT_null","DW_AT_object_pointer","DW_AT_ordering","DW_AT_picture_string","DW_AT_priority","DW_AT_producer","DW_AT_prototyped","DW_AT_pure","DW_AT_ranges","DW_AT_rank","DW_AT_recursive","DW_AT_reference","DW_AT_return_addr","DW_AT_rnglists_base","DW_AT_rvalue_reference","DW_AT_segment","DW_AT_sf_names","DW_AT_sibling","DW_AT_signature","DW_AT_small","DW_AT_specification","DW_AT_src_coords","DW_AT_src_info","DW_AT_start_scope","DW_AT_static_link","DW_AT_stmt_list","DW_AT_str_offsets_base","DW_AT_string_length","DW_AT_string_length_bit_size","DW_AT_string_length_byte_size","DW_AT_threads_scaled","DW_AT_trampoline","DW_AT_type","DW_AT_upc_threads_scaled","DW_AT_upper_bound","DW_AT_use_GNAT_descriptive_type","DW_AT_use_UTF8","DW_AT_use_location","DW_AT_variable_parameter","DW_AT_virtuality","DW_AT_visibility","DW_AT_vtable_elem_location","DW_CC_hi_user","DW_CC_lo_user","DW_CC_nocall","DW_CC_normal","DW_CC_pass_by_reference","DW_CC_pass_by_value","DW_CC_program","DW_CFA_AARCH64_negate_ra_state","DW_CFA_GNU_args_size","DW_CFA_GNU_negative_offset_extended","DW_CFA_GNU_window_save","DW_CFA_MIPS_advance_loc8","DW_CFA_advance_loc","DW_CFA_advance_loc1","DW_CFA_advance_loc2","DW_CFA_advance_loc4","DW_CFA_def_cfa","DW_CFA_def_cfa_expression","DW_CFA_def_cfa_offset","DW_CFA_def_cfa_offset_sf","DW_CFA_def_cfa_register","DW_CFA_def_cfa_sf","DW_CFA_expression","DW_CFA_hi_user","DW_CFA_lo_user","DW_CFA_nop","DW_CFA_offset","DW_CFA_offset_extended","DW_CFA_offset_extended_sf","DW_CFA_register","DW_CFA_remember_state","DW_CFA_restore","DW_CFA_restore_extended","DW_CFA_restore_state","DW_CFA_same_value","DW_CFA_set_loc","DW_CFA_undefined","DW_CFA_val_expression","DW_CFA_val_offset","DW_CFA_val_offset_sf","DW_CHILDREN_no","DW_CHILDREN_yes","DW_DEFAULTED_in_class","DW_DEFAULTED_no","DW_DEFAULTED_out_of_class","DW_DSC_label","DW_DSC_range","DW_DS_leading_overpunch","DW_DS_leading_separate","DW_DS_trailing_overpunch","DW_DS_trailing_separate","DW_DS_unsigned","DW_EH_PE_absptr","DW_EH_PE_aligned","DW_EH_PE_datarel","DW_EH_PE_funcrel","DW_EH_PE_indirect","DW_EH_PE_omit","DW_EH_PE_pcrel","DW_EH_PE_sdata2","DW_EH_PE_sdata4","DW_EH_PE_sdata8","DW_EH_PE_sleb128","DW_EH_PE_textrel","DW_EH_PE_udata2","DW_EH_PE_udata4","DW_EH_PE_udata8","DW_EH_PE_uleb128","DW_END_big","DW_END_default","DW_END_hi_user","DW_END_little","DW_END_lo_user","DW_FORM_GNU_addr_index","DW_FORM_GNU_ref_alt","DW_FORM_GNU_str_index","DW_FORM_GNU_strp_alt","DW_FORM_addr","DW_FORM_addrx","DW_FORM_addrx1","DW_FORM_addrx2","DW_FORM_addrx3","DW_FORM_addrx4","DW_FORM_block","DW_FORM_block1","DW_FORM_block2","DW_FORM_block4","DW_FORM_data1","DW_FORM_data16","DW_FORM_data2","DW_FORM_data4","DW_FORM_data8","DW_FORM_exprloc","DW_FORM_flag","DW_FORM_flag_present","DW_FORM_implicit_const","DW_FORM_indirect","DW_FORM_line_strp","DW_FORM_loclistx","DW_FORM_null","DW_FORM_ref1","DW_FORM_ref2","DW_FORM_ref4","DW_FORM_ref8","DW_FORM_ref_addr","DW_FORM_ref_sig8","DW_FORM_ref_sup4","DW_FORM_ref_sup8","DW_FORM_ref_udata","DW_FORM_rnglistx","DW_FORM_sdata","DW_FORM_sec_offset","DW_FORM_string","DW_FORM_strp","DW_FORM_strp_sup","DW_FORM_strx","DW_FORM_strx1","DW_FORM_strx2","DW_FORM_strx3","DW_FORM_strx4","DW_FORM_udata","DW_IDX_compile_unit","DW_IDX_die_offset","DW_IDX_hi_user","DW_IDX_lo_user","DW_IDX_parent","DW_IDX_type_hash","DW_IDX_type_unit","DW_ID_case_insensitive","DW_ID_case_sensitive","DW_ID_down_case","DW_ID_up_case","DW_INL_declared_inlined","DW_INL_declared_not_inlined","DW_INL_inlined","DW_INL_not_inlined","DW_LANG_ALTIUM_Assembler","DW_LANG_Ada2005","DW_LANG_Ada2012","DW_LANG_Ada83","DW_LANG_Ada95","DW_LANG_BLISS","DW_LANG_BORLAND_Delphi","DW_LANG_C","DW_LANG_C11","DW_LANG_C17","DW_LANG_C89","DW_LANG_C99","DW_LANG_C_plus_plus","DW_LANG_C_plus_plus_03","DW_LANG_C_plus_plus_11","DW_LANG_C_plus_plus_14","DW_LANG_C_plus_plus_17","DW_LANG_C_plus_plus_20","DW_LANG_Cobol74","DW_LANG_Cobol85","DW_LANG_Crystal","DW_LANG_D","DW_LANG_Dylan","DW_LANG_Fortran03","DW_LANG_Fortran08","DW_LANG_Fortran18","DW_LANG_Fortran77","DW_LANG_Fortran90","DW_LANG_Fortran95","DW_LANG_GOOGLE_RenderScript","DW_LANG_Go","DW_LANG_Haskell","DW_LANG_Java","DW_LANG_Julia","DW_LANG_Kotlin","DW_LANG_Mips_Assembler","DW_LANG_Modula2","DW_LANG_Modula3","DW_LANG_OCaml","DW_LANG_ObjC","DW_LANG_ObjC_plus_plus","DW_LANG_OpenCL","DW_LANG_PLI","DW_LANG_Pascal83","DW_LANG_Python","DW_LANG_RenderScript","DW_LANG_Rust","DW_LANG_SUN_Assembler","DW_LANG_Swift","DW_LANG_UPC","DW_LANG_Zig","DW_LANG_hi_user","DW_LANG_lo_user","DW_LLE_GNU_view_pair","DW_LLE_base_address","DW_LLE_base_addressx","DW_LLE_default_location","DW_LLE_end_of_list","DW_LLE_offset_pair","DW_LLE_start_end","DW_LLE_start_length","DW_LLE_startx_endx","DW_LLE_startx_length","DW_LNCT_MD5","DW_LNCT_directory_index","DW_LNCT_hi_user","DW_LNCT_lo_user","DW_LNCT_path","DW_LNCT_size","DW_LNCT_timestamp","DW_LNE_define_file","DW_LNE_end_sequence","DW_LNE_hi_user","DW_LNE_lo_user","DW_LNE_set_address","DW_LNE_set_discriminator","DW_LNS_advance_line","DW_LNS_advance_pc","DW_LNS_const_add_pc","DW_LNS_copy","DW_LNS_fixed_advance_pc","DW_LNS_negate_stmt","DW_LNS_set_basic_block","DW_LNS_set_column","DW_LNS_set_epilogue_begin","DW_LNS_set_file","DW_LNS_set_isa","DW_LNS_set_prologue_end","DW_MACRO_define","DW_MACRO_define_strp","DW_MACRO_define_strx","DW_MACRO_define_sup","DW_MACRO_end_file","DW_MACRO_hi_user","DW_MACRO_import","DW_MACRO_import_sup","DW_MACRO_lo_user","DW_MACRO_start_file","DW_MACRO_undef","DW_MACRO_undef_strp","DW_MACRO_undef_strx","DW_MACRO_undef_sup","DW_OP_GNU_addr_index","DW_OP_GNU_const_index","DW_OP_GNU_const_type","DW_OP_GNU_convert","DW_OP_GNU_deref_type","DW_OP_GNU_entry_value","DW_OP_GNU_implicit_pointer","DW_OP_GNU_parameter_ref","DW_OP_GNU_push_tls_address","DW_OP_GNU_regval_type","DW_OP_GNU_reinterpret","DW_OP_WASM_location","DW_OP_abs","DW_OP_addr","DW_OP_addrx","DW_OP_and","DW_OP_bit_piece","DW_OP_bra","DW_OP_breg0","DW_OP_breg1","DW_OP_breg10","DW_OP_breg11","DW_OP_breg12","DW_OP_breg13","DW_OP_breg14","DW_OP_breg15","DW_OP_breg16","DW_OP_breg17","DW_OP_breg18","DW_OP_breg19","DW_OP_breg2","DW_OP_breg20","DW_OP_breg21","DW_OP_breg22","DW_OP_breg23","DW_OP_breg24","DW_OP_breg25","DW_OP_breg26","DW_OP_breg27","DW_OP_breg28","DW_OP_breg29","DW_OP_breg3","DW_OP_breg30","DW_OP_breg31","DW_OP_breg4","DW_OP_breg5","DW_OP_breg6","DW_OP_breg7","DW_OP_breg8","DW_OP_breg9","DW_OP_bregx","DW_OP_call2","DW_OP_call4","DW_OP_call_frame_cfa","DW_OP_call_ref","DW_OP_const1s","DW_OP_const1u","DW_OP_const2s","DW_OP_const2u","DW_OP_const4s","DW_OP_const4u","DW_OP_const8s","DW_OP_const8u","DW_OP_const_type","DW_OP_consts","DW_OP_constu","DW_OP_constx","DW_OP_convert","DW_OP_deref","DW_OP_deref_size","DW_OP_deref_type","DW_OP_div","DW_OP_drop","DW_OP_dup","DW_OP_entry_value","DW_OP_eq","DW_OP_fbreg","DW_OP_form_tls_address","DW_OP_ge","DW_OP_gt","DW_OP_implicit_pointer","DW_OP_implicit_value","DW_OP_le","DW_OP_lit0","DW_OP_lit1","DW_OP_lit10","DW_OP_lit11","DW_OP_lit12","DW_OP_lit13","DW_OP_lit14","DW_OP_lit15","DW_OP_lit16","DW_OP_lit17","DW_OP_lit18","DW_OP_lit19","DW_OP_lit2","DW_OP_lit20","DW_OP_lit21","DW_OP_lit22","DW_OP_lit23","DW_OP_lit24","DW_OP_lit25","DW_OP_lit26","DW_OP_lit27","DW_OP_lit28","DW_OP_lit29","DW_OP_lit3","DW_OP_lit30","DW_OP_lit31","DW_OP_lit4","DW_OP_lit5","DW_OP_lit6","DW_OP_lit7","DW_OP_lit8","DW_OP_lit9","DW_OP_lt","DW_OP_minus","DW_OP_mod","DW_OP_mul","DW_OP_ne","DW_OP_neg","DW_OP_nop","DW_OP_not","DW_OP_or","DW_OP_over","DW_OP_pick","DW_OP_piece","DW_OP_plus","DW_OP_plus_uconst","DW_OP_push_object_address","DW_OP_reg0","DW_OP_reg1","DW_OP_reg10","DW_OP_reg11","DW_OP_reg12","DW_OP_reg13","DW_OP_reg14","DW_OP_reg15","DW_OP_reg16","DW_OP_reg17","DW_OP_reg18","DW_OP_reg19","DW_OP_reg2","DW_OP_reg20","DW_OP_reg21","DW_OP_reg22","DW_OP_reg23","DW_OP_reg24","DW_OP_reg25","DW_OP_reg26","DW_OP_reg27","DW_OP_reg28","DW_OP_reg29","DW_OP_reg3","DW_OP_reg30","DW_OP_reg31","DW_OP_reg4","DW_OP_reg5","DW_OP_reg6","DW_OP_reg7","DW_OP_reg8","DW_OP_reg9","DW_OP_regval_type","DW_OP_regx","DW_OP_reinterpret","DW_OP_rot","DW_OP_shl","DW_OP_shr","DW_OP_shra","DW_OP_skip","DW_OP_stack_value","DW_OP_swap","DW_OP_xderef","DW_OP_xderef_size","DW_OP_xderef_type","DW_OP_xor","DW_ORD_col_major","DW_ORD_row_major","DW_RLE_base_address","DW_RLE_base_addressx","DW_RLE_end_of_list","DW_RLE_offset_pair","DW_RLE_start_end","DW_RLE_start_length","DW_RLE_startx_endx","DW_RLE_startx_length","DW_SECT_ABBREV","DW_SECT_INFO","DW_SECT_LINE","DW_SECT_LOCLISTS","DW_SECT_MACRO","DW_SECT_RNGLISTS","DW_SECT_STR_OFFSETS","DW_SECT_V2_ABBREV","DW_SECT_V2_INFO","DW_SECT_V2_LINE","DW_SECT_V2_LOC","DW_SECT_V2_MACINFO","DW_SECT_V2_MACRO","DW_SECT_V2_STR_OFFSETS","DW_SECT_V2_TYPES","DW_TAG_ALTIUM_circ_type","DW_TAG_ALTIUM_mwa_circ_type","DW_TAG_ALTIUM_rev_carry_type","DW_TAG_ALTIUM_rom","DW_TAG_APPLE_property","DW_TAG_BORLAND_Delphi_dynamic_array","DW_TAG_BORLAND_Delphi_set","DW_TAG_BORLAND_Delphi_string","DW_TAG_BORLAND_Delphi_variant","DW_TAG_BORLAND_property","DW_TAG_GNU_BINCL","DW_TAG_GNU_EINCL","DW_TAG_GNU_call_site","DW_TAG_GNU_call_site_parameter","DW_TAG_GNU_formal_parameter_pack","DW_TAG_GNU_template_parameter_pack","DW_TAG_GNU_template_template_param","DW_TAG_HP_Bliss_field","DW_TAG_HP_Bliss_field_set","DW_TAG_HP_array_descriptor","DW_TAG_MIPS_loop","DW_TAG_PGI_interface_block","DW_TAG_PGI_kanji_type","DW_TAG_SUN_class_template","DW_TAG_SUN_codeflags","DW_TAG_SUN_dtor","DW_TAG_SUN_dtor_info","DW_TAG_SUN_f90_interface","DW_TAG_SUN_fortran_vax_structure","DW_TAG_SUN_function_template","DW_TAG_SUN_indirect_inheritance","DW_TAG_SUN_memop_info","DW_TAG_SUN_omp_child_func","DW_TAG_SUN_rtti_descriptor","DW_TAG_SUN_struct_template","DW_TAG_SUN_union_template","DW_TAG_access_declaration","DW_TAG_array_type","DW_TAG_atomic_type","DW_TAG_base_type","DW_TAG_call_site","DW_TAG_call_site_parameter","DW_TAG_catch_block","DW_TAG_class_template","DW_TAG_class_type","DW_TAG_coarray_type","DW_TAG_common_block","DW_TAG_common_inclusion","DW_TAG_compile_unit","DW_TAG_condition","DW_TAG_const_type","DW_TAG_constant","DW_TAG_dwarf_procedure","DW_TAG_dynamic_type","DW_TAG_entry_point","DW_TAG_enumeration_type","DW_TAG_enumerator","DW_TAG_file_type","DW_TAG_formal_parameter","DW_TAG_format_label","DW_TAG_friend","DW_TAG_function_template","DW_TAG_generic_subrange","DW_TAG_hi_user","DW_TAG_immutable_type","DW_TAG_imported_declaration","DW_TAG_imported_module","DW_TAG_imported_unit","DW_TAG_inheritance","DW_TAG_inlined_subroutine","DW_TAG_interface_type","DW_TAG_label","DW_TAG_lexical_block","DW_TAG_lo_user","DW_TAG_member","DW_TAG_module","DW_TAG_namelist","DW_TAG_namelist_item","DW_TAG_namespace","DW_TAG_null","DW_TAG_packed_type","DW_TAG_partial_unit","DW_TAG_pointer_type","DW_TAG_ptr_to_member_type","DW_TAG_reference_type","DW_TAG_restrict_type","DW_TAG_rvalue_reference_type","DW_TAG_set_type","DW_TAG_shared_type","DW_TAG_skeleton_unit","DW_TAG_string_type","DW_TAG_structure_type","DW_TAG_subprogram","DW_TAG_subrange_type","DW_TAG_subroutine_type","DW_TAG_template_alias","DW_TAG_template_type_parameter","DW_TAG_template_value_parameter","DW_TAG_thrown_type","DW_TAG_try_block","DW_TAG_type_unit","DW_TAG_typedef","DW_TAG_union_type","DW_TAG_unspecified_parameters","DW_TAG_unspecified_type","DW_TAG_upc_relaxed_type","DW_TAG_upc_shared_type","DW_TAG_upc_strict_type","DW_TAG_variable","DW_TAG_variant","DW_TAG_variant_part","DW_TAG_volatile_type","DW_TAG_with_stmt","DW_UT_compile","DW_UT_hi_user","DW_UT_lo_user","DW_UT_partial","DW_UT_skeleton","DW_UT_split_compile","DW_UT_split_type","DW_UT_type","DW_VIRTUALITY_none","DW_VIRTUALITY_pure_virtual","DW_VIRTUALITY_virtual","DW_VIS_exported","DW_VIS_local","DW_VIS_qualified","DwAccess","DwAddr","DwAt","DwAte","DwCc","DwCfa","DwChildren","DwDefaulted","DwDs","DwDsc","DwEhPe","DwEnd","DwForm","DwId","DwIdx","DwInl","DwLang","DwLle","DwLnct","DwLne","DwLns","DwMacro","DwOp","DwOrd","DwRle","DwSect","DwSectV2","DwTag","DwUt","DwVirtuality","DwVis","application","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default_lower_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_absent","is_indirect","is_valid_encoding","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","static_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","read","signed","skip","u16","unsigned","AbbreviationTagZero","Abs","Address","Address","AddressIndex","AddressOrOffsetPair","AddressOrOffsetPair","AdvanceLoc","And","ArangeEntry","ArangeEntryIter","ArangeHeader","ArangeHeaderIter","Architectural","ArgsSize","ArrayLike","AttributeFormZero","Augmentation","BadBranchTarget","BadHasChildren","BadLength","BadSignedLeb128","BadUnsignedLeb128","BadUtf8","BaseAddress","BaseAddress","BaseAddresses","BaseAddressx","BaseAddressx","Bra","Bytes","Call","CallFrameCFA","CallFrameInstruction","CallFrameInstructionIter","CannotParseOmitPointerEncoding","CfaRule","CfiEntriesIter","CfiInstructionInInvalidContext","Cie","CieOrFde","CommonInformationEntry","Complete","Constant","ConstantIndex","Convert","DataRelativePointerButDataBaseIsUndefined","DebugAddr","DebugAranges","DebugCuIndex","DebugFrame","DebugInfoRef","DebugLineStr","DebugLoc","DebugLocLists","DebugRanges","DebugRngLists","DebugStr","DebugStrOffsets","DebugTuIndex","DefCfa","DefCfaExpression","DefCfaOffset","DefCfaOffsetSf","DefCfaRegister","DefCfaSf","DefaultLocation","Deref","DieReference","Direct","Div","DivisionByZero","Drop","DuplicateAbbreviationCode","DuplicateArange","EhFrame","EhFrameHdr","EhHdrTable","EhHdrTableIter","Empty","Endian","EndianBuf","EndianSlice","EntryValue","Eq","Err","Error","Evaluation","EvaluationResult","EvaluationStorage","ExpectedStringAttributeValue","ExpectedZero","Expression","Expression","Expression","Expression","ExpressionStack","F32","F32","F64","F64","Fde","FrameDescriptionEntry","FrameOffset","FuncRelativePointerInBadContext","Ge","Generic","Generic","Gt","I16","I16","I32","I32","I64","I64","I8","I8","ImplicitPointer","ImplicitPointer","ImplicitValue","Indirect","IntegralTypeRequired","InvalidAddressRange","InvalidExpression","InvalidExpressionTerminator","InvalidImplicitConst","InvalidIndexRow","InvalidIndexSectionCount","InvalidIndexSlotCount","InvalidLocationAddressRange","InvalidPiece","InvalidPushObjectAddress","InvalidShiftExpression","Io","Item","Le","LineRangeZero","LocListIter","Location","LocationListEntry","LocationLists","Lt","MaximumOperationsPerInstructionZero","MinimumInstructionLengthZero","Minus","MissingFileEntryFormatPath","MissingUnitDie","Mod","Mul","Ne","Neg","NegateRaState","NoEntryAtGivenOffset","NoUnwindInfoForAddress","Nop","Nop","Not","NotCieId","NotCiePointer","NotEnoughStackItems","NotFdePointer","Offset","Offset","Offset","Offset","OffsetExtendedSf","OffsetOutOfBounds","OffsetPair","OffsetPair","Ok","OpcodeBaseZero","Operation","OperationIter","Or","ParameterRef","ParsedEhFrameHdr","PartialFrameDescriptionEntry","PcRelativePointerButSectionBaseIsUndefined","Pick","Piece","Piece","Plus","PlusConstant","Pointer","PopWithEmptyStack","PushObjectAddress","Range","RangeLists","RawLocListEntry","RawLocListIter","RawRngListEntry","RawRngListIter","Reader","ReaderOffset","ReaderOffsetId","Register","Register","Register","Register","RegisterAndOffset","RegisterOffset","RegisterRule","RegisterRuleIter","Reinterpret","RememberState","RequiresAtLocation","RequiresBaseType","RequiresCallFrameCfa","RequiresEntryValue","RequiresFrameBase","RequiresIndexedAddress","RequiresMemory","RequiresParameterRef","RequiresRegister","RequiresRelocatedAddress","RequiresTls","Restore","RestoreState","Result","Result","RngListIter","Rot","Rules","SameValue","SameValue","Section","SectionBaseAddresses","SetLoc","Shl","Shr","Shra","SignedConstant","Skip","Stack","Stack","StackFull","StackValue","StartEnd","StartEnd","StartLength","StartLength","StartxEndx","StartxEndx","StartxLength","StartxLength","StoreOnHeap","Swap","TLS","TextRelativePointerButTextBaseIsUndefined","TooManyIterations","TooManyRegisterRules","TypeMismatch","TypedLiteral","U16","U16","U32","U32","U64","U64","U8","U8","Undefined","Undefined","UnexpectedEof","UnexpectedNull","UnitIndex","UnitIndexSection","UnitIndexSectionIterator","UnitOffset","UnitRef","UnknownAbbreviation","UnknownAugmentation","UnknownCallFrameInstruction","UnknownExtendedOpcode","UnknownForm","UnknownIndexSection","UnknownPointerEncoding","UnknownReservedLength","UnknownStandardOpcode","UnknownVersion","UnsignedConstant","UnsupportedAddressIndex","UnsupportedAddressSize","UnsupportedAttributeForm","UnsupportedEvaluation","UnsupportedFieldSize","UnsupportedOffset","UnsupportedOffsetSize","UnsupportedPointerEncoding","UnsupportedRegister","UnsupportedSegmentSize","UnsupportedTypeOperation","UnsupportedUnitType","UnwindContext","UnwindContextStorage","UnwindOffset","UnwindSection","UnwindTable","UnwindTableRow","ValExpression","ValExpression","ValOffset","ValOffset","ValOffsetSf","Value","Value","ValueType","VariableLengthSearchTable","WasmGlobal","WasmLocal","WasmStack","Xor","abs","add","address","address_size","and","as_result","augmentation","begin","bit_offset","bit_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cannot_implement","cannot_implement","cfa","checked_sub","cie","cie_from_offset","cie_from_offset","cie_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","code_alignment_factor","contains","contains","convert","data","data","data_alignment_factor","debug_info_offset","debug_ranges","debug_rnglists","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","description","direct","div","dwo_section_name","dwp_range","eh_frame","eh_frame_hdr","eh_frame_ptr","empty","empty","encoding","encoding","end","end_address","endian","endian","entries","entries","entries","entry_len","entry_len","entry_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evaluate","fde_address_encoding","fde_for_address","fde_for_address","fde_for_address","fde_from_offset","fde_from_offset","find","find","find","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_encoding","from_i16","from_u16","from_u32","from_u64","from_u64","from_u8","ge","get_address","get_offset","get_offset","get_str","get_str","get_str_offset","gt","has_lsda","hash","hash","hash","hash","hash","header","headers","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","index","index","initial_address","instructions","instructions","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_current_row","into_iter","into_iter","into_u64","is_empty","is_empty","is_empty","is_empty","is_signal_trampoline","is_signal_trampoline","iter","le","len","len","len","length","length","load","location","locations","locations_dwo","lookup","lookup_offset_id","lookup_offset_id","lookup_offset_id","lookup_offset_id","lookup_offset_id","lsda","lsda_encoding","lt","mul","ne","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_in","new_in","next","next","next","next","next","next","next","next","next","next","next","next","next_row","not","nth","offset","offset","offset","offset","offset","offset_from","offset_from","offset_from","offset_from","offset_id","offset_id","operations","or","parse","parse","parse","parse","partial_cmp","partial_cmp","partial_fde_from_offset","partial_fde_from_offset","personality","personality","personality_with_encoding","pointer","pointer_to_offset","range","range","range","range_from","range_to","ranges","raw_locations","raw_locations_dwo","raw_ranges","read_address","read_address","read_f32","read_f32","read_f64","read_f64","read_i16","read_i16","read_i32","read_i32","read_i64","read_i64","read_i8","read_i8","read_initial_length","read_initial_length","read_length","read_length","read_null_terminated_slice","read_null_terminated_slice","read_offset","read_offset","read_sized_offset","read_sized_offset","read_sleb128","read_sleb128","read_slice","read_slice","read_u16","read_u16","read_u32","read_u32","read_u64","read_u64","read_u8","read_u8","read_u8_array","read_u8_array","read_uint","read_uint","read_uleb128","read_uleb128","read_uleb128_u16","read_uleb128_u16","read_uleb128_u32","read_uleb128_u32","read_word","read_word","reader","reader","reader","reader","reader","reader","reader","reader","reader","reader","reader","reader","reader","reader","reader","register","registers","reinterpret","rem","resume_with_at_location","resume_with_base_type","resume_with_call_frame_cfa","resume_with_entry_value","resume_with_frame_base","resume_with_indexed_address","resume_with_memory","resume_with_parameter_ref","resume_with_register","resume_with_relocated_address","resume_with_tls","return_address_register","rows","saved_args_size","section","section","section_count","section_name","sections","segment","segment_size","set_address_size","set_address_size","set_debug_ranges","set_eh_frame","set_eh_frame_hdr","set_got","set_initial_value","set_max_iterations","set_object_address","set_segment_size","set_text","set_vendor","set_vendor","shl","shr","shra","size","size_in_bits","skip","skip","skip_leb128","skip_leb128","slice","slot_count","split","split","split_at","start_address","sub","table","text","to_string","to_u64","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit_count","unwind_info_for_address","unwind_info_for_address","unwind_info_for_address","unwind_info_for_address","value_result","value_type","version","version","wrapping_add","xcoff_section_name","xor","address","delta","dest_register","expression","expression","expression","factored_offset","factored_offset","factored_offset","factored_offset","factored_offset","factored_offset","offset","offset","register","register","register","register","register","register","register","register","register","register","register","register","size","src_register","offset","register","address","base_type","base_type","index","register","relocate","size","space","address","byte_offset","register","value","value","value","address","base_type","base_type","base_type","base_type","base_type","bit_offset","byte_offset","data","expression","index","index","index","index","index","index","offset","offset","offset","offset","register","register","size","size_in_bits","space","target","target","value","value","value","value","value","addr","addr","begin","begin","begin","begin","begin","begin","data","data","data","data","data","data","data","end","end","end","end","length","length","addr","addr","begin","begin","begin","begin","begin","begin","end","end","end","end","length","length"],"q":[[0,"gimli"],[1258,"gimli::constants"],[2616,"gimli::leb128"],[2617,"gimli::leb128::read"],[2621,"gimli::read"],[3952,"gimli::read::CallFrameInstruction"],[3980,"gimli::read::CfaRule"],[3982,"gimli::read::EvaluationResult"],[3990,"gimli::read::Location"],[3996,"gimli::read::Operation"],[4028,"gimli::read::RawLocListEntry"],[4049,"gimli::read::RawRngListEntry"],[4063,"core::option"],[4064,"core::clone"],[4065,"core::cmp"],[4066,"core::cmp"],[4067,"core::fmt"],[4068,"core::hash"],[4069,"core::any"],[4070,"core::fmt"],[4071,"core::default"],[4072,"core::ops::function"],[4073,"core::ops::range"],[4074,"core::convert"]],"d":["","","","","","","","","","","","","","","","","ARM 64-bit (AArch64) architecture specific definitions.","AAarch64 extensions.","","","","","","","","","ARM architecture specific definitions.","Big endian byte order.","Big endian byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>.debug_abbrev</code> section.","An offset into the <code>.debug_abbrev</code> section.","The <code>.debug_addr</code> section.","An offset to a set of entries in the <code>.debug_addr</code> section.","An index into a set of addresses in the <code>.debug_addr</code> …","The <code>.debug_aranges</code> section.","An offset into the <code>.debug_aranges</code> section.","The <code>.debug_cu_index</code> section.","The <code>.debug_frame</code> section.","An offset into the <code>.debug_frame</code> section.","The <code>.debug_info</code> section.","An offset into the <code>.debug_info</code> section.","An offset into the <code>.debug_info</code> section.","The <code>.debug_line</code> section.","An offset into the <code>.debug_line</code> section.","The <code>.debug_line_str</code> section.","An offset into the <code>.debug_line_str</code> section.","The <code>.debug_loc</code> section.","The <code>.debug_loclists</code> section.","An offset to a set of location list offsets in the …","An index into a set of location list offsets in the …","The <code>.debug_macinfo</code> section.","An offset into the <code>.debug_macinfo</code> section.","The <code>.debug_macro</code> section.","An offset into the <code>.debug_macro</code> section.","The <code>.debug_pubnames</code> section.","The <code>.debug_pubtypes</code> section.","The <code>.debug_ranges</code> section.","The <code>.debug_rnglists</code> section.","An offset to a set of range list offsets in the …","An index into a set of range list offsets in the …","The <code>.debug_str</code> section.","An offset into the <code>.debug_str</code> section.","The <code>.debug_str_offsets</code> section.","An offset to a set of entries in the <code>.debug_str_offsets</code> …","An index into a set of entries in the <code>.debug_str_offsets</code> …","The <code>.debug_tu_index</code> section.","A type signature as used in the <code>.debug_types</code> section.","The <code>.debug_types</code> section.","An offset into the <code>.debug_types</code> section.","An offset into the <code>.debug_types</code> section.","A default set of extensions, including some common GNU …","32-bit DWARF","64-bit DWARF","The “type” of file with DWARF debugging information. …","A .dwo split DWARF file.","An optionally-provided implementation-defined compilation …","","","","","","","","","","","","The <code>.eh_frame</code> section.","The <code>.eh_frame_hdr</code> section.","An offset into the <code>.eh_frame</code> section.","Encoding parameters that are commonly used for multiple …","A trait describing the endianity of some buffer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the format of a compilation unit is 32- or 64-bit.","","","","","","","","","","","","","","","","","","Encoding parameters for a line number program.","Little endian byte order.","Little endian byte order.","An offset into either the <code>.debug_loc</code> section or the …","LoongArch architecture specific definitions.","","","","","","","","","","","","","","","","","","","A normal executable or object file.","The native endianity for the target platform.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An offset into either the <code>.debug_ranges</code> section or the …","An offset into either the <code>.debug_ranges</code> section or the …","A DWARF register number.","RISC-V architecture specific definitions.","Byte order that is selectable at runtime.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An identifier for a DWARF section.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An offset into the <code>.debug_info</code> or <code>.debug_types</code> sections.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Which vendor extensions to support.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Intel i386 architecture specific definitions.","AMD64 architecture specific definitions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of an address.","Returns the <code>DebugInfoOffset</code> inside, or <code>None</code> otherwise.","Returns the <code>DebugTypesOffset</code> inside, or <code>None</code> otherwise.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constant definitions.","","","","","","Returns a <code>DebugLocListsBase</code> with the default value of …","Returns a <code>DebugRngListsBase</code> with the default value of …","Returns a <code>DebugStrOffsetsBase</code> with the default value of …","The initial value of the <code>is_stmt</code> register.","Returns the ELF section name for this kind, when found in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the DWARF format is 32- or 64-bit.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Return the serialized size of an initial length field for …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true for big endian byte order.","","","","Return true for little endian byte order.","Return true for little endian byte order.","Read and write DWARF’s “Little Endian Base 128” …","The minimum value which a special opcode can add to the …","The range of values which a special opcode can add to the …","The maximum number of individual operations that may be …","The size in bytes of the smallest target machine …","Returns the ELF section name for this kind.","Converts a register name into a register number.","Converts a register name into a register number.","Converts a register name into a register number.","Converts a register name into a register number.","Converts a register name into a register number.","Converts a register name into a register number.","","","","","","Read DWARF debugging information.","Reads a 32 bit floating point number from <code>buf</code>.","Reads a 32 bit floating point number from <code>buf</code>.","Reads a 32 bit floating point number from <code>buf</code>.","Reads a 32 bit floating point number from <code>buf</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a signed 64 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from <code>buf</code>.","Read an unsigned n-bytes integer u64.","Read an unsigned n-bytes integer u64.","The name of a register, or <code>None</code> if the register number is …","The name of a register, or <code>None</code> if the register number is …","The name of a register, or <code>None</code> if the register number is …","The name of a register, or <code>None</code> if the register number is …","The name of a register, or <code>None</code> if the register number is …","The name of a register, or <code>None</code> if the register number is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The DWARF version of the header.","Return the natural word size for the format","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Returns the XCOFF section name for this kindhe encodings of the constants used in the …","The encodings of the constants used in the …","The attribute encodings for DIE attributes.","The encodings of the constants used in the <code>DW_AT_encoding</code> …","The encodings of the constants used in the …","The opcode for a call frame instruction.","The child determination encodings for DIE attributes.","The encodings of the constants used in the <code>DW_AT_defaulted</code> …","The encodings of the constants used in the …","The encodings of the constants used in the <code>DW_AT_discr_list</code>…","Pointer encoding used by <code>.eh_frame</code>.","The encodings of the constants used in the <code>DW_AT_endianity</code> …","The attribute form encodings for DIE attributes.","The encodings of the constants used in the …","Name index attribute encodings.","The encodings of the constants used in the <code>DW_AT_inline</code> …","The encodings of the constants used in the <code>DW_AT_language</code> …","The encodings of the constants used in location list …","The encodings for the line number header entry formats.","The encodings for the extended opcodes for line number …","The encodings for the standard opcodes for line number …","The encodings for macro information entry types.","The encodings for DWARF expression operations.","The encodings of the constants used in the <code>DW_AT_ordering</code> …","Range list entry encoding values.","The section type field in a <code>.dwp</code> unit index.","The section type field in a <code>.dwp</code> unit index with version 2.","The tag encodings for DIE attributes.","The unit type field in a unit header.","The encodings of the constants used in the <code>DW_AT_virtuality</code>…","The encodings of the constants used in the <code>DW_AT_visibility</code>…","Get the pointer encoding’s application.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the default DW_AT_lower_bound for this language.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the pointer encoding’s format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this encoding the absent pointer encoding?","Is this coding indirect? If so, its encoded value is the …","Is this a known, valid pointer encoding?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A module for reading signed and unsigned integers that …","Read a signed LEB128 number from the given <code>Reader</code> and …","Read bytes until the LEB128 continuation bit is not set.","Read an LEB128 u16 from the given <code>Reader</code> and return it or …","Read an unsigned LEB128 number from the given <code>Reader</code> and …","An abbreviation declared that its tag is zero, but zero is …","Take the absolute value of the top of the stack.","Relocate the address if needed, and push it on the stack.","The piece is found in memory.","Read the address at the given index in `.debug_addr, …","A location from DWARF version &lt;= 4.","A range from DWARF version &lt;= 4.","The <code>AdvanceLoc</code> instruction is used for all of …","Bitwise <code>and</code> of the top two values on the stack.","A single parsed arange.","An iterator over the aranges from a <code>.debug_aranges</code> section.","A header for a set of entries in the <code>.debug_arange</code> section.","An iterator over the headers of a <code>.debug_aranges</code> section.","“The rule is defined externally to this specification by …","DW_CFA_GNU_args_size","Marker trait for types that can be used as backing storage …","An attribute specification declared that its form is zero, …","We support the z-style augmentation defined by <code>.eh_frame</code>.","Invalid branch target for a DW_OP_bra or DW_OP_skip.","The abbreviation’s has-children byte was not one of …","The specified length is impossible.","An error parsing a signed LEB128 value.","An error parsing an unsigned LEB128 value.","Found an invalid UTF-8 string.","DW_LLE_base_address","DW_RLE_base_address","Optional base addresses for the relative <code>DW_EH_PE_*</code> …","DW_LLE_base_addressx","DW_RLE_base_addressx","Branch to the target location if the top of stack is …","The piece is represented by some constant bytes.","Evaluate a DWARF expression as a subroutine.  The …","Compute the call frame CFA and push it on the stack.","A parsed call frame instruction.","A lazy iterator parsing call frame instructions.","Cannot parse a pointer with a <code>DW_EH_PE_omit</code> encoding.","The canonical frame address (CFA) recovery rules.","An iterator over CIE and FDE entries in a <code>.debug_frame</code> or …","Encountered a call frame instruction in a context in which …","This CFI entry is a <code>CommonInformationEntry</code>.","Either a <code>CommonInformationEntry</code> (CIE) or a …","A Common Information Entry holds information that is …","The <code>Evaluation</code> is complete, and <code>Evaluation::result()</code> can …","This is a pseudo-register with a constant value.","Read the address at the given index in `.debug_addr, and …","Pop the top stack entry, convert it to a different type, …","Found a data relative pointer, but the data base is …","The raw contents of the <code>.debug_addr</code> section.","The <code>DebugAranges</code> struct represents the DWARF address range …","The data in the <code>.debug_cu_index</code> section of a <code>.dwp</code> file.","<code>DebugFrame</code> contains the <code>.debug_frame</code> section’s frame …","A section-relative reference.","The <code>DebugLineStr</code> struct represents the DWARF strings found …","The raw contents of the <code>.debug_loc</code> section.","The <code>DebugLocLists</code> struct represents the DWARF data found …","The raw contents of the <code>.debug_ranges</code> section.","The <code>DebugRngLists</code> struct represents the contents of the …","The <code>DebugStr</code> struct represents the DWARF strings found in …","The raw contents of the <code>.debug_str_offsets</code> section.","The data in the <code>.debug_tu_index</code> section of a <code>.dwp</code> file.","DW_CFA_def_cfaThe DW_CFA_def_cfa instruction takes two …","DW_CFA_def_cfa_expressionThe DW_CFA_def_cfa_expression …","DW_CFA_def_cfa_offsetThe DW_CFA_def_cfa_offset instruction …","DW_CFA_def_cfa_offset_sfThe DW_CFA_def_cfa_offset_sf …","DW_CFA_def_cfa_registerThe DW_CFA_def_cfa_register …","DW_CFA_def_cfa_sfThe DW_CFA_def_cfa_sf instruction takes …","DW_LLE_default_location","Dereference the topmost value of the stack.","A reference to a DIE, either relative to the current CU or …","This value is the decoded pointer value.","Divide the top two values on the stack.","Division or modulus by zero when evaluating an expression.","Drop an item from the stack.","Found an abbreviation code that has already been used.","Found a duplicate arange.","<code>EhFrame</code> contains the frame unwinding information needed …","<code>EhFrameHdr</code> contains the information about the <code>.eh_frame_hdr</code>…","The CFI binary search table that is an optional part of …","An iterator for <code>.eh_frame_hdr</code> section’s binary search …","The piece is empty.  Ordinarily this means the piece has …","The endianity of bytes that are read.","<code>EndianBuf</code> has been renamed to <code>EndianSlice</code>. For ease of …","A <code>&amp;[u8]</code> slice with endianity metadata.","Evaluate an expression at the entry to the current …","Compare the top two stack values for equality.","Contains the error value","An error that occurred when parsing.","A DWARF expression evaluator.","The state of an <code>Evaluation</code> after evaluating a DWARF …","Specification of what storage should be used for <code>Evaluation</code>…","Expected an attribute value to be a string form.","Expected a zero, found something else.","The bytecode for a DWARF expression or location …","The CFA is obtained by evaluating this <code>Reader</code> as a DWARF …","“The previous value of this register is located at the …","DW_CFA_expressionThe DW_CFA_expression instruction takes …","The storage used for the expression stack.","32-bit floating point type.","A 32-bit floating point value.","64-bit floating point type.","A 64-bit floating point value.","This CFI entry is a <code>FrameDescriptionEntry</code>, however fully …","A <code>FrameDescriptionEntry</code> is a set of CFA instructions for …","Compute the frame base (using <code>DW_AT_frame_base</code>), add the …","Found a function relative pointer in a context that does …","Compare the top two stack values using <code>&gt;=</code>.","The generic type, which is address-sized and of …","A generic value, which is address-sized and of unspecified …","Compare the top two stack values using <code>&gt;</code>.","Signed 16-bit integer type.","A signed 16-bit integer value.","Signed 32-bit integer type.","A signed 32-bit integer value.","Signed 64-bit integer type.","A signed 64-bit integer value.","Signed 8-bit integer type.","A signed 8-bit integer value.","The object is a pointer to a value which has no actual …","The piece is a pointer to a value which has no actual …","The object has no location, but has a known constant value.","This value is <em>not</em> the pointer value, but points to the …","An expression operation required an integral type but saw a","The end of an address range was before the beginning.","An unrecognized operation was found while parsing a DWARF …","An expression-terminating operation was followed by …","<code>DW_FORM_implicit_const</code> used in an invalid context.","Invalid hash row in <code>.dwp</code> index.","Invalid section count in <code>.dwp</code> index.","Invalid slot count in <code>.dwp</code> index.","The end offset of a loc list entry was before the …","The expression had a piece followed by an expression …","DW_OP_push_object_address used but no address passed in.","The shift value in an expression must be a non-negative …","An I/O error occurred while reading.","Type of the elements being stored.","Compare the top two stack values using <code>&lt;=</code>.","The line range must not be zero.","An iterator over a location list.","A single location of a piece of the result of a DWARF …","A location list entry from the <code>.debug_loc</code> or …","The DWARF data found in <code>.debug_loc</code> and <code>.debug_loclists</code> …","Compare the top two stack values using <code>&lt;</code>.","The maximum operations per instruction must not be zero.","The minimum instruction length must not be zero.","Subtract the top two values on the stack.","Missing DW_LNCT_path in file entry format.","A compilation unit or type unit is missing its top level …","Modulus of the top two values on the stack.","Multiply the top two values on the stack.","Compare the top two stack values using <code>!=</code>.","Negate the top of the stack.","DW_CFA_AARCH64_negate_ra_state","Did not find an entry at the given offset.","Do not have unwind info for the given address.","DW_CFA_nopThe DW_CFA_nop instruction has no operands and …","No operation.","Bitwise <code>not</code> of the top of the stack.","Expected to find the CIE ID, but found something else.","Expected to find a pointer to a CIE, but found the CIE ID …","Not enough items on the stack when evaluating an …","Expected to find a pointer to an FDE, but found a CIE …","“The previous value of this register is saved at the …","The <code>Offset</code> instruction represents both <code>DW_CFA_offset</code> and …","The offset type associated with this CFI section. Either …","The type used for offsets and lengths.","DW_CFA_offset_extended_sfThe DW_CFA_offset_extended_sf …","The given offset is out of bounds.","DW_LLE_offset_pair","DW_RLE_offset_pair","Contains the success value","The opcode base must not be zero.","A single decoded DWARF expression operation.","An iterator for the operations in an expression.","Bitwise <code>or</code> of the top two values on the stack.","This represents a parameter that was optimized out.","<code>ParsedEhFrameHdr</code> contains the parsed information from the …","A partially parsed <code>FrameDescriptionEntry</code>.","Found a PC relative pointer, but the section base is …","Pick an item from the stack and push it on top of the …","The description of a single piece of the result of a DWARF …","Terminate a piece.","Add the top two values on the stack.","Add a constant to the topmost value on the stack.","A decoded pointer.","When evaluating call frame instructions, found a …","Push the object address on the stack.","An address range from the <code>.debug_ranges</code>, <code>.debug_rnglists</code>, …","The DWARF data found in <code>.debug_ranges</code> and <code>.debug_rnglists</code> …","A raw entry in .debug_loclists.","A raw iterator over a location list.","A raw entry in .debug_rnglists","A raw iterator over an address range list.","A trait for reading the data from a DWARF section.","A trait for offsets with a DWARF section.","An identifier for an offset within a section reader.","“The previous value of this register is stored in …","DW_CFA_registerThe DW_CFA_register instruction takes two …","Indicate that this piece’s location is in the given …","The piece is found in a register.","The CFA is given offset from the given register’s value.","Find the value of the given register, add the offset, and …","An entry in the abstract CFI table that describes how to …","An unordered iterator for register rules.","Pop the top stack entry, reinterpret the bits in its value …","DW_CFA_remember_stateThe DW_CFA_remember_state instruction …","The <code>Evaluation</code> needs the DWARF expression at the given …","The <code>Evaluation</code> needs the <code>ValueType</code> for the base type DIE at","The <code>Evaluation</code> needs the CFA to proceed further.  Once the …","The <code>Evaluation</code> needs the value produced by evaluating a …","The <code>Evaluation</code> needs the frame base address to proceed …","The <code>Evaluation</code> needs an address from the <code>.debug_addr</code> …","The <code>Evaluation</code> needs a value from memory to proceed …","The <code>Evaluation</code> needs the value of the parameter at the …","The <code>Evaluation</code> needs a value from a register to proceed …","The <code>Evaluation</code> needs an address to be relocated to proceed …","The <code>Evaluation</code> needs a value from TLS to proceed further.  …","The <code>Restore</code> instruction represents both <code>DW_CFA_restore</code> and …","DW_CFA_restore_stateThe DW_CFA_restore_state instruction …","The result of a parse.","The storage used for the results.","An iterator over an address range list.","Rotate the top three stack items.","The storage used for register rules in a unwind table row.","This register has not been modified from the previous …","DW_CFA_same_valueThe DW_CFA_same_value instruction takes a …","A convenience trait for loading DWARF sections from object …","Optional base addresses for the relative <code>DW_EH_PE_*</code> …","DW_CFA_set_locThe DW_CFA_set_loc instruction takes a …","Logical left shift of the 2nd value on the stack by the …","Right shift of the 2nd value on the stack by the number of …","Arithmetic left shift of the 2nd value on the stack by the …","Push a signed constant value on the stack.  This handles …","Unconditional branch to the target location.","The storage used for unwind table row stack.","The storage used for the evaluation stack.","Attempted to push onto the CFI or evaluation stack, but it …","The object has no location, but its value is at the top of …","DW_LLE_start_end","DW_RLE_start_end","DW_LLE_start_length","DW_RLE_start_length","DW_LLE_startx_endx","DW_RLE_startx_endx","DW_LLE_startx_length","DW_RLE_startx_length","Indicates that storage should be allocated on heap.","Swap the top two stack items.","Compute the address of a thread-local variable and push it …","Found a <code>.text</code> relative pointer, but the <code>.text</code> base is …","Too many iterations to compute the expression.","The CFI program defined more register rules than we have …","An expression operation used mismatching types.","Interpret the value bytes as a constant of a given type, …","Unsigned 16-bit integer type.","An unsigned 16-bit integer value.","Unsigned 32-bit integer type.","An unsigned 32-bit integer value.","Unsigned 64-bit integer type.","An unsigned 64-bit integer value.","Unsigned 8-bit integer type.","An unsigned 8-bit integer value.","A register that has this rule has no recoverable value in …","DW_CFA_undefinedThe DW_CFA_undefined instruction takes a …","Hit the end of input before it was expected.","Read a null entry before it was expected.","The partially parsed index from a <code>DebugCuIndex</code> or …","Information about a unit’s contribution to a section in …","An iterator over the section offsets and sizes for a row …","An offset into the current compilation or type unit.","A CU-relative reference.","Found a record with an unknown abbreviation code.","Found an unknown CFI augmentation.","An unknown DW_CFA_* instruction.","Found an unknown extended opcode.","Found an unknown <code>DW_FORM_*</code> type.","Unknown section type in <code>.dwp</code> index.","The given pointer encoding is either unknown or invalid.","Found an unknown reserved length value.","Found an unknown standard opcode.","Found an unknown DWARF version.","Push an unsigned constant value on the stack.  This …","Ranges using AddressIndex are not supported yet.","The specified address size is not supported.","A DIE attribute used an unsupported form.","An unsupported operation was found while evaluating a …","The specified field size is not supported.","An offset value was larger than the maximum supported …","The specified offset size is not supported.","We do not support the given pointer encoding yet.","Registers larger than <code>u16</code> are not supported.","Nonzero segment selector sizes aren’t supported yet.","An expression operation used types that are not supported.","The <code>DW_UT_*</code> value for this unit is not supported yet.","Common context needed when evaluating the call frame …","Specification of what storage should be used for …","An offset into an <code>UnwindSection</code>.","A section holding unwind information: either <code>.debug_frame</code> …","The <code>UnwindTable</code> iteratively evaluates a …","A row in the virtual unwind table that describes how to …","“The previous value of this register is the value …","DW_CFA_val_expressionThe DW_CFA_val_expression instruction …","“The previous value of this register is the value CFA+N …","DW_CFA_val_offsetThe DW_CFA_val_offset instruction takes …","DW_CFA_val_offset_sfThe DW_CFA_val_offset_sf instruction …","The value of an entry on the DWARF stack.","The piece has no location but its value is known.","The type of an entry on the DWARF stack.","The <code>.eh_frame_hdr</code> binary search table claims to be …","The index of a global.","The index of a local in the currently executing function.","The index of an item on the operand stack.","Bitwise <code>xor</code> of the top two values on the stack.","Perform an absolute value operation.","Perform an addition operation.","Return the beginning address of this arange.","The size of addresses (in bytes) in this CIE.","Perform a bitwise and operation.","Get the result of this <code>Evaluation</code>.","Get the augmentation data, if any exists.","The beginning address of the range.","If given, the bit offset of the piece within the location. …","The size in bits of a value for this type.","","Create a <code>DebugAddr</code> section that references the data in <code>self</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>DebugAranges</code> section that references the data in …","","","","","","","","","","","","","","Create a <code>LocationLists</code> that references the data in <code>self</code>.","","","","","","","","","","","","","","","Create a <code>RangeLists</code> that references the data in <code>self</code>.","","","","","","","Create a <code>DebugStr</code> section that references the data in <code>self</code>.","","Create a <code>DebugStrOffsets</code> section that references the data …","Create a <code>DebugLineStr</code> section that references the data in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This trait cannot be implemented if “read” feature is …","","Get the canonical frame address (CFA) recovery rule for …","Checked subtraction. Computes <code>self - other</code>.","Get a reference to this FDE’s CIE.","Parse the <code>CommonInformationEntry</code> at the given offset.","Parse the <code>CommonInformationEntry</code> at the given offset.","Get the offset of this FDE’s CIE.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A constant that is factored out of all advance location …","Return <code>true</code> if the given address is within this FDE, <code>false</code> …","Return <code>true</code> if the given <code>address</code> is within this row’s …","Convert a <code>Value</code> to the given <code>value_type</code>.","The base address for data relative pointers.","The data containing a single location description.","A constant that is factored out of certain offset …","Return the offset into the .debug_info section for this …","Return the <code>.debug_ranges</code> section.","Return the <code>.debug_rnglists</code> section.","","","","","","","","","","","","","","","","","","","","","","","A short description of the error.","Return the direct pointer value.","Perform a division operation.","Returns the ELF section name (if any) for this type when …","Returns the subrange of the section that is the …","The base addresses to use for pointers in the <code>.eh_frame</code> …","The base addresses to use for pointers in the <code>.eh_frame_hdr</code>…","Returns the address of the binary’s <code>.eh_frame</code> section.","Set the number of bytes remaining to zero.","","Return the encoding parameters for this CIE.","Return the encoding parameters for this set of entries.","The first address past the end of the range.","Get the end PC address where this row’s register rules …","Return the endianity of bytes that are read.","","Iterate over the <code>CommonInformationEntry</code>s and …","Iterate over the <code>CommonInformationEntry</code>s and …","Return the arange entries in this set.","A constant that gives the number of bytes of the CIE …","A constant that gives the number of bytes of the header and","A constant that gives the number of bytes of the header and","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform the <code>==</code> relational operation.","","","","Evaluate a DWARF expression.  This method should only ever …","Return the encoding of the addresses for this CIE’s FDEs.","Find the <code>FrameDescriptionEntry</code> for the given address.","Find the <code>FrameDescriptionEntry</code> for the given address.","Returns a parsed FDE for the given address, or …","Parse the <code>FrameDescriptionEntry</code> at the given offset.","Parse the <code>FrameDescriptionEntry</code> at the given offset.","Find the index of the first occurrence of the given byte. …","","Find the first occurrence of a byte in the slice, and …","Find <code>id</code> in the index hash table, and return the row index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a <code>ValueType</code> from the attributes of a base type …","Convert an i16 to an offset.","Convert a u16 to an offset.","Convert a u32 to an offset.","Convert a u64 to an offset.","Create a <code>Value</code> with the given <code>value_type</code> from a <code>u64</code> value.","Convert a u8 to an offset.","Perform the <code>&gt;=</code> relational operation.","Returns the address at the given <code>base</code> and <code>index</code>.","Returns the <code>.debug_loclists</code> offset at the given <code>base</code> and …","Returns the <code>.debug_rnglists</code> offset at the given <code>base</code> and …","Lookup a string from the <code>.debug_str</code> section by …","Lookup a string from the <code>.debug_line_str</code> section by …","Returns the <code>.debug_str</code> offset at the given <code>base</code> and <code>index</code>.","Perform the <code>&gt;</code> relational operation.","True if this CIE’s FDEs have a LSDA.","","","","","","Get the header at the given offset.","Iterate the sets of entries in the <code>.debug_aranges</code> section.","Returns the section id for this type.","","","","","","","","","","","","","","","Parse the index header.","Parse the index header.","The first address for which this entry has unwind …","Iterate over this CIE’s initial instructions.","Iterate over this FDE’s instructions.","Convert an <code>UnwindOffset&lt;T&gt;</code> into a <code>T</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the current row with the lifetime of the context.","","","Convert an offset to a u64.","Return true if the number of bytes remaining is zero.","Return true if the number of bytes remaining is zero.","","Return true if the piece is empty.","True if this CIE’s FDEs are trampolines for signal …","Return true if this FDE’s function is a trampoline for a …","Return an iterator that can walk the <code>.eh_frame_hdr</code> table.","Perform the `&lt;= relational operation.","Return the number of bytes remaining.","The number of bytes of instructions that this entry has …","","Return the length of this set of entries, including the …","Return the length of this arange.","Try to load the section using the given loader function.","Where this piece is to be found.","Iterate over the <code>LocationListEntry</code>s starting at the given …","Similar to <code>locations</code>, but with special handling for .dwo …","<em>Probably</em> returns a pointer to the FDE for the given …","Return the offset corresponding to the given <code>id</code> if it is …","Returns the <code>Reader</code> for this section.","","Call <code>Reader::lookup_offset_id</code> for each section, and return …","Call <code>Reader::lookup_offset_id</code> for each section, and return …","The address of this FDE’s language-specific data area …","Return the encoding of the LSDA address for this CIE’s …","Perform the `&lt; relational operation.","Perform a multiplication operation.","Perform the `!= relational operation.","Perform a negation operation.","Construct a new <code>DebugFrame</code> instance from the data in the …","Constructs a new <code>EhFrameHdr</code> instance from the data in the …","Construct a new <code>EhFrame</code> instance from the data in the …","Construct a new <code>UnwindTable</code> for the given …","Construct a new <code>EndianSlice</code> with the given slice and …","Construct a new <code>DebugAranges</code> instance from the data in the …","Construct a new <code>DebugCuIndex</code> instance from the data in the …","Construct a new <code>DebugTuIndex</code> instance from the data in the …","Construct a new <code>DebugLoc</code> instance from the data in the …","Construct a new <code>DebugLocLists</code> instance from the data in …","Construct a new <code>LocationLists</code> instance from the data in …","Construct a new <code>DebugRanges</code> instance from the data in the …","Construct a new <code>DebugRngLists</code> instance from the data in the","Construct a new <code>RangeLists</code> instance from the data in the …","Construct a new <code>DebugStr</code> instance from the data in the …","Construct a new <code>DebugLineStr</code> instance from the data in the …","Construct a new call frame unwinding context.","Create a new DWARF expression evaluator.","Yield the next entry in the <code>EhHdrTableIter</code>.","Advance the iterator to the next entry.","","Parse the next call frame instruction.","Advance the iterator to the next header.","Advance the iterator and return the next arange.","","Advance the iterator to the next location.","Advance the iterator to the next location.","Read the next operation in an expression.","Advance the iterator to the next range.","Advance the iterator to the next range.","Evaluate call frame instructions until the next row of the …","Perform a bitwise not operation.","Yield the nth entry in the <code>EhHdrTableIter</code>","Get the offset of this entry from the start of its …","Get the offset of this entry from the start of its …","Get the offset of this entry from the start of its …","Return the offset of this header within the <code>.debug_aranges</code> …","The base offset of the unit’s contribution to the …","Return the offset of this reader’s data relative to the …","Return the offset of the start of the slice relative to …","","Return the current byte offset of the iterator.","Return an identifier for the current reader offset.","","Return an iterator for the operations in the expression.","Perform a bitwise or operation.","Parses this <code>EhFrameHdr</code> to a <code>ParsedEhFrameHdr</code>.","Fully parse this FDE.","Parse a single DWARF expression operation.","Read a <code>Value</code> with the given <code>value_type</code> from a <code>Reader</code>.","","","Parse the <code>PartialFrameDescriptionEntry</code> at the given offset.","Parse the <code>PartialFrameDescriptionEntry</code> at the given offset.","Return the address of the personality routine handler for …","Return the address of the FDE’s function’s personality …","Return the encoding and address of the personality routine …","Return the pointer value, discarding indirectness …","Convert a <code>Pointer</code> to a section offset.","Take the given <code>start..end</code> range of the underlying slice …","Return the range.","The address range that this location is valid for.","Take the given <code>start..</code> range of the underlying slice and …","Take the given <code>..end</code> range of the underlying slice and …","Iterate over the <code>Range</code> list entries starting at the given …","Iterate over the raw <code>LocationListEntry</code>s starting at the …","Similar to <code>raw_locations</code>, but with special handling for …","Iterate over the <code>RawRngListEntry</code>ies starting at the given …","Read an address-sized integer, and return it as a <code>u64</code>.","Read an address-sized integer, and return it as a <code>u64</code>.","Read a f32.","Read a f32.","Read a f64.","Read a f64.","Read an i16.","Read an i16.","Read an i32.","Read an i32.","Read an i64.","Read an i64.","Read an i8.","Read an i8.","Read an initial length field.","Read an initial length field.","Parse a word-sized section length according to the DWARF …","Parse a word-sized section length according to the DWARF …","Read a null-terminated slice, and return it (excluding the …","Read a null-terminated slice, and return it (excluding the …","Parse a word-sized section offset according to the DWARF …","Parse a word-sized section offset according to the DWARF …","Parse a section offset of the given size.","Parse a section offset of the given size.","Read a signed LEB128 encoded integer.","Read a signed LEB128 encoded integer.","Read exactly <code>buf.len()</code> bytes into <code>buf</code>.","","Read a u16.","Read a u16.","Read a u32.","Read a u32.","Read a u64.","Read a u64.","Read a u8.","Read a u8.","Read a u8 array.","Read a u8 array.","Read an unsigned n-bytes integer u64.","Read an unsigned n-bytes integer u64.","Read an unsigned LEB128 encoded integer.","Read an unsigned LEB128 encoded integer.","Read an unsigned LEB128 encoded u16.","Read an unsigned LEB128 encoded u16.","Read an unsigned LEB128 encoded u32.","Read an unsigned LEB128 encoded u32.","Parse a word-sized integer according to the DWARF format.","Parse a word-sized integer according to the DWARF format.","Returns the <code>Reader</code> for this section.","","","","","","","","","","","","","","","Get the register recovery rule for the given register …","Iterate over all defined register <code>(number, rule)</code> pairs.","Reinterpret the bits in a <code>Value</code> as the given <code>value_type</code>.","Perform a remainder operation.","Resume the <code>Evaluation</code> with the provided <code>bytes</code>.  This will …","Resume the <code>Evaluation</code> with the provided <code>base_type</code>.  This …","Resume the <code>Evaluation</code> with the provided <code>cfa</code>.  This will …","Resume the <code>Evaluation</code> with the provided <code>entry_value</code>.  This …","Resume the <code>Evaluation</code> with the provided <code>frame_base</code>.  This …","Resume the <code>Evaluation</code> with the provided indexed <code>address</code>.  …","Resume the <code>Evaluation</code> with the provided memory <code>value</code>.  …","Resume the <code>Evaluation</code> with the provided <code>parameter_value</code>.  …","Resume the <code>Evaluation</code> with the provided <code>register</code> value.  …","Resume the <code>Evaluation</code> with the provided relocated <code>address</code>. …","Resume the <code>Evaluation</code> with the provided <code>value</code>.  This will …","An unsigned … constant that indicates which column in …","Return the table of unwind information for this FDE.","Returns the amount of args currently on the stack.","The address of the section containing the pointer.","The section kind.","Return the number of sections.","Returns the ELF section name for this type.","Return the section offsets and sizes for the given row …","Return the segment selector of this arange.","Return the segment size for this set of entries.","Set the size of a target address in bytes.","Set the size of a target address in bytes.","Replace the <code>.debug_ranges</code> section.","Set the <code>.eh_frame</code> section base address.","Set the <code>.eh_frame_hdr</code> section base address.","Set the <code>.got</code> section base address.","Set an initial value to be pushed on the DWARF expression …","Set the maximum number of iterations to be allowed by the …","Set the enclosing object’s address, as used by …","Set the size of a segment selector in bytes.","Set the <code>.text</code> section base address.","Set the vendor extensions to use.","Set the vendor extensions to use.","Perform a shift left operation.","Perform a logical shift right operation.","Perform an arithmetic shift right operation.","The size of the unit’s contribution to the section.","If given, the size of the piece in bits.  If <code>None</code>, there …","Discard the specified number of bytes.","","Skip a LEB128 encoded integer.","Skip a LEB128 encoded integer.","Return a reference to the raw slice.","Return the number of slots.","Split a reader in two.","","Split the slice in two at the given index, resulting in …","Get the starting PC address that this row applies to.","Perform a subtraction operation.","Retrieves the CFI binary search table, if there is one.","The base address for text relative pointers. This is …","Converts the slice to a string using <code>str::from_utf8</code>.","Convert a <code>Value</code> to a <code>u64</code>.","Set the number of bytes remaining to the specified lengtheturn the number of units.","Find the frame unwind information for the given address.","Find the frame unwind information for the given address.","Returns the frame unwind information for the given address,","Find the frame unwind information for the given address.","Get the result if this is an evaluation for a value.","Return the <code>ValueType</code> corresponding to this <code>Value</code>.","A version number (see Section 7.23). This number is …","Return the version.","Wrapping (modular) addition. Computes <code>self + other</code>.","Returns the XCOFF section name (if any) for this type when …","Perform a bitwise exclusive-or operation.","The target address.","The delta to be added to the current address.","The number of the register whose rule is being changed.","The DWARF expression.","The DWARF expression.","The DWARF expression.","The factored offset.","The factored offset.","The factored offset.","The factored offset.","The factored offset.","The factored offset.","The non-factored offset.","The non-factored offset.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The target register’s number.","The register to be reset.","The size of the arguments which have been pushed onto the …","The number of the register where the other register’s …","The offset from the register’s base value.","The register containing the base value.","The address of the value required.","The DIE of the base type or 0 to indicate the generic type","The DIE of the base type or 0 to indicate the generic type","The index of the address in the <code>.debug_addr</code> section, …","The register number.","Whether the address also needs to be relocated.","The size of the value required. This is guaranteed to be …","If not <code>None</code>, a target-specific address space value.","The address.","The byte offset into the value that the implicit pointer …","The register number.","The value.","The value.","The <code>.debug_info</code> offset of the value that this is an …","The offset to add.","The DIE of the base type or 0 to indicate the generic type","The DIE of the base type or 0 to indicate the generic type","The DIE of the base type.","The DIE of the base type.","The DIE of the base type.","The bit offset of this piece.  If <code>None</code>, then this piece …","The byte offset into the value that the implicit pointer …","The implicit value to use.","The expression to be evaluated.","The index, from the top of the stack, of the item to copy.","The index of the address in <code>.debug_addr</code>.","The index of the address in <code>.debug_addr</code>.","The index of the local.","The index of the global.","The index of the stack item. 0 is the bottom of the …","The offset to add.","The offset to add.","The DIE to use.","The DIE to use.","The register number.","The register number.","The size of the data to dereference.","The size of this piece in bits.","True if the dereference operation takes an address space …","The relative offset to the target bytecode.","The relative offset to the target bytecode.","The value to add.","The value to push.","The value to push.","The <code>.debug_info</code> offset of the value that this is an …","The value bytes.","base address","base address","Start of range. May be an address or an offset.","start of range","start of range","start of range","start of range","start of range","expression","expression","expression","expression","expression","expression","expression","End of range. May be an address or an offset.","end of range","end of range","end of range","length of range","length of range","base address","base address","Start of range. May be an address or an offset.","start of range","start of range","start of range","start of range","start of range","End of range. May be an address or an offset.","end of range","end of range","end of range","length of range","length of range"],"i":[37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,0,7,35,35,35,35,35,35,35,35,0,41,0,39,40,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,39,40,32,0,32,0,0,32,0,32,32,0,32,0,1,32,0,32,0,32,32,0,0,32,0,32,0,32,32,32,32,0,0,32,0,32,0,0,32,0,32,0,1,7,6,6,0,34,0,39,39,39,39,39,39,36,39,40,39,39,32,32,0,0,0,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,37,37,37,37,37,40,36,37,39,40,37,38,37,38,38,38,37,38,37,38,37,38,37,38,37,38,37,38,38,38,40,39,40,37,38,37,38,37,38,37,38,37,37,37,37,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,0,38,39,40,39,40,35,40,40,40,40,40,40,40,40,39,40,35,0,41,0,0,0,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,40,34,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,35,36,35,37,35,37,35,37,40,35,35,35,37,40,35,35,35,37,40,35,35,35,37,40,35,35,35,35,35,35,35,37,40,35,35,35,35,35,35,35,37,40,37,37,37,37,35,37,37,37,37,37,37,37,37,37,37,37,35,37,37,37,35,37,35,37,35,37,35,37,35,37,40,35,35,35,37,40,35,35,37,38,39,40,40,35,36,40,40,40,40,40,40,40,40,0,0,0,0,0,35,37,38,35,37,38,35,38,35,38,35,35,35,35,35,35,35,35,35,37,38,35,35,35,35,35,35,35,35,35,35,35,37,38,35,35,35,37,38,35,37,38,35,37,38,35,37,38,35,37,38,35,38,35,36,37,38,35,35,35,35,35,35,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,40,39,40,0,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,38,35,36,35,35,36,36,36,36,39,40,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,38,36,38,36,38,36,38,36,38,36,38,0,0,36,38,39,40,39,40,40,40,40,40,40,40,40,40,40,40,39,40,40,40,40,40,40,40,40,40,40,40,39,40,40,40,39,40,39,40,39,40,39,40,40,40,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,38,8,1,1,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,10,2,5,1,32,0,9,34,41,42,43,18,24,27,9,32,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,41,42,43,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,8,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,30,30,31,31,31,1,1,1,32,33,34,35,36,37,38,39,40,41,42,43,6,8,9,10,11,2,17,20,21,22,23,5,29,30,31,1,32,33,41,42,43,6,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,30,31,31,1,32,33,34,35,36,37,38,39,40,41,42,43,58,41,42,43,58,58,0,9,9,9,9,32,35,36,37,38,39,40,10,2,5,1,32,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,35,36,37,38,39,40,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,6,7,8,9,10,11,12,13,14,2,15,16,17,18,19,20,21,22,23,24,25,26,27,28,5,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,8,6,58,58,58,58,58,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,87,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,71,71,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,71,71,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,0,0,0,0,0,171,161,161,162,161,158,167,143,161,0,0,0,0,142,143,0,171,0,171,171,171,171,171,171,158,167,0,158,167,161,162,161,161,0,0,171,0,0,171,139,0,0,175,142,161,161,171,0,0,0,0,160,0,0,0,0,0,0,0,0,143,143,143,143,143,143,158,161,0,145,161,171,161,171,171,0,0,0,0,162,105,0,0,161,161,104,0,0,0,0,171,171,0,124,142,143,111,113,106,113,106,139,0,161,171,161,113,106,161,113,106,113,106,113,106,113,106,161,162,161,145,171,171,171,171,171,171,171,171,171,171,171,171,171,189,161,171,0,0,0,0,161,171,171,161,171,171,161,161,161,161,143,171,171,143,161,161,171,171,171,171,142,143,128,105,143,171,158,167,104,171,0,0,161,161,0,0,171,161,0,161,161,161,0,171,161,0,0,0,0,0,0,0,0,0,142,143,161,162,124,161,0,0,161,143,175,175,175,175,175,175,175,175,175,175,175,143,143,0,111,0,161,125,142,143,0,0,143,161,161,161,161,161,125,111,171,161,158,167,158,167,158,167,158,167,0,161,161,171,171,171,171,161,113,106,113,106,113,106,113,106,142,143,171,171,0,0,0,0,160,171,171,171,171,171,171,171,171,171,171,161,171,171,171,171,171,171,171,171,171,171,171,171,0,0,0,0,0,0,142,143,142,143,143,0,162,0,171,161,161,161,161,106,106,107,108,106,109,108,168,110,113,114,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,117,148,149,150,107,151,152,153,154,155,156,157,118,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,119,180,167,181,168,120,120,121,121,122,122,169,113,106,170,171,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,180,167,181,168,120,121,122,169,113,106,170,171,105,146,123,46,126,128,128,131,114,132,133,134,135,136,129,137,138,139,112,108,131,126,140,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,158,159,160,161,162,110,163,164,165,166,119,167,168,120,121,122,169,113,106,170,171,107,169,108,126,123,106,137,159,108,149,119,119,114,129,137,112,140,123,124,145,146,117,151,152,156,157,118,165,166,119,120,121,122,146,171,145,106,173,173,129,129,134,105,146,108,149,168,123,105,146,128,128,149,108,131,126,132,133,136,129,137,139,112,108,131,126,140,123,124,142,143,145,146,147,149,107,155,159,160,161,162,110,175,163,168,169,113,106,106,170,171,109,108,128,128,135,128,128,105,146,146,153,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,180,167,181,168,120,121,122,169,113,106,170,171,171,114,114,114,132,132,133,133,134,176,135,136,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,117,117,148,149,150,107,151,151,151,152,152,152,153,154,155,156,156,156,157,157,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,165,165,166,166,166,119,180,167,181,168,120,120,120,121,121,121,122,122,122,169,113,106,170,171,113,46,46,46,46,106,46,106,114,118,119,120,122,121,106,108,146,159,163,168,169,117,117,173,114,132,133,136,117,151,152,156,157,165,166,120,121,122,151,152,126,108,126,130,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,180,167,181,168,120,121,122,169,113,106,170,171,177,141,154,46,105,105,146,162,108,126,135,106,105,126,146,149,107,173,110,118,118,135,105,173,146,118,119,126,108,106,106,106,106,132,133,136,177,146,117,151,152,156,157,118,165,166,119,120,122,140,109,176,138,141,144,148,150,154,178,179,164,180,181,177,106,176,108,131,126,149,155,105,146,146,164,105,146,163,106,133,131,161,106,107,169,128,128,108,126,108,145,135,146,107,159,146,146,119,118,118,119,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,146,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,173,114,132,133,136,117,151,152,156,157,165,166,120,121,122,123,123,106,106,109,109,109,109,109,109,109,109,109,109,109,108,126,123,137,155,153,173,153,107,149,132,136,119,129,129,129,109,109,109,132,129,132,136,106,106,106,155,110,105,146,105,105,146,153,105,146,146,123,106,134,137,146,106,105,146,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,180,167,181,168,120,121,122,169,113,106,170,171,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,180,167,181,168,120,121,122,169,113,106,170,171,114,132,133,134,176,135,136,129,137,138,139,112,108,131,126,140,177,141,123,124,142,143,144,145,146,147,117,148,149,150,107,151,152,153,154,155,156,157,118,178,158,179,159,160,161,162,110,175,163,164,109,165,166,119,180,167,181,168,120,121,122,169,113,106,170,171,153,128,128,135,126,109,106,108,153,46,173,106,190,191,192,193,194,195,196,197,198,199,200,201,202,203,202,196,204,205,206,198,199,200,201,194,195,207,208,192,209,209,210,210,211,212,211,212,210,210,213,214,215,216,217,214,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,220,234,235,236,237,220,219,224,219,238,239,240,241,242,225,221,243,244,245,246,247,248,249,250,245,246,247,248,251,249,250,245,246,248,249,247,250,252,253,254,255,256,257,258,259,254,255,257,258,256,259],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[3,[[2,[-1]]]]],4],[[[1,[-1]]],[[3,[[5,[-1]]]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[7,7],[8,8],[9,9],[10,10],[[[11,[-1]]],[[11,[-1]]],4],[[[12,[-1]]],[[12,[-1]]],4],[[[13,[-1]]],[[13,[-1]]],4],[[[14,[-1]]],[[14,[-1]]],4],[[[2,[-1]]],[[2,[-1]]],4],[[[15,[-1]]],[[15,[-1]]],4],[[[16,[-1]]],[[16,[-1]]],4],[[[17,[-1]]],[[17,[-1]]],4],[[[18,[-1]]],[[18,[-1]]],4],[[[19,[-1]]],[[19,[-1]]],4],[[[20,[-1]]],[[20,[-1]]],4],[[[21,[-1]]],[[21,[-1]]],4],[[[22,[-1]]],[[22,[-1]]],4],[[[23,[-1]]],[[23,[-1]]],4],[[[24,[-1]]],[[24,[-1]]],4],[[[25,[-1]]],[[25,[-1]]],4],[[[26,[-1]]],[[26,[-1]]],4],[[[27,[-1]]],[[27,[-1]]],4],[[[28,[-1]]],[[28,[-1]]],4],[[[5,[-1]]],[[5,[-1]]],4],[29,29],[[[30,[-1]]],[[30,[-1]]],4],[[[31,[-1]]],[[31,[-1]]],4],[[[1,[-1]]],[[1,[-1]]],4],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[[10,10],44],[[[2,[-1]],[2,[-1]]],44,45],[[[5,[-1]],[5,[-1]]],44,45],[[[1,[-1]],[1,[-1]]],44,45],[[32,32],44],0,[[],9],[[],34],[[],41],[[],42],[[],43],[[8,34],[[18,[-1]]],46],[[8,34],[[24,[-1]]],46],[[8,34],[[27,[-1]]],46],0,[32,[[3,[47]]]],[[6,6],48],[[7,7],48],[[8,8],48],[[9,9],48],[[10,10],48],[[[11,[-1]],[11,[-1]]],48,49],[[[12,[-1]],[12,[-1]]],48,49],[[[13,[-1]],[13,[-1]]],48,49],[[[14,[-1]],[14,[-1]]],48,49],[[[2,[-1]],[2,[-1]]],48,49],[[[15,[-1]],[15,[-1]]],48,49],[[[16,[-1]],[16,[-1]]],48,49],[[[17,[-1]],[17,[-1]]],48,49],[[[18,[-1]],[18,[-1]]],48,49],[[[19,[-1]],[19,[-1]]],48,49],[[[20,[-1]],[20,[-1]]],48,49],[[[21,[-1]],[21,[-1]]],48,49],[[[22,[-1]],[22,[-1]]],48,49],[[[23,[-1]],[23,[-1]]],48,49],[[[24,[-1]],[24,[-1]]],48,49],[[[25,[-1]],[25,[-1]]],48,49],[[[26,[-1]],[26,[-1]]],48,49],[[[27,[-1]],[27,[-1]]],48,49],[[[28,[-1]],[28,[-1]]],48,49],[[[5,[-1]],[5,[-1]]],48,49],[[29,29],48],[[[30,[-1]],[30,[-1]]],48,49],[[[31,[-1]],[31,[-1]]],48,49],[[[1,[-1]],[1,[-1]]],48,49],[[32,32],48],[[33,33],48],[[34,34],48],[[41,41],48],[[42,42],48],[[43,43],48],[[6,50],51],[[7,50],51],[[8,50],51],[[9,50],51],[[10,50],51],[[[11,[-1]],50],51,52],[[[12,[-1]],50],51,52],[[[13,[-1]],50],51,52],[[[14,[-1]],50],51,52],[[[2,[-1]],50],51,52],[[[15,[-1]],50],51,52],[[[16,[-1]],50],51,52],[[[17,[-1]],50],51,52],[[[18,[-1]],50],51,52],[[[19,[-1]],50],51,52],[[[20,[-1]],50],51,52],[[[21,[-1]],50],51,52],[[[22,[-1]],50],51,52],[[[23,[-1]],50],51,52],[[[24,[-1]],50],51,52],[[[25,[-1]],50],51,52],[[[26,[-1]],50],51,52],[[[27,[-1]],50],51,52],[[[28,[-1]],50],51,52],[[[5,[-1]],50],51,52],[[29,50],51],[[[30,[-1]],50],51,52],[[[31,[-1]],50],51,52],[[[1,[-1]],50],51,52],[[32,50],51],[[33,50],51],[[34,50],51],[[35,50],51],[[36,50],51],[[37,50],51],[[38,50],51],[[39,50],51],[[40,50],51],[[41,50],51],[[42,50],51],[[43,50],51],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[30,[-1]]],[]],[-1,-1,[]],[53,-1,[]],[-1,-1,[]],[53,-1,[]],[-1,[[31,[-1]]],[]],[[[2,[-1]]],[[1,[-1]]],[]],[[[5,[-1]]],[[1,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[6,-1],54,55],[[8,-1],54,55],[[9,-1],54,55],[[10,-1],54,55],[[[11,[-1]],-2],54,56,55],[[[2,[-1]],-2],54,56,55],[[[17,[-1]],-2],54,56,55],[[[20,[-1]],-2],54,56,55],[[[21,[-1]],-2],54,56,55],[[[22,[-1]],-2],54,56,55],[[[23,[-1]],-2],54,56,55],[[[5,[-1]],-2],54,56,55],[[29,-1],54,55],[[[30,[-1]],-2],54,56,55],[[[31,[-1]],-2],54,56,55],[[[1,[-1]],-2],54,56,55],[[32,-1],54,55],[[33,-1],54,55],[[41,-1],54,55],[[42,-1],54,55],[[43,-1],54,55],[6,57],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1]]],-1,46],[-1,-2,[],[]],[[[31,[-1]]],-1,46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,48],[41,48],[42,48],[43,48],[58,48],[58,48],0,0,0,0,0,[32,47],[47,[[3,[10]]]],[47,[[3,[10]]]],[47,[[3,[10]]]],[47,[[3,[10]]]],[47,[[3,[10]]]],[47,[[3,[10]]]],[[10,10],[[3,[44]]]],[[[2,[-1]],[2,[-1]]],[[3,[44]]],59],[[[5,[-1]],[5,[-1]]],[[3,[44]]],59],[[[1,[-1]],[1,[-1]]],[[3,[44]]],59],[[32,32],[[3,[44]]]],0,[[58,[60,[57]]],61],[[58,[60,[57]]],61],[[58,[60,[57]]],62],[[58,[60,[57]]],62],[[58,[60,[57]]],63],[[58,[60,[57]]],63],[[58,[60,[57]]],64],[[58,[60,[57]]],64],[[58,[60,[57]]],65],[[58,[60,[57]]],65],[[58,[60,[57]]],66],[[58,[60,[57]]],66],[[58,[60,[57]]],67],[[58,[60,[57]]],67],[[58,[60,[57]]],68],[[58,[60,[57]]],68],[[58,[60,[57]]],68],[[58,[60,[57]]],68],[10,[[3,[47]]]],[10,[[3,[47]]]],[10,[[3,[47]]]],[10,[[3,[47]]]],[10,[[3,[47]]]],[10,[[3,[47]]]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],0,[6,57],[[58,[60,[57]],66],54],[[58,[60,[57]],66],54],[[58,[60,[57]],67],54],[[58,[60,[57]],67],54],[[58,[60,[57]],68],54],[[58,[60,[57]],68],54],[32,[[3,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[71,71],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[71,71],[[72,72],44],[[73,73],44],[[74,74],44],[[75,75],44],[[76,76],44],[[77,77],44],[[78,78],44],[[79,79],44],[[80,80],44],[[81,81],44],[[82,82],44],[[83,83],44],[[84,84],44],[[85,85],44],[[86,86],44],[[87,87],44],[[88,88],44],[[89,89],44],[[90,90],44],[[91,91],44],[[92,92],44],[[93,93],44],[[94,94],44],[[95,95],44],[[96,96],44],[[97,97],44],[[98,98],44],[[99,99],44],[[100,100],44],[[101,101],44],[[71,71],44],[87,[[3,[102]]]],[[72,72],48],[[73,73],48],[[74,74],48],[[75,75],48],[[76,76],48],[[77,77],48],[[78,78],48],[[79,79],48],[[80,80],48],[[81,81],48],[[82,82],48],[[83,83],48],[[84,84],48],[[85,85],48],[[86,86],48],[[87,87],48],[[88,88],48],[[89,89],48],[[90,90],48],[[91,91],48],[[92,92],48],[[93,93],48],[[94,94],48],[[95,95],48],[[96,96],48],[[97,97],48],[[98,98],48],[[99,99],48],[[100,100],48],[[101,101],48],[[71,71],48],[[72,50],51],[[72,50],[[69,[54,103]]]],[[73,50],[[69,[54,103]]]],[[73,50],51],[[74,50],51],[[74,50],[[69,[54,103]]]],[[75,50],[[69,[54,103]]]],[[75,50],51],[[76,50],[[69,[54,103]]]],[[76,50],51],[[77,50],[[69,[54,103]]]],[[77,50],51],[[78,50],51],[[78,50],[[69,[54,103]]]],[[79,50],51],[[79,50],[[69,[54,103]]]],[[80,50],51],[[80,50],[[69,[54,103]]]],[[81,50],[[69,[54,103]]]],[[81,50],51],[[82,50],[[69,[54,103]]]],[[82,50],51],[[83,50],51],[[83,50],[[69,[54,103]]]],[[84,50],51],[[84,50],[[69,[54,103]]]],[[85,50],[[69,[54,103]]]],[[85,50],51],[[86,50],[[69,[54,103]]]],[[86,50],51],[[87,50],[[69,[54,103]]]],[[87,50],51],[[88,50],[[69,[54,103]]]],[[88,50],51],[[89,50],51],[[89,50],[[69,[54,103]]]],[[90,50],[[69,[54,103]]]],[[90,50],51],[[91,50],[[69,[54,103]]]],[[91,50],51],[[92,50],[[69,[54,103]]]],[[92,50],51],[[93,50],51],[[93,50],[[69,[54,103]]]],[[94,50],51],[[94,50],[[69,[54,103]]]],[[95,50],[[69,[54,103]]]],[[95,50],51],[[96,50],51],[[96,50],[[69,[54,103]]]],[[97,50],[[69,[54,103]]]],[[97,50],51],[[98,50],51],[[98,50],[[69,[54,103]]]],[[99,50],[[69,[54,103]]]],[[99,50],51],[[100,50],51],[[100,50],[[69,[54,103]]]],[[101,50],51],[[101,50],[[69,[54,103]]]],[[71,50],51],[[71,50],[[69,[54,103]]]],[71,71],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[72,-1],54,55],[[73,-1],54,55],[[74,-1],54,55],[[75,-1],54,55],[[76,-1],54,55],[[77,-1],54,55],[[78,-1],54,55],[[79,-1],54,55],[[80,-1],54,55],[[81,-1],54,55],[[82,-1],54,55],[[83,-1],54,55],[[84,-1],54,55],[[85,-1],54,55],[[86,-1],54,55],[[87,-1],54,55],[[88,-1],54,55],[[89,-1],54,55],[[90,-1],54,55],[[91,-1],54,55],[[92,-1],54,55],[[93,-1],54,55],[[94,-1],54,55],[[95,-1],54,55],[[96,-1],54,55],[[97,-1],54,55],[[98,-1],54,55],[[99,-1],54,55],[[100,-1],54,55],[[101,-1],54,55],[[71,-1],54,55],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,48],[71,48],[71,48],[[72,72],[[3,[44]]]],[[73,73],[[3,[44]]]],[[74,74],[[3,[44]]]],[[75,75],[[3,[44]]]],[[76,76],[[3,[44]]]],[[77,77],[[3,[44]]]],[[78,78],[[3,[44]]]],[[79,79],[[3,[44]]]],[[80,80],[[3,[44]]]],[[81,81],[[3,[44]]]],[[82,82],[[3,[44]]]],[[83,83],[[3,[44]]]],[[84,84],[[3,[44]]]],[[85,85],[[3,[44]]]],[[86,86],[[3,[44]]]],[[87,87],[[3,[44]]]],[[88,88],[[3,[44]]]],[[89,89],[[3,[44]]]],[[90,90],[[3,[44]]]],[[91,91],[[3,[44]]]],[[92,92],[[3,[44]]]],[[93,93],[[3,[44]]]],[[94,94],[[3,[44]]]],[[95,95],[[3,[44]]]],[[96,96],[[3,[44]]]],[[97,97],[[3,[44]]]],[[98,98],[[3,[44]]]],[[99,99],[[3,[44]]]],[[100,100],[[3,[44]]]],[[101,101],[[3,[44]]]],[[71,71],[[3,[44]]]],[72,[[3,[47]]]],[73,[[3,[47]]]],[74,[[3,[47]]]],[75,[[3,[47]]]],[76,[[3,[47]]]],[77,[[3,[47]]]],[78,[[3,[47]]]],[79,[[3,[47]]]],[80,[[3,[47]]]],[81,[[3,[47]]]],[82,[[3,[47]]]],[83,[[3,[47]]]],[84,[[3,[47]]]],[85,[[3,[47]]]],[86,[[3,[47]]]],[87,[[3,[47]]]],[88,[[3,[47]]]],[89,[[3,[47]]]],[90,[[3,[47]]]],[91,[[3,[47]]]],[92,[[3,[47]]]],[93,[[3,[47]]]],[94,[[3,[47]]]],[95,[[3,[47]]]],[96,[[3,[47]]]],[97,[[3,[47]]]],[98,[[3,[47]]]],[99,[[3,[47]]]],[100,[[3,[47]]]],[101,[[3,[47]]]],[71,[[3,[47]]]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],0,[-1,[[104,[65]]],105],[-1,[[104,[54]]],105],[-1,[[104,[66]]],105],[-1,[[104,[68]]],105],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[106,68],[[104,[106]]]],[[106,106,68],[[104,[106]]]],[107,68],[[[108,[-1]]],57,105],[[106,106,68],[[104,[106]]]],[[[109,[-1,-2]]],[[60,[[110,[-1]]]]],105,[[111,[-1]]]],[[[108,[-1]]],[[3,[112]]],105],0,0,[[113,68],67],[-1,-2,[],[]],[[[114,[-1]],-3],[[114,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[117,[-1]],-3],[[117,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[118,[-1]],-3],[[118,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[119,[-1]],-3],[[119,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[120,[-1]],-3],[[120,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[-1,-2,[],[]],[[[121,[-1]],-3],[[121,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[[[122,[-1]],-3],[[122,[-2]]],[],[],[[116,[-1],[[115,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[123,[-1,-2]]],[[124,[-1]]],105,[[125,[-1]]]],[[46,46],[[3,[46]]]],[[[126,[-1]]],[[108,[-1]]],105],[[[128,[],[[127,[-1]]]],129,-1],[[104,[[108,[-2]]]]],130,105],[[[128,[],[[127,[-1]]]],129,-1],[[104,[[108,[-2]]]]],130,105],[[[131,[-2,-1]]],[],105,[[128,[-1]]]],[[[114,[-1]]],[[114,[-1]]],4],[[[132,[-1]]],[[132,[-1]]],[4,105]],[[[133,[-1]]],[[133,[-1]]],[4,105]],[[[134,[-1]]],[[134,[-1]]],[4,105]],[[[135,[-1]]],[[135,[-1]]],[4,105]],[[[136,[-1]]],[[136,[-1]]],[4,105]],[129,129],[137,137],[[[138,[-2,-1]]],[[138,[-2,-1]]],[105,4],[[128,[-1]],4]],[[[139,[-2,-1]]],[[139,[-2,-1]]],[105,4],[[128,[-1]],4]],[112,112],[[[108,[-2,-1]]],[[108,[-2,-1]]],[46,4],[[105,[],[[127,[-1]]]],4]],[[[131,[-2,-1]]],[[131,[-2,-1]]],[105,4],[[128,[-1]],4]],[[[126,[-2,-1]]],[[126,[-2,-1]]],[46,4],[[105,[],[[127,[-1]]]],4]],[[[140,[-1,-2]]],[[140,[-1,-2]]],[4,105],[4,[125,[-1]]]],[[[141,[-1]]],[[141,[-1]]],[105,4]],[[[123,[-1,-2]]],[[123,[-1,-2]]],105,[[125,[-1]]]],[[[124,[-1]]],[[124,[-1]]],[4,105]],[[[142,[-1]]],[[142,[-1]]],[4,105]],[[[143,[-1]]],[[143,[-1]]],[4,105]],[[[144,[-1]]],[[144,[-1]]],[4,105]],[145,145],[[[146,[-1]]],[[146,[-1]]],[58,4]],[147,147],[[[117,[-1]]],[[117,[-1]]],4],[[[148,[-1]]],[[148,[-1]]],[4,105]],[[[149,[-2,-1]]],[[149,[-2,-1]]],[46,4],[[105,[],[[127,[-1]]]],4]],[[[150,[-1]]],[[150,[-1]]],[4,105]],[107,107],[[[151,[-1]]],[[151,[-1]]],4],[[[152,[-1]]],[[152,[-1]]],4],[[[153,[-1]]],[[153,[-1]]],[4,105]],[[[154,[-1]]],[[154,[-1]]],[4,105]],[155,155],[[[156,[-1]]],[[156,[-1]]],4],[[[157,[-1]]],[[157,[-1]]],4],[[[118,[-1]]],[[118,[-1]]],4],[[[158,[-1]]],[[158,[-1]]],[4,105]],[[[159,[-1]]],[[159,[-1]]],[4,105]],[[[160,[-1]]],[[160,[-1]]],4],[[[161,[-2,-1]]],[[161,[-2,-1]]],[46,4],[[105,[],[[127,[-1]]]],4]],[[[162,[-2,-1]]],[[162,[-2,-1]]],[46,4],[[105,[],[[127,[-1]]]],4]],[[[110,[-2,-1]]],[[110,[-2,-1]]],[46,4],[[105,[],[[127,[-1]]]],4]],[[[163,[-1]]],[[163,[-1]]],[4,105]],[[[164,[-1]]],[[164,[-1]]],[4,105]],[[[165,[-1]]],[[165,[-1]]],4],[[[166,[-1]]],[[166,[-1]]],4],[[[119,[-1]]],[[119,[-1]]],4],[[[167,[-1]]],[[167,[-1]]],4],[168,168],[[[120,[-1]]],[[120,[-1]]],4],[[[121,[-1]]],[[121,[-1]]],4],[[[122,[-1]]],[[122,[-1]]],4],[[[169,[-1]]],[[169,[-1]]],4],[113,113],[106,106],[170,170],[171,171],[[107,107],44],[[[169,[-1]],[169,[-1]]],44,45],[[[108,[-1]]],68,105],[[[126,[-1]],68],48,105],[[[123,[-1,-2]],68],48,105,[[125,[-1]]]],[[106,113,68],[[104,[106]]]],0,0,[[[108,[-1]]],65,105],[[[149,[-2,-1]]],[[2,[-1]]],46,[[105,[],[[127,[-1]]]]]],[[[119,[-1]]],[[165,[-1]]],[]],[[[119,[-1]]],[[166,[-1]]],[]],[[],[[114,[-1]]],172],[[],129],[[],137],[[],112],[[],[[140,[-1,-2]]],105,[[125,[-1]]]],[[],[[123,[-1,-2]]],105,[[125,[-1]]]],[[],[[124,[-1]]],105],[[],145],[[],[[146,[-1]]],[58,172]],[[],[[117,[-1]]],172],[[],[[151,[-1]]],172],[[],[[152,[-1]]],172],[[],[[156,[-1]]],172],[[],[[157,[-1]]],172],[[],[[118,[-1]]],172],[[],[[165,[-1]]],172],[[],[[166,[-1]]],172],[[],[[119,[-1]]],172],[[],[[120,[-1]]],172],[[],[[121,[-1]]],172],[[],[[122,[-1]]],172],[[[146,[-1]]],-2,58,[]],[171,47],[145,[[104,[68]]]],[[106,106,68],[[104,[106]]]],[[],[[3,[47]]]],[[173,67,67],[[104,[173]]]],0,0,[[[134,[-1]]],145,105],[[[105,[],[[174,[-1]],[127,[-2]]]]],54,58,46],[[[146,[-1]]],54,58],[[[108,[-1]]],8,105],[[[149,[-2,-1]]],8,46,[[105,[],[[127,[-1]]]]]],0,[[[123,[-1,-2]]],68,105,[[125,[-1]]]],[[[105,[],[[174,[-1]],[127,[-2]]]]],-1,58,46],[[[146,[-1]]],-1,58],[[[128,[],[[127,[-1]]]],129],[[138,[[128,[],[[127,[-1]]]],-2]]],130,105],[[[128,[],[[127,[-1]]]],129],[[138,[[128,[],[[127,[-1]]]],-2]]],130,105],[[[149,[-2,-1]]],[[150,[-2]]],46,[[105,[],[[127,[-1]]]]]],[[[108,[-1]]],[],105],[[[131,[-2,-1]]],[],105,[[128,[-1]]]],[[[126,[-1]]],[],105],[[[132,[-1]],[132,[-1]]],48,[49,105]],[[[133,[-1]],[133,[-1]]],48,[49,105]],[[[136,[-1]],[136,[-1]]],48,[49,105]],[[129,129],48],[[137,137],48],[[[139,[-2,-1]],[139,[-2,-1]]],48,[105,49],[[128,[-1]],49]],[[112,112],48],[[[108,[-2,-1]],[108,[-2,-1]]],48,[46,49],[[105,[],[[127,[-1]]]],49]],[[[131,[-2,-1]],[131,[-2,-1]]],48,[105,49],[[128,[-1]],49]],[[[126,[-2,-1]],[126,[-2,-1]]],48,[46,49],[[105,[],[[127,[-1]]]],49]],[[[140,[-1,-2]],[140,[-1,-2]]],48,[49,105],[49,[125,[-1]]]],[[[123,[-1,-2]],[123,[-1,-2]]],48,[49,105],[49,[125,[-1]]]],[[[124,[-1]],[124,[-1]]],48,[49,105]],[[[142,[-1]],[142,[-1]]],48,[49,105]],[[[143,[-1]],[143,[-1]]],48,[49,105]],[[145,145],48],[[[146,[-1]],[146,[-1]]],48,[58,49]],[[147,147],48],[[[149,[-2,-1]],[149,[-2,-1]]],48,[46,49],[[105,[],[[127,[-1]]]],49]],[[107,107],48],[[155,155],48],[[[159,[-1]],[159,[-1]]],48,[49,105]],[[[160,[-1]],[160,[-1]]],48,49],[[[161,[-2,-1]],[161,[-2,-1]]],48,[46,49],[[105,[],[[127,[-1]]]],49]],[[[162,[-2,-1]],[162,[-2,-1]]],48,[46,49],[[105,[],[[127,[-1]]]],49]],[[[110,[-2,-1]],[110,[-2,-1]]],48,[46,49],[[105,[],[[127,[-1]]]],49]],[[[175,[-1]],[175,[-1]]],48,[49,105]],[[[163,[-1]],[163,[-1]]],48,[49,105]],[[168,168],48],[[[169,[-1]],[169,[-1]]],48,49],[[113,113],48],[[106,106,68],[[104,[106]]]],[[106,106],48],[[170,170],48],[[171,171],48],[[[109,[-1,-2]]],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[108,[-1]]],[[3,[71]]],105],[[[128,[],[[127,[-1]]]],129,68,-3],[[104,[[126,[-2]]]]],130,105,[[116,[[128,[],[[127,[-1]]]],129,-1],[[115,[[104,[[108,[-2]]]]]]]]]],[[[128,[],[[127,[-1]]]],129,68,-3],[[104,[[126,[-2]]]]],130,105,[[116,[[128,[],[[127,[-1]]]],129,-1],[[115,[[104,[[108,[-2]]]]]]]]]],[[[135,[-1]],[136,[-1]],129,68,-2],[[104,[[126,[-1]]]]],105,[[116,[[136,[-1]],129,31],[[115,[[104,[[108,[-1]]]]]]]]]],[[[128,[],[[127,[-1]]]],129,-1,-3],[[104,[[126,[-2]]]]],130,105,[[116,[[128,[],[[127,[-1]]]],129,-1],[[115,[[104,[[108,[-2]]]]]]]]]],[[[128,[],[[127,[-1]]]],129,-1,-3],[[104,[[126,[-2]]]]],130,105,[[116,[[128,[],[[127,[-1]]]],129,-1],[[115,[[104,[[108,[-2]]]]]]]]]],[[[105,[],[[174,[-1]],[127,[-2]]]],57],[[104,[-2]]],58,46],[[[146,[-1]],57],[[104,[102]]],58],[[[146,[-1]],57],[[3,[102]]],58],[[[153,[-1]],68],[[3,[67]]],105],[[[114,[-1]],50],51,52],[[[132,[-1]],50],51,[52,105]],[[[133,[-1]],50],51,[52,105]],[[[134,[-1]],50],51,[52,105]],[[[176,[-1]],50],51,[52,105]],[[[135,[-1]],50],51,[52,105]],[[[136,[-1]],50],51,[52,105]],[[129,50],51],[[137,50],51],[[[138,[-2,-1]],50],51,[105,52],[[128,[-1]],52]],[[[139,[-2,-1]],50],51,[105,52],[[128,[-1]],52]],[[112,50],51],[[[108,[-2,-1]],50],51,[46,52],[[105,[],[[127,[-1]]]],52]],[[[131,[-2,-1]],50],51,[105,52],[[128,[-1]],52]],[[[126,[-2,-1]],50],51,[46,52],[[105,[],[[127,[-1]]]],52]],[[[140,[-1,-2]],50],51,105,[[125,[-1]]]],[[[177,[-1,-2]],50],51,[52,105],[52,[125,[-1]]]],[[[141,[-1]],50],51,[105,52]],[[[123,[-1,-2]],50],51,105,[[125,[-1]]]],[[[124,[-1]],50],51,[52,105]],[[[142,[-1]],50],51,[52,105]],[[[143,[-1]],50],51,[52,105]],[[[144,[-1]],50],51,[52,105]],[[145,50],51],[[[146,[-1]],50],[[69,[54,103]]],58],[[147,50],51],[[[117,[-1]],50],51,52],[[[148,[-1]],50],51,[52,105]],[[[149,[-2,-1]],50],51,[46,52],[[105,[],[[127,[-1]]]],52]],[[[150,[-1]],50],51,[52,105]],[[107,50],51],[[[151,[-1]],50],51,52],[[[152,[-1]],50],51,52],[[[153,[-1]],50],51,[52,105]],[[[154,[-1]],50],51,[52,105]],[[155,50],51],[[[156,[-1]],50],51,52],[[[157,[-1]],50],51,52],[[[118,[-1]],50],51,52],[[[178,[-1]],50],51,[52,105]],[[[158,[-1]],50],51,[52,105]],[[[179,[-1]],50],51,[52,105]],[[[159,[-1]],50],51,[52,105]],[[[160,[-1]],50],51,52],[[[161,[-2,-1]],50],51,[46,52],[[105,[],[[127,[-1]]]],52]],[[[162,[-2,-1]],50],51,[46,52],[[105,[],[[127,[-1]]]],52]],[[[110,[-2,-1]],50],51,[46,52],[[105,[],[[127,[-1]]]],52]],[[[175,[-1]],50],51,[52,105]],[[[163,[-1]],50],51,[52,105]],[[[164,[-1]],50],51,[52,105]],[[[109,[-1,-2]],50],51,[52,105],[52,[111,[-1]]]],[[[165,[-1]],50],51,52],[[[166,[-1]],50],51,52],[[[119,[-1]],50],51,52],[[[180,[-1]],50],51,[52,105]],[[[167,[-1]],50],51,52],[[[181,[-1]],50],51,[52,105]],[[168,50],51],[[[120,[-1]],50],51,52],[[[121,[-1]],50],51,52],[[[122,[-1]],50],51,52],[[[169,[-1]],50],51,52],[[113,50],51],[[106,50],51],[[170,50],51],[[171,50],[[69,[54,103]]]],[[171,50],51],[-1,-1,[]],[53,-1,[]],[-1,[[114,[-1]]],[]],[-1,-1,[]],[-1,[[132,[-1]]],105],[-1,-1,[]],[-1,[[133,[-1]]],105],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[136,[-1]]],105],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[117,[-1]]],[]],[53,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[151,[-1]]],[]],[53,-1,[]],[-1,-1,[]],[-1,[[152,[-1]]],[]],[-1,-1,[]],[53,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,-1,[]],[-1,-1,[]],[-1,[[156,[-1]]],[]],[53,-1,[]],[-1,[[157,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,-1,[]],[-1,[[165,[-1]]],[]],[-1,-1,[]],[-1,[[166,[-1]]],[]],[53,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,-1,[]],[-1,[[120,[-1]]],[]],[-1,-1,[]],[-1,[[121,[-1]]],[]],[-1,-1,[]],[53,-1,[]],[-1,[[122,[-1]]],[]],[-1,-1,[]],[53,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[80,68],[[3,[113]]]],[63,46],[66,46],[67,46],[68,[[104,[46]]]],[[113,68],[[104,[106]]]],[57,46],[[106,106,68],[[104,[106]]]],[[[114,[-1]],57,12,13],[[104,[68]]],105],[[[118,[-1]],8,18,19],[[104,[17]]],105],[[[119,[-1]],8,24,25],[[104,[23]]],105],[[[120,[-1]],26],[[104,[-1]]],105],[[[122,[-1]],16],[[104,[-1]]],105],[[[121,[-1]],6,27,28],[[104,[26]]],105],[[106,106,68],[[104,[106]]]],[[[108,[-1]]],48,105],[[[146,[-1]],-2],54,[58,56],55],[[[159,[-1]],-2],54,[56,105],55],[[[163,[-1]],-2],54,[56,105],55],[[168,-1],54,55],[[[169,[-1]],-2],54,56,55],[[[117,[-1]],14],[[104,[[149,[-1]]]]],105],[[[117,[-1]]],[[148,[-1]]],105],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[151,[-1]]],[[104,[[153,[-1]]]]],105],[[[152,[-1]]],[[104,[[153,[-1]]]]],105],[[[126,[-1]]],68,105],[[[108,[-1]],-2,129],[[144,[-1]]],105,[[128,[-1]]]],[[[126,[-1]],-2,129],[[144,[-1]]],105,[[128,[-1]]]],[130,-1,46],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[177,[-1,-2]]],[[3,[[123,[-1,-2]]]]],105,[[125,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[46,68],[[[105,[],[[174,[-1]],[127,[-2]]]]],48,58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],48,58,46],[[[146,[-1]]],48,58],[[[162,[-2,-1]]],48,46,[[105,[],[[127,[-1]]]]]],[[[108,[-1]]],48,105],[[[126,[-1]]],48,105],[[[135,[-1]],129],[[176,[-1]]],105],[[106,106,68],[[104,[106]]]],[[[105,[],[[174,[-1]],[127,[-2]]]]],-2,58,46],[[[126,[-1]]],68,105],[[[146,[-1]]],102,58],[[[149,[-2,-1]]],-1,46,[[105,[],[[127,[-1]]]]]],[107,68],[-3,[[69,[173,-2]]],[],[],[[182,[32],[[115,[[69,[-1,-2]]]]]]]],0,[[[118,[-1]],17,8,68,[114,[-1]],12],[[104,[[179,[-1]]]]],105],[[[118,[-1]],17,8,68,[114,[-1]],12],[[104,[[179,[-1]]]]],105],[[[135,[-1]],68,129],[[104,[145]]],105],[[[105,[],[[174,[-1]],[127,[-2]]]],147],[[3,[-2]]],58,46],[[173,147],[[3,[[54,[32]]]]]],[[[146,[-1]],147],[[3,[-2]]],58,[]],[[[118,[-1]],147],[[3,[[54,[32]]]]],105],[[[119,[-1]],147],[[3,[[54,[32]]]]],105],[[[126,[-1]]],[[3,[145]]],105],[[[108,[-1]]],[[3,[71]]],105],[[106,106,68],[[104,[106]]]],[[106,106,68],[[104,[106]]]],[[106,106,68],[[104,[106]]]],[[106,68],[[104,[106]]]],[[[60,[57]],-1],[[132,[[146,[-1]]]]],58],[[[60,[57]],-1],[[133,[[146,[-1]]]]],58],[[[60,[57]],-1],[[136,[[146,[-1]]]]],58],[[-2,129,[140,[-1,-3]],[126,[-1]]],[[104,[[177,[-1,-3]]]]],105,[[128,[-1]]],[[125,[-1]]]],[[[60,[57]],-1],[[146,[-1]]],58],[[[60,[57]],-1],[[117,[[146,[-1]]]]],58],[[[60,[57]],-1],[[151,[[146,[-1]]]]],58],[[[60,[57]],-1],[[152,[[146,[-1]]]]],58],[[[60,[57]],-1],[[156,[[146,[-1]]]]],58],[[[60,[57]],-1],[[157,[[146,[-1]]]]],58],[[[156,[-1]],[157,[-1]]],[[118,[-1]]],[]],[[[60,[57]],-1],[[165,[[146,[-1]]]]],58],[[[60,[57]],-1],[[166,[[146,[-1]]]]],58],[[[165,[-1]],[166,[-1]]],[[119,[-1]]],[]],[[[60,[57]],-1],[[120,[[146,[-1]]]]],58],[[[60,[57]],-1],[[122,[[146,[-1]]]]],58],[[],[[140,[-1,-2]]],105,[[125,[-1]]]],[[-1,8],[[109,[-1,-2]]],105,[[111,[-1]]]],[[[176,[-1]]],[[104,[[3,[[54,[145,145]]]]]]],105],[[[138,[-2,-1]]],[[104,[[3,[[139,[-2,-1]]]]]]],105,[[128,[-1]]]],[[[141,[-1]]],[[3,[-2]]],105,[]],[[[144,[-1]]],[[104,[[3,[[143,[-1]]]]]]],105],[[[148,[-1]]],[[104,[[3,[[149,[-1]]]]]]],105],[[[150,[-1]]],[[104,[[3,[107]]]]],105],[[[154,[-1]]],[[3,[155]]],105],[[[178,[-1]]],[[104,[[3,[[158,[-1]]]]]]],105],[[[179,[-1]]],[[104,[[3,[[159,[-1]]]]]]],105],[[[164,[-1]]],[[104,[[3,[[161,[-1]]]]]]],105],[[[180,[-1]]],[[104,[[3,[167]]]]],105],[[[181,[-1]]],[[104,[[3,[168]]]]],105],[[[177,[-1,-2]]],[[104,[[3,[[123,[-1,-2]]]]]]],105,[[125,[-1]]]],[[106,68],[[104,[106]]]],[[[176,[-1]],102],[[104,[[3,[[54,[145,145]]]]]]],105],[[[108,[-1]]],[],105],[[[131,[-2,-1]]],[],105,[[128,[-1]]]],[[[126,[-1]]],[],105],[[[149,[-2,-1]]],[[14,[-1]]],46,[[105,[],[[127,[-1]]]]]],0,[[[105,[],[[174,[-1]],[127,[-2]]]],[105,[],[[174,[-1]],[127,[-2]]]]],-2,58,46],[[[146,[-1]],[146,[-1]]],102,58],[[[146,[-1]],[146,[-1]]],102,58],[[[164,[-1]],[163,[-1]]],[],105],[[[105,[],[[174,[-1]],[127,[-2]]]]],147,58,46],[[[146,[-1]]],147,58],[[[163,[-1]],8],[[164,[-1]]],105],[[106,106,68],[[104,[106]]]],[[[133,[-1]],129,57],[[104,[[134,[-1]]]]],105],[[[131,[-2,-1]],-3],[[104,[[126,[-1]]]]],105,[[128,[-1]]],[[116,[-2,129],[[115,[[104,[[108,[-1]]]]]]]]]],[[-2,8],[[104,[[161,[-2,-1]]]]],46,[[105,[],[[127,[-1]]]]]],[[113,-1],[[104,[106]]],105],[[107,107],[[3,[44]]]],[[[169,[-1]],[169,[-1]]],[[3,[44]]],59],[[[128,[],[[127,[-1]]]],129,-1],[[104,[[131,[[128,[],[[127,[-1]]]],-2]]]]],130,105],[[[128,[],[[127,[-1]]]],129,-1],[[104,[[131,[[128,[],[[127,[-1]]]],-2]]]]],130,105],[[[108,[-1]]],[[3,[145]]],105],[[[126,[-1]]],[[3,[145]]],105],[[[108,[-1]]],[[3,[[54,[71,145]]]]],105],[145,68],[[[135,[-1]],145],[[104,[31]]],105],[[[146,[-1]],[183,[102]]],[[146,[-1]]],58],[107,168],0,[[[146,[-1]],[184,[102]]],[[146,[-1]]],58],[[[146,[-1]],[185,[102]]],[[146,[-1]]],58],[[[119,[-1]],23,8,68,[114,[-1]],12],[[104,[[181,[-1]]]]],105],[[[118,[-1]],17,8],[[104,[[178,[-1]]]]],105],[[[118,[-1]],17,8],[[104,[[178,[-1]]]]],105],[[[119,[-1]],23,8],[[104,[[180,[-1]]]]],105],[[[105,[],[[174,[-1]],[127,[-2]]]],57],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],57],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[61]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[61]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[62]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[62]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[63]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[63]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[64]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[64]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[65]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[65]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[186]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[186]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[[54,[-2,6]]]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[[54,[-2,6]]]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],6],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],6],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[[105,[],[[174,[-1]],[127,[-2]]]]]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[[105,[],[[174,[-1]],[127,[-2]]]]]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],6],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],6],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],57],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],57],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[65]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[65]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],[60,[57]]],[[104,[54]]],58,46],[[[146,[-1]],[60,[57]]],[[104,[54]]],58],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[66]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[66]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[67]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[67]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[57]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[57]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[-3]]],58,46,[187,172,[188,[[60,[57]]]]]],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[-3]]],58,46,[187,172,[188,[[60,[57]]]]]],[[[105,[],[[174,[-1]],[127,[-2]]]],102],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],102],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[68]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[66]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[66]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[67]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[67]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],6],[[104,[-2]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]],6],[[104,[-2]]],58,46],[173,-1,105],[[[114,[-1]]],-1,[]],[[[132,[-1]]],-1,105],[[[133,[-1]]],-1,105],[[[136,[-1]]],-1,105],[[[117,[-1]]],-1,[]],[[[151,[-1]]],-1,[]],[[[152,[-1]]],-1,[]],[[[156,[-1]]],-1,[]],[[[157,[-1]]],-1,[]],[[[165,[-1]]],-1,[]],[[[166,[-1]]],-1,[]],[[[120,[-1]]],-1,[]],[[[121,[-1]]],-1,[]],[[[122,[-1]]],-1,[]],[[[123,[-1,-2]],10],[[142,[-1]]],105,[[125,[-1]]]],[[[123,[-1,-2]]],[[141,[-1]]],105,[[125,[-1]]]],[[106,113,68],[[104,[106]]]],[[106,106,68],[[104,[106]]]],[[[109,[-1,-2]],-1],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],113],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],68],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],106],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],68],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],68],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],106],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],68],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],106],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],68],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[109,[-1,-2]],68],[[104,[[175,[-1]]]]],105,[[111,[-1]]]],[[[108,[-1]]],10,105],[[[126,[-1]],-2,129,[140,[-1,-3]]],[[104,[[177,[-1,-3]]]]],105,[[128,[-1]]],[[125,[-1]]]],[[[123,[-1,-2]]],68,105,[[125,[-1]]]],0,0,[[[153,[-1]]],67,105],[[],47],[[[153,[-1]],67],[[104,[[154,[-1]]]]],105],[107,[[3,[68]]]],[[[149,[-2,-1]]],57,46,[[105,[],[[127,[-1]]]]]],[[[132,[-1]],57],54,105],[[[136,[-1]],57],54,105],[[[119,[-1]],[165,[-1]]],54,[]],[[129,68],129],[[129,68],129],[[129,68],129],[[[109,[-1,-2]],68],54,105,[[111,[-1]]]],[[[109,[-1,-2]],67],54,105,[[111,[-1]]]],[[[109,[-1,-2]],68],54,105,[[111,[-1]]]],[[[132,[-1]],57],54,105],[[129,68],129],[[[132,[-1]],7],54,105],[[[136,[-1]],7],54,105],[[106,106,68],[[104,[106]]]],[[106,106,68],[[104,[106]]]],[[106,106,68],[[104,[106]]]],0,0,[[[105,[],[[174,[-1]],[127,[-2]]]],-2],[[104,[54]]],58,46],[[[146,[-1]],102],[[104,[54]]],58],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[54]]],58,46],[[[105,[],[[174,[-1]],[127,[-2]]]]],[[104,[54]]],58,46],[[[146,[-1]]],[[60,[57]]],58],[[[153,[-1]]],67,105],[[[105,[],[[174,[-1]],[127,[-2]]]],-2],[[104,[[105,[],[[174,[-1]],[127,[-2]]]]]]],58,46],[[[146,[-1]],102],[[104,[[146,[-1]]]]],58],[[[146,[-1]],102],[[54,[[146,[-1]],[146,[-1]]]]],58],[[[123,[-1,-2]]],68,105,[[125,[-1]]]],[[106,106,68],[[104,[106]]]],[[[134,[-1]]],[[3,[[135,[-1]]]]],105],0,[[[146,[-1]]],[[104,[47]]],58],[[106,68],[[104,[68]]]],[[[105,[],[[174,[-1]],[127,[-2]]]],-2],[[104,[54]]],58,46],[[[146,[-1]],102],[[104,[54]]],58],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,[[69,[-2]]],[],[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[-1,70,[]],[[[153,[-1]]],67,105],[[[128,[],[[127,[-1]]]],129,[140,[-2,-3]],68,-4],[[104,[[123,[-2,-3]]]]],130,105,[[125,[-2]]],[[116,[[128,[],[[127,[-1]]]],129,-1],[[115,[[104,[[108,[-2]]]]]]]]]],[[[128,[],[[127,[-1]]]],129,[140,[-2,-3]],68,-4],[[104,[[123,[-2,-3]]]]],130,105,[[125,[-2]]],[[116,[[128,[],[[127,[-1]]]],129,-1],[[115,[[104,[[108,[-2]]]]]]]]]],[[[135,[-1]],[136,[-1]],129,[140,[-1,-2]],68,-3],[[104,[[123,[-1,-2]]]]],105,[[125,[-1]]],[[116,[[136,[-1]],129,31],[[115,[[104,[[108,[-1]]]]]]]]]],[[[126,[-1]],-2,129,[140,[-1,-3]],68],[[104,[[123,[-1,-3]]]]],105,[[128,[-1]]],[[125,[-1]]]],[[[109,[-1,-2]]],[[3,[106]]],105,[[111,[-1]]]],[106,113],[[[108,[-1]]],57,105],[[[153,[-1]]],66,105],[[46,46],46],[[],[[3,[47]]]],[[106,106,68],[[104,[106]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[2702],"p":[[6,"UnitSectionOffset",0],[5,"DebugInfoOffset",0],[6,"Option",4063],[10,"Clone",4064],[5,"DebugTypesOffset",0],[6,"Format",0],[6,"Vendor",0],[5,"Encoding",0],[5,"LineEncoding",0],[5,"Register",0],[5,"DebugAbbrevOffset",0],[5,"DebugAddrBase",0],[5,"DebugAddrIndex",0],[5,"DebugArangesOffset",0],[5,"DebugLineOffset",0],[5,"DebugLineStrOffset",0],[5,"LocationListsOffset",0],[5,"DebugLocListsBase",0],[5,"DebugLocListsIndex",0],[5,"DebugMacinfoOffset",0],[5,"DebugMacroOffset",0],[5,"RawRangeListsOffset",0],[5,"RangeListsOffset",0],[5,"DebugRngListsBase",0],[5,"DebugRngListsIndex",0],[5,"DebugStrOffset",0],[5,"DebugStrOffsetsBase",0],[5,"DebugStrOffsetsIndex",0],[5,"DebugTypeSignature",0],[5,"DebugFrameOffset",0],[5,"EhFrameOffset",0],[6,"SectionId",0],[5,"DwoId",0],[6,"DwarfFileType",0],[5,"Arm",0],[5,"AArch64",0],[5,"LoongArch",0],[5,"RiscV",0],[5,"X86",0],[5,"X86_64",0],[6,"RunTimeEndian",0],[5,"LittleEndian",0],[5,"BigEndian",0],[6,"Ordering",4065],[10,"Ord",4065],[10,"ReaderOffset",2621],[1,"str"],[1,"bool"],[10,"PartialEq",4065],[5,"Formatter",4066],[8,"Result",4066],[10,"Debug",4066],[1,"never"],[1,"tuple"],[10,"Hasher",4067],[10,"Hash",4067],[1,"u8"],[10,"Endianity",0],[10,"PartialOrd",4065],[1,"slice"],[1,"f32"],[1,"f64"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"u16"],[1,"u32"],[1,"u64"],[6,"Result",4068],[5,"TypeId",4069],[5,"DwEhPe",1258],[5,"DwSect",1258],[5,"DwSectV2",1258],[5,"DwUt",1258],[5,"DwCfa",1258],[5,"DwChildren",1258],[5,"DwTag",1258],[5,"DwAt",1258],[5,"DwForm",1258],[5,"DwAte",1258],[5,"DwLle",1258],[5,"DwDs",1258],[5,"DwEnd",1258],[5,"DwAccess",1258],[5,"DwVis",1258],[5,"DwVirtuality",1258],[5,"DwLang",1258],[5,"DwAddr",1258],[5,"DwId",1258],[5,"DwCc",1258],[5,"DwInl",1258],[5,"DwOrd",1258],[5,"DwDsc",1258],[5,"DwIdx",1258],[5,"DwDefaulted",1258],[5,"DwLns",1258],[5,"DwLne",1258],[5,"DwLnct",1258],[5,"DwMacro",1258],[5,"DwRle",1258],[5,"DwOp",1258],[1,"usize"],[5,"Error",4066],[8,"Result",2621],[10,"Reader",2621],[6,"Value",2621],[5,"ArangeEntry",2621],[5,"CommonInformationEntry",2621],[5,"Evaluation",2621],[5,"Piece",2621],[10,"EvaluationStorage",2621],[5,"Augmentation",2621],[6,"ValueType",2621],[5,"DebugAddr",2621],[17,"Output"],[10,"FnMut",4070],[5,"DebugAranges",2621],[5,"LocationLists",2621],[5,"RangeLists",2621],[5,"DebugStr",2621],[5,"DebugStrOffsets",2621],[5,"DebugLineStr",2621],[5,"UnwindTableRow",2621],[6,"CfaRule",2621],[10,"UnwindContextStorage",2621],[5,"FrameDescriptionEntry",2621],[17,"Offset"],[10,"UnwindSection",2621],[5,"BaseAddresses",2621],[10,"UnwindOffset",2621],[5,"PartialFrameDescriptionEntry",2621],[5,"DebugFrame",2621],[5,"EhFrameHdr",2621],[5,"ParsedEhFrameHdr",2621],[5,"EhHdrTable",2621],[5,"EhFrame",2621],[5,"SectionBaseAddresses",2621],[5,"CfiEntriesIter",2621],[6,"CieOrFde",2621],[5,"UnwindContext",2621],[5,"RegisterRuleIter",2621],[6,"RegisterRule",2621],[6,"CallFrameInstruction",2621],[5,"CallFrameInstructionIter",2621],[6,"Pointer",2621],[5,"EndianSlice",2621],[5,"ReaderOffsetId",2621],[5,"ArangeHeaderIter",2621],[5,"ArangeHeader",2621],[5,"ArangeEntryIter",2621],[5,"DebugCuIndex",2621],[5,"DebugTuIndex",2621],[5,"UnitIndex",2621],[5,"UnitIndexSectionIterator",2621],[5,"UnitIndexSection",2621],[5,"DebugLoc",2621],[5,"DebugLocLists",2621],[6,"RawLocListEntry",2621],[5,"LocationListEntry",2621],[6,"DieReference",2621],[6,"Operation",2621],[6,"Location",2621],[5,"Expression",2621],[5,"OperationIter",2621],[5,"DebugRanges",2621],[5,"DebugRngLists",2621],[6,"RawRngListEntry",2621],[5,"Range",2621],[5,"UnitOffset",2621],[5,"StoreOnHeap",2621],[6,"Error",2621],[10,"Default",4071],[10,"Section",2621],[17,"Endian"],[6,"EvaluationResult",2621],[5,"EhHdrTableIter",2621],[5,"UnwindTable",2621],[5,"RawLocListIter",2621],[5,"LocListIter",2621],[5,"RawRngListIter",2621],[5,"RngListIter",2621],[10,"FnOnce",4070],[5,"Range",4072],[5,"RangeFrom",4072],[5,"RangeTo",4072],[1,"i8"],[10,"Sized",4073],[10,"AsMut",4074],[10,"ArrayLike",2621],[15,"SetLoc",3952],[15,"AdvanceLoc",3952],[15,"Register",3952],[15,"DefCfaExpression",3952],[15,"Expression",3952],[15,"ValExpression",3952],[15,"DefCfaSf",3952],[15,"DefCfaOffsetSf",3952],[15,"Offset",3952],[15,"OffsetExtendedSf",3952],[15,"ValOffset",3952],[15,"ValOffsetSf",3952],[15,"DefCfa",3952],[15,"DefCfaOffset",3952],[15,"DefCfaRegister",3952],[15,"Undefined",3952],[15,"SameValue",3952],[15,"Restore",3952],[15,"ArgsSize",3952],[15,"RegisterAndOffset",3980],[15,"RequiresMemory",3982],[15,"RequiresRegister",3982],[15,"RequiresIndexedAddress",3982],[15,"Address",3990],[15,"ImplicitPointer",3990],[15,"Register",3990],[15,"Value",3990],[15,"Bytes",3990],[15,"Address",3996],[15,"Deref",3996],[15,"RegisterOffset",3996],[15,"TypedLiteral",3996],[15,"Convert",3996],[15,"Reinterpret",3996],[15,"Piece",3996],[15,"ImplicitPointer",3996],[15,"ImplicitValue",3996],[15,"EntryValue",3996],[15,"Pick",3996],[15,"AddressIndex",3996],[15,"ConstantIndex",3996],[15,"WasmLocal",3996],[15,"WasmGlobal",3996],[15,"WasmStack",3996],[15,"FrameOffset",3996],[15,"Call",3996],[15,"ParameterRef",3996],[15,"Register",3996],[15,"Bra",3996],[15,"Skip",3996],[15,"PlusConstant",3996],[15,"UnsignedConstant",3996],[15,"SignedConstant",3996],[15,"BaseAddress",4028],[15,"BaseAddressx",4028],[15,"AddressOrOffsetPair",4028],[15,"StartxEndx",4028],[15,"StartxLength",4028],[15,"OffsetPair",4028],[15,"StartEnd",4028],[15,"StartLength",4028],[15,"DefaultLocation",4028],[15,"BaseAddress",4049],[15,"BaseAddressx",4049],[15,"AddressOrOffsetPair",4049],[15,"StartxEndx",4049],[15,"StartxLength",4049],[15,"OffsetPair",4049],[15,"StartEnd",4049],[15,"StartLength",4049]],"b":[[998,"impl-From%3CDebugInfoOffset%3CT%3E%3E-for-UnitSectionOffset%3CT%3E"],[999,"impl-From%3CDebugTypesOffset%3CT%3E%3E-for-UnitSectionOffset%3CT%3E"],[2302,"impl-Debug-for-DwSect"],[2303,"impl-Display-for-DwSect"],[2304,"impl-Display-for-DwSectV2"],[2305,"impl-Debug-for-DwSectV2"],[2306,"impl-Debug-for-DwUt"],[2307,"impl-Display-for-DwUt"],[2308,"impl-Display-for-DwCfa"],[2309,"impl-Debug-for-DwCfa"],[2310,"impl-Display-for-DwChildren"],[2311,"impl-Debug-for-DwChildren"],[2312,"impl-Display-for-DwTag"],[2313,"impl-Debug-for-DwTag"],[2314,"impl-Debug-for-DwAt"],[2315,"impl-Display-for-DwAt"],[2316,"impl-Debug-for-DwForm"],[2317,"impl-Display-for-DwForm"],[2318,"impl-Debug-for-DwAte"],[2319,"impl-Display-for-DwAte"],[2320,"impl-Display-for-DwLle"],[2321,"impl-Debug-for-DwLle"],[2322,"impl-Display-for-DwDs"],[2323,"impl-Debug-for-DwDs"],[2324,"impl-Debug-for-DwEnd"],[2325,"impl-Display-for-DwEnd"],[2326,"impl-Debug-for-DwAccess"],[2327,"impl-Display-for-DwAccess"],[2328,"impl-Display-for-DwVis"],[2329,"impl-Debug-for-DwVis"],[2330,"impl-Display-for-DwVirtuality"],[2331,"impl-Debug-for-DwVirtuality"],[2332,"impl-Display-for-DwLang"],[2333,"impl-Debug-for-DwLang"],[2334,"impl-Display-for-DwAddr"],[2335,"impl-Debug-for-DwAddr"],[2336,"impl-Debug-for-DwId"],[2337,"impl-Display-for-DwId"],[2338,"impl-Display-for-DwCc"],[2339,"impl-Debug-for-DwCc"],[2340,"impl-Display-for-DwInl"],[2341,"impl-Debug-for-DwInl"],[2342,"impl-Display-for-DwOrd"],[2343,"impl-Debug-for-DwOrd"],[2344,"impl-Debug-for-DwDsc"],[2345,"impl-Display-for-DwDsc"],[2346,"impl-Debug-for-DwIdx"],[2347,"impl-Display-for-DwIdx"],[2348,"impl-Display-for-DwDefaulted"],[2349,"impl-Debug-for-DwDefaulted"],[2350,"impl-Debug-for-DwLns"],[2351,"impl-Display-for-DwLns"],[2352,"impl-Display-for-DwLne"],[2353,"impl-Debug-for-DwLne"],[2354,"impl-Debug-for-DwLnct"],[2355,"impl-Display-for-DwLnct"],[2356,"impl-Display-for-DwMacro"],[2357,"impl-Debug-for-DwMacro"],[2358,"impl-Debug-for-DwRle"],[2359,"impl-Display-for-DwRle"],[2360,"impl-Debug-for-DwOp"],[2361,"impl-Display-for-DwOp"],[2362,"impl-Debug-for-DwEhPe"],[2363,"impl-Display-for-DwEhPe"],[3235,"impl-Value"],[3236,"impl-PartialEq-for-Value"],[3247,"impl-Reader-for-EndianSlice%3C\'input,+Endian%3E"],[3248,"impl-EndianSlice%3C\'input,+Endian%3E"],[3315,"impl-Display-for-Error"],[3316,"impl-Debug-for-Error"],[3590,"impl-EndianSlice%3C\'input,+Endian%3E"],[3591,"impl-Reader-for-EndianSlice%3C\'input,+Endian%3E"]]}],\
["increasing_heap_allocator",{"doc":"","t":"FFKNMONNNNNNMNNONNONNNNNNNNNN","n":["HeapAllocator","HeapStats","PageAllocatorProvider","alloc","allocate_pages","allocated","borrow","borrow","borrow_mut","borrow_mut","clone","dealloc","deallocate_pages","debug_free_blocks","fmt","free_size","from","from","heap_size","into","into","new","stats","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"increasing_heap_allocator"],[29,"core::alloc::layout"],[30,"core::option"],[31,"core::iter::traits::iterator"],[32,"core::fmt"],[33,"core::fmt"],[34,"core::any"]],"d":["","","","Safety","Return the start address of the new allocated heap","","","","","","","Safety","Deallocate pages from the end of the heap Return true if …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,1,4,7,1,7,1,7,7,1,4,1,7,7,1,7,7,1,7,1,1,1,7,1,7,1,7],"f":[0,0,0,[[[1,[-1]],2],3,4],[[4,5],[[6,[3]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[[1,[-1]],3,2],8,4],[[4,5],9],[[[1,[-1]]],[[0,[[11,[],[[10,[[8,[5,5]]]]]]]]],4],[[7,12],13],0,[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-1]]],4],[[[1,[-1]]],7,4],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[5,"HeapAllocator",0],[5,"Layout",29],[1,"u8"],[10,"PageAllocatorProvider",0],[1,"usize"],[6,"Option",30],[5,"HeapStats",0],[1,"tuple"],[1,"bool"],[17,"Item"],[10,"Iterator",31],[5,"Formatter",32],[8,"Result",32],[6,"Result",33],[5,"TypeId",34]],"b":[]}],\
["kernel",{"doc":"","t":"","n":["acpi","collections","cpu","cpuid","dbg","devices","edbg","eprint","eprintln","executable","finish_boot","fs","graphics","io","kernel_main","load_init_process","macros","memory_management","multiboot2","panic_handler","print","println","process","sync","aml","get_acpi_tables","tables","Access","Add","Alias","AmlCode","AmlParseError","AmlTerm","And","Aquire","Arg","Arg","Break","Buffer","ByteConst","CannotMoveBackward","Concat","ConcatRes","CondRefOf","ConstOne","ConstOnes","ConstZero","CreateBitField","CreateByteField","CreateDWordField","CreateFieldOp","CreateQWordField","CreateWordField","DWordConst","DataObject","DataObject","Debug","Decrement","DerefOf","DerefOf","Device","Divide","Else","Event","Expression","Field","FieldDef","FieldElement","FindSetLeftBit","FindSetRightBit","If","Increment","Index","Index","IndexField","IndexFieldDef","InvalidPkgLengthLead","InvalidTarget","LAnd","LEqual","LGreater","LGreaterEqual","LLess","LLessEqual","LNot","LNotEqual","LOr","Local","Local","Method","MethodCall","MethodObj","Mid","Mod","Multiply","Mutex","Name","Name","NameObj","Named","Nand","None","Noop","Nor","Not","Notify","ObjectType","Or","Package","Parser","PowerResource","PowerResource","PredicateBlock","Processor","ProcessorDeprecated","QWordConst","RefOf","RefOf","Region","RegionObj","Release","RemainingBytes","Reserved","Reset","Return","Scope","ScopeObj","ShiftLeft","ShiftRight","Signal","SizeOf","Sleep","Stall","State","StateMethodsList","StateNamesList","Store","String","Subtract","Target","TermArg","ToBuffer","ToDecimalString","ToHexString","ToInteger","UnexpectedEndOfCode","VarPackage","Wait","While","WordConst","Xor","add_method","add_name","arg_count","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","backward","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","check_empty","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_parser","clone_state","code","display_binary_op","display_call_term_target","display_depth","display_fields","display_index","display_method","display_predicate_block","display_scope","display_target","display_term","display_term_arg","display_terms","display_with_depth","fields","fields","find_method","find_name","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_inner_parser","get_next_byte","get_pkg_length","index_name","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","methods","name","name","name","name","name","name","name","names","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parse","parse","parse","parse","parse","parse","parse","parse","parse_aml","parse_fields_list_and_flags","parse_name","parse_root","parse_target","parse_term","parse_term_arg","parse_term_arg_general","parse_term_arg_last","parse_term_arg_non_method_arg","parse_term_list","peek_next_byte","pos","predicate","predict_possible_args","region_length","region_offset","region_space","remaining_bytes","resource_order","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","state","system_level","term_list","term_list","term_list","term_list","term_list","term_list","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_parse_arg","try_parse_local","try_parse_name","try_parse_term","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unk1","unk2","unk3","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Apic","Apic","ApicGenericAddress","BIOS_RO_MEM_END","BIOS_RO_MEM_START","BIOS_TABLES","Bgrt","Bgrt","BiosTables","DescriptionHeader","DescriptorTable","DescriptorTableBody","Dsdt","Facp","Facp","GenericInitiatorAffinity","GenericInitiatorAffinity","GicInterruptTranslationService","GicInterruptTranslationServiceAffinity","GiccAffinity","GiccAffinity","Hpet","Hpet","InterruptControllerStruct","InterruptSourceOverride","InterruptSourceOverride","IoApic","IoApic","LocalApicAddressOverride","LocalApicAddressOverride","LocalApicNmi","LocalApicNmi","MemoryAffinity","MemoryAffinity","NonMaskableInterrupt","NonMaskableInterrupt","ProcessorLocalAcpi","ProcessorLocalAcpiAffinity","ProcessorLocalApic","ProcessorLocalApic","ProcessorLocalX2Apic","ProcessorLocalX2ApicAffinity","Rsdp","RsdpV1","RsdpV2","Rsdt","Srat","Srat","Ssdt","StaticResourceAffinity","Unknown","Unknown","Unknown","Waet","Waet","Xsdt","acpi_disable","acpi_enable","acpi_processor_id","acpi_processor_uid","acpi_processor_uid","address","address_space_id","aml_code","apic_id","apic_id","arm_boot_arch","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","base_address","base_address_high","base_address_low","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","century","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checksum","checksum","checksum","clock_domain","clock_domain","clock_domain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","creator_id","creator_revision","cstate_control","day_alarm","device_handle","device_handle_type","dsdt","duty_offset","duty_width","emulated_device_flags","entries","event_timer_block_id","extended_checksum","extended_checksum","fadt_minor_version","firmware_control","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flush_size","flush_stride","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_body_bytes","from_body_bytes","from_body_bytes","from_physical_ptr","from_type_and_bytes","from_type_and_bytes","from_v1","from_v2","get_acpi_table_bytes","get_acpi_tables","get_struct_from_bytes","get_table","get_table_from_body","global_system_interrupt","global_system_interrupt","global_system_interrupt_base","gpe0_block","gpe0_block_length","gpe1_base","gpe1_block","gpe1_block_length","header","header","hpet_number","hypervisor_vendor_id","iapc_boot_arch","image_address","image_offset_x","image_offset_y","image_type","interrupt_controller_structs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io_apic_address","io_apic_id","its_id","length","length","length","length_high","length_low","local_apic_address","local_apic_address","local_apic_lint","local_sapic_eid","main_counter_minimum_clock_tick","month_alarm","new","oem_id","oem_id","oem_id","oem_revision","oem_table_id","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","p_level2_latency","p_level3_latency","page_protection","pm1_control_length","pm1_event_length","pm1a_control_block","pm1a_event_block","pm1b_control_block","pm1b_event_block","pm2_control_block","pm2_control_length","pm_timer_block","pm_timer_length","preferred_pm_profile","proximity_domain","proximity_domain","proximity_domain","proximity_domain","proximity_domain","proximity_domain_high","proximity_domain_low","pstate_control","rdst","register_bit_offset","register_bit_width","reserved","reserved","reserved","reserved","reserved","reserved","reserved1","reserved1","reserved1","reserved1","reserved1","reserved2","reserved2","reserved2","reserved2","reserved2","reserved3","reset_reg","reset_value","revision","revision","revision","rsdp","rsdp_v1","rsdt","rsdt_address","rsdt_address","s4bios_req","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sci_interrupt","signature","signature","signature","sleep_control_reg","sleep_status_reg","smi_command_port","source","static_resource_allocation","status","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","version","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x2apic_id","x_dsdt","x_firmware_control","x_gpe0_block","x_gpe1_block","x_pm1a_control_block","x_pm1a_event_block","x_pm1b_control_block","x_pm1b_event_block","x_pm2_control_block","x_pm_timer_block","xsdt_address","xsdt_address","bytes","struct_type","bytes","struct_type","ring","RingBuffer","az","borrow","borrow_mut","buffer","cast_from","checked_as","checked_cast_from","clear","empty","from","into","overflowing_as","overflowing_cast_from","pop","push","push_replace","read_index","saturating_as","saturating_cast_from","try_from","try_into","try_push","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","write_index","CPUS","Cpu","IoPortInt","MAX_CPUS","apic_id","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear_interrupts","clone","clone_into","context","cpu","cpuid","empty","flags","fmt","from","gdt","get_cr0","get_cr3","get_cr4","get_cs","halt","id","idt","inb","ind","init","interrupts","interrupts_disabled","into","invalidate_tlp","inw","io_in","io_in","io_out","io_out","lgdt","lidt","ltr","msr","n_cli","n_cli","old_interrupt_enable","outb","outd","outw","overflowing_as","overflowing_cast_from","pop_cli","process_id","push_cli","read_tsc","rflags","saturating_as","saturating_cast_from","scheduling","set_cr0","set_cr3","set_cr4","set_cs","set_data_segments","set_interrupts","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","FEAT_EDX_APIC","FEAT_EDX_TSC","FN_FEAT","cpuid","IF","GDT","GlobalDescriptorManager","GlobalDescriptorTable","GlobalDescriptorTablePointer","KERNEL_RING","SegmentSelector","SystemDescriptorEntry","TSS","TaskStateSegment","USER_RING","UserDescriptorEntry","access","access","apply_lgdt","az","az","az","az","az","az","az","base","base_high","base_high","base_low","base_low","base_middle","base_middle","base_upper","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","data","default","default","default","empty","empty","empty","empty","empty","flags","flags_and_limit","flags_and_limit","fmt","from","from","from","from","from","from","from","from_index","gdt","get_user_code_seg_index","get_user_data_seg_index","index","init_kernel_gdt","into","into","into","into","into","into","into","iomap_base","ist","kernel_code_seg","kernel_data_seg","limit","limit","limit_low","load_kernel_segments","load_tss","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_system","push_user","reserved","reserved2","reserved3","reserved4","rsp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tss_seg","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","user_code_seg","user_data_seg","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","zero","CODE","LONG_MODE","PRESENT","TSS_TYPE","USER","WRITE","dpl","BasicInterruptHandler","InterruptAllSavedState","InterruptDescriptorTable","InterruptDescriptorTableEntry","InterruptDescriptorTablePointer","InterruptHandlerWithAllState","InterruptHandlerWithError","InterruptStackFrame64","REDIRECTED_INTERRUPTS","RestSavedRegisters","alignment_check","apply_idt","az","az","az","az","az","az","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_range_exceeded","breakpoint","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","control_protection","coprocessor_segment_overrun","cs","debug","default","default","default","default","default_handler","default_handler_with_error","device_not_available","divide_by_zero","double_fault","dr0","dr1","dr2","dr3","dr6","dr7","ds","empty","empty","error","es","flags","flags","fmt","fmt","fmt","frame","from","from","from","from","from","from","fs","general_protection_fault","gs","hypervisor_injection","init_default_handlers","interrupt_vector_table","into","into","into","into","into","into","invalid_opcode","invalid_tss","ist","limit","machine_check","non_maskable_interrupt","number","offset_high","offset_low","offset_middle","overflow","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","override_code_segment","page_fault","phantom","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","reserved_1","reserved_2","reserved_3","reserved_4","rest","rflags","rip","rsi","rsp","rust_interrupt_handler_for_all_state","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","security_exception","segment_not_present","selector","set_disable_interrupts","set_handler","set_handler","set_handler_ptr","set_handler_with_number","set_privilege_level","set_stack_index","simd_floating_point","ss","stack_exception","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","user_defined","vmm_communication","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x87_floating_point","zero","GATE_TYPE","KEEP_INTERRUPTS","PRESENT","dpl","INTERRUPTS","InterruptHandler","Interrupts","MAX_USER_INTERRUPTS","SPECIAL_SCHEDULER_INTERRUPT","SPECIAL_SYSCALL_INTERRUPT","USER_INTERRUPTS_START","allocate_and_set_handler","allocate_basic_user_interrupt","allocate_basic_user_interrupt","allocate_user_interrupt","allocate_user_interrupt_all_saved","allocate_user_interrupt_all_saved","apic","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","create_scheduler_interrupt","create_syscall_interrupt","from","get_next_interrupt","handlers","idt","init","init_interrupts","into","last_used_user_interrupt","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","stack_index","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","APIC","APIC_BAR_ENABLED","APIC_BASE_MASK","Apic","ApicMmio","ApicReg","DestinationType","IoApic","IoApicMmio","IoApicRedirectionBuilder","LVT_MASK_MASK","LVT_MESSAGE_TYPE_MASK","LVT_TIMER_MODE_MASK","LVT_TRIGGER_MODE_MASK","LVT_VECTOR_MASK","LocalVectorRegister","LocalVectorRegisterBuilder","Logical","Physical","SPURIOUS_ENABLE","_pad","_pad1","_pad2","_pad3","_pad4","_pad5","_pad6","arbitration_priority","assign_io_irq","assign_io_irq","assign_io_irq_custom","assign_io_irq_custom","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","data","default","default","destination_format","disable_local_interrupts","disable_pic","end_of_interrupt","error_interrupt_handler","error_local_vector_table","error_status","extended_apic_control","extended_apic_features","extended_interrupt_local_vector_tables","from","from","from","from","from","from","from","from","from","from","get_irq_ioapic_entry","global_irq_base","id","id","in_service","init","initialize_spurious_interrupt","initialize_timer","interrupt_command_high","interrupt_command_low","interrupt_enable","interrupt_request","into","into","into","into","into","into","into","into","into","io_apic","io_apics","irq_pin_assersion","is_entry_taken","is_irq_assigned","is_irq_assigned","lint0_local_vector_table","lint1_local_vector_table","logical_destination","mmio","mmio","n_cpus","n_entries","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pad","performance_local_vector_table","processor_priority","read","read","read_register","read_register","reg","reg","reg","reg","register_select","remote_read","reset_all_interrupts","return_from_interrupt","return_from_interrupt","return_of_interrupt","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","setup_error_interrupt","source_overrides","specifc_end_of_interrupt","spurious_handler","spurious_interrupt_vector","task_priority","thermal_local_vector_table","timer_current_count","timer_divide_configuration","timer_initial_count","timer_local_vector_table","to_owned","to_owned","trigger_mode","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","version","with_delivery_mode","with_destination","with_interrupt_polartiy_low","with_mask","with_mask","with_message_type","with_periodic_timer","with_trigger_mode","with_trigger_mode_level","with_vector","with_vector","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write","write_redirect_entry","write_register","write_register","IO_APIC_ARBITRATION_ID","IO_APIC_ID","IO_APIC_REDIRECTION_TABLE","IO_APIC_VERSION","RDR_DELIVERY_MODE_MASK","RDR_DELIVERY_STATUS_MASK","RDR_DESTINATION_LOGICAL_MASK","RDR_DESTINATION_MODE_MASK","RDR_DESTINATION_PHYSICAL_MASK","RDR_MASK_MASK","RDR_PIN_POLARITY_MASK","RDR_REMOTE_IRR_MASK","RDR_TRIGGER_MODE_MASK","RDR_VECTOR_MASK","apic_timer_handler","DOUBLE_FAULT_STACK","FAULTS_STACK","APIC_BASE","EFER","read","write","DEVICES","DEVICES_FILESYSTEM_CLUSTER_MAGIC","DEVICES_FILESYSTEM_ROOT_INODE_MAGIC","Device","Devices","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clock","clone_device","close","devices","fmt","from","ide","init_devices_mapping","init_legacy_devices","into","keyboard_mouse","name","overflowing_as","overflowing_cast_from","pci","pipe","probe_pci_driver","prope_pci_devices","read","register_device","saturating_as","saturating_cast_from","try_create","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","write","CLOCKS","Clock","ClockDevice","ClockTime","NANOS_PER_SEC","SystemTime","add","add_device","as_nanos","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clocks","clone","clone_into","cmp","device","devices","eq","fmt","fmt","from","from","from","get_best_clock","get_best_for_calibration","get_time","granularity","hpet","init","into","into","into","last_tick","name","nanoseconds","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","rating","require_calibration","rtc","rtc","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","seconds","start_unix","startup_offset","sub","system_time","tick","tick_system_time","time_since_startup","time_since_startup","time_since_unix_epoch","time_since_unix_epoch","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","tsc","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","update_device","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","HPET_CLOCK","Hpet","HpetInterruptStatus","HpetMmio","HpetTimerConfig","HpetTimerMmio","InterruptRouteCapabilityBitmap","LEGACY_PIT_IO_PORT_CHANNEL_0","LEGACY_PIT_IO_PORT_CONTROL","ONE_NANOSECOND_IN_FEMTOSECONDS","ONE_SECOND_IN_FEMTOSECONDS","ack","ack_interrupt","az","az","az","az","az","az","bitmap","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","comparator_value","config","config_and_capabilities","counter_clock_period","create_disabled","current_counter","disable_pit","enabled_rounts","fmt","fmt","fmt","fmt","fmt","force_32bit_mode","from","from","from","from","from","from","fsb_capable","fsb_interrupt_route","general_capabilities_id","general_configuration","general_interrupt_status","init","interrupt_enabled","interrupt_route","interrupt_route_capabilities","interrupt_via_fsb","into","into","into","into","into","into","is_64bit_capable","is_interrupt_level_trigerred","is_periodic","is_periodic_capable","is_set","is_set","main_counter_value","mmio","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","read","read_general_configuration","reserved","reserved","reserved0","reserved1","reserved2","reserved3","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_config","set_enable_legacy_replacement_route","set_enabled","set_interrupts_iter","status","status_interrupts_iter","timer0_handler","timer_set_value","timers","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write_comparator_value","write_general_configuration","CURRENT_CENTURY","RTC_ADDRESS","RTC_DATA","RTC_DAY_OF_MONTH","RTC_HOURS","RTC_MINUTES","RTC_MONTH","RTC_SECONDS","RTC_STATUS_A","RTC_STATUS_B","RTC_YEAR","Rtc","RtcTime","SECONDS_PER_DAY","SECONDS_PER_HOUR","SECONDS_PER_MINUTE","SECONDS_PER_MONTH","SECONDS_PER_YEAR","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","century_reg","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","day_of_month","default","eq","fmt","fmt","from","from","get_time","get_time_sync","hours","into","into","is_bcd","is_updating","minutes","month","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","read_register","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","seconds","seconds_since_unix_epoch","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","year","SyncPoint","Tsc","az","az","borrow","borrow","borrow_mut","borrow_mut","calibrate","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","cycles","cycles_to_ns","cycles_to_time_nanos","from","from","get_device_delay","get_sync_time_point","get_time","granularity","into","into","name","nanos","nanos_per_cycle_scaled","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","rating","rd_tsc_call_latency","recalibrate","require_calibration","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","start_time","time_nanos_since_start","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","Ata","AtaCommand","Atapi","AtapiDmaDirection","AtapiPacketCommand","BoundsExceeded","CommandIdentifyDataRaw","DeviceError","FromDevice","IDE_DEVICES","INTERRUPTS_SETUP","IdeDevice","IdeDeviceImpl","IdeDeviceIndex","IdeDeviceType","IdeError","IdeIo","None","ToDevice","UnalignedSize","addional_supported","additional_product_id","ata","atapi_byte_count_behavior","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","command_block","command_set_supported_or_enabled","command_set_supported_or_enabled2","control_block","current_apm_level","current_media_serial_number","data_set_management_trim_support","device_impl","device_name","device_nominal_form_factor","device_type","dma","drive","drive","eq","execute","execute_read","execute_write","extended_user_addressable_sectors","features","firmware_revision","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","general_config","get_ide_device","hardware_reset_result","ide_interrupt_primary","ide_interrupt_secondary","identify_data","index","init_new","init_new","integrity_word","interrupt","interrupt","interseek_delay_for_iso_7779","into","into","into","into","into","into","into","into","into","into","io","is_dma_supported","is_lba48_supported","is_lba_supported","is_primary","is_secondary","is_valid","lba","lba","logical_sector_size","logical_sectors_alignment","major_version","master_io","master_password_id","max_blocks_per_data_set_management","max_blocks_per_download_microcode","max_sectors_per_multiple_commands","min_blocks_per_download_microcode","min_multiword_dma_transfer_cycle_time","min_pio_transfer_cycle_time_no_flow_control","min_pio_transfer_cycle_time_with_ioready","minor_version","model_number","new","new","nominal_media_rotation_rate","number_of_sectors","number_of_sectors","obsolete1","obsolete10","obsolete11","obsolete12","obsolete13","obsolete2","obsolete3","obsolete4","obsolete6","obsolete7","obsolete8","obsolete9","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","params","params_index","pci_cfg","pci_device","physical_logical_sector_size","probe_init","push_param","push_param_u16","push_param_u32","queue_depth","read_command_block","read_control_block","read_data","read_data_block","read_error","read_sense_key","read_status","read_sync","read_sync_ata","read_sync_atapi","recommended_multiword_dma_transfer_cycle_time","reserved","reserved10","reserved11","reserved2","reserved3","reserved4","reserved5","reserved6","reserved7","reserved8","reserved9","reserved_cfa1","reserved_cfa2","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sct_command_transport","second_device_select","second_device_select","sector_count","sector_size","sector_size","sector_size","security_status","serial_ata_capabilities","serial_ata_features_enabled","serial_ata_features_supported","serial_number","specific_config","stream_access_latency","stream_dma_time","stream_min_request_size","stream_performance_granularity","streaming_transfer_time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transport_major_version","transport_minor_version","trusted_computing_features","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_register_ide_device","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ultra_dma_modes","unk_53","unk_59","unk_63","unk_64","unk_89","unk_90","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","user_addressable_sectors","user_addressable_sectors","user_addressable_sectors_28_mode","vendor_specific","wait_until_can_command","wait_until_free","with_byte_count_limit","with_dma","with_features","with_lba","with_second_drive","with_second_drive","with_sector_count","world_wide_name","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write_command_block","write_control_block","write_data","write_data_block","write_packet_command","write_read_verify_feature_set_current_mode","write_read_verify_sector_count_mode2","write_read_verify_sector_count_mode3","write_sync","write_sync_ata","ALT_STATUS","COMMAND","COMMAND_DEVICE_RESET","COMMAND_IDENTIFY","COMMAND_PACKET","COMMAND_PACKET_IDENTIFY","COMMAND_READ_SECTORS","COMMAND_WRITE_SECTORS","DATA","DEFAULT_SECTOR_SIZE","DEV_CONTROL","DRIVE","ERROR","ERROR_ABORTED","ERROR_BAD_BLOCK","ERROR_END_OF_MEDIA","ERROR_ID_NOT_FOUND","ERROR_ILL_LENGTH","ERROR_SENSE_KEY","ERROR_UNCORRECTABLE","FEATURES","LBA_HI","LBA_LO","LBA_MID","PACKET_CMD_INQUIRY","PACKET_CMD_READ_10","PACKET_CMD_READ_CAPACITY","PACKET_CMD_TEST_UNIT_READY","PACKET_FEAT_DMA","PACKET_FEAT_DMA_DIR_FROM_DEVICE","PACKET_INQUIRY_VITAL_DATA","PACKET_VITAL_PAGE_BLOCK_LIMITS","PACKET_VITAL_PAGE_BLOCK_LIMITS_SIZE","PACKET_VITAL_PAGE_DEVICE_IDENTIFY","PACKET_VITAL_PAGE_SUPPORTED_PAGES","SECTOR_COUNT","SENSE_ABORTED_COMMAND","SENSE_BLANK_CHECK","SENSE_COPY_ABORTED","SENSE_DATA_PROTECT","SENSE_HARDWARE_ERROR","SENSE_ILLEGAL_REQUEST","SENSE_MEDIUM_ERROR","SENSE_MISCOMPARE","SENSE_NOT_READY","SENSE_OK","SENSE_RECOVERED_ERROR","SENSE_UNIT_ATTENTION","SENSE_VENDOR_SPECIFIC","SENSE_VOLUME_OVERFLOW","STATUS","STATUS_ALIGN_ERR","STATUS_BUSY","STATUS_DATA_REQUEST","STATUS_DEFERRED_WRITE_ERR","STATUS_DRIVE_FAULT","STATUS_ERR","STATUS_READY","STATUS_SENSE_DATA","CFG_CONTROL_REG","CMD_BUS_MASTER","CMD_INT_DISABLE","CMD_IO_SPACE","CMD_MEM_SPACE","DEFAULT_PRIMARY_INTERRUPT","DEFAULT_PRIMARY_IO","DEFAULT_SECONDARY_INTERRUPT","DEFAULT_SECONDARY_IO","PROG_IF_MASTER","PROG_IF_PRIMARY","PROG_IF_PRIMARY_PROGRAMMABLE","PROG_IF_SECONDARY","PROG_IF_SECONDARY_PROGRAMMABLE","BYTES_SIZE","BYTES_SIZE","KEYBOARD_MOUSE","Key","KeyboardDevice","KeyboardDeviceCreator","KeyboardMouse","KeyboardReader","MouseDevice","MouseDeviceCreator","MouseEvent","MouseReader","as_bytes","as_bytes","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buttons","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_device","clone_device","clone_into","clone_into","fetch_next_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","get_keyboard_reader","get_keyboard_reader","get_mouse_reader","get_mouse_reader","init_device","into","into","into","into","into","into","into","key_type","keyboard","keyboard","modifiers","mouse","mouse","name","name","name","name","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","poll_events","pressed","ps2","ps2","ps2_interrupt_handler","read","read","read_all_events","reader","reader","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scroll_type","to_owned","to_owned","try_create","try_create","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","virtual_char","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","y","KEYBOARD_BUFFER_SIZE","KEYBOARD_INT_NUM","KEY_PRESSED","Keyboard","KeyboardReader","active_modifiers","active_toggles","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","from","get_modifier","get_toggle","handle_keyboard_data","into","key_type_from_device","modifiers","new","new_receiver","overflowing_as","overflowing_cast_from","ps2","queue","reader","saturating_as","saturating_cast_from","sender","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","MOUSE_BUFFER_SIZE","MOUSE_INT_NUM","Mouse","MouseReader","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","commands","from","get_id","get_status","handle_mouse_data","has_extra_byte","into","new","new_receiver","overflowing_as","overflowing_cast_from","packet","ps2","queue","reader","reset","resolution","saturating_as","saturating_cast_from","scaling","sender","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","write_command","MOUSE_DISABLE_STREAMING","MOUSE_ENABLE_STREAMING","MOUSE_GET_DEVICE_ID","MOUSE_PREFIX","MOUSE_REQUEST_SINGLE_PACKET","MOUSE_RESET","MOUSE_SET_DEFAULTS","MOUSE_SET_SAMPLE_RATE","MOUSE_STATUS_REQUEST","X_OVERFLOW","X_SIGN","Y_OVERFLOW","Y_SIGN","PIXEL_PER_MM_1","PIXEL_PER_MM_2","PIXEL_PER_MM_4","PIXEL_PER_MM_8","PER_SEC_10","PER_SEC_100","PER_SEC_20","PER_SEC_200","PER_SEC_40","PER_SEC_60","PER_SEC_80","PS2_DATA_PORT","PS2_STATUS_PORT","Ps2","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","fmt","from","has_data","into","overflowing_as","overflowing_cast_from","read_data","read_status","saturating_as","saturating_cast_from","status","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wait_for_ack","wait_for_command_clear","wait_read_data","wait_read_data_slice","wrapping_as","wrapping_cast_from","write_command_data","write_data","write_prefix","COMMAND_DATA","DATA_READY","INPUT_BUFFER_FULL","KEYBOARD_LOCKED","KEYBOARD_TIMEOUT_MOUSE_DATA","PARITY_ERROR","RECEIVE_TIMEOUT","SYSTEM_FLAG","BaseSystemPeripheral","BridgeDevice","CoProcessor","DisplayController","DockingStation","EncryptionController","InputDeviceController","IntelligentController","Io","MassStorageController","Memory","MemoryController","MultimediaController","NetworkController","NonEssentialInstrumentation","None","PciBar","PciDevice","PciDeviceConfig","PciDevicePropeIterator","PciDeviceType","ProcessingAccelerator","Processor","PropeExtra","Reserved","SatelliteCommunicationController","SerialBusController","SignalProcessingController","SimpleCommunicationController","Unassigned","Unclassified","WirelessController","args","az","az","az","az","az","base_address","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","bus","capabilities_ptr","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","dev","dev","device_id","device_name","device_type","fmt","fmt","fmt","fmt","from","from","from","from","from","func","func","get_io","get_memory","header_type","interrupt_line","interrupt_pin","into","into","into","into","into","into_iter","new","new","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","probe","probe_init","read_command","read_config","read_pci_config","read_status","reg","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vendor_id","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_command","write_config","write_pci_config","write_status","addr","addr","prefetchable","size","size","BAR0","BAR1","BAR2","BAR3","BAR4","BAR5","CAPABILITIES_PTR","CLASS_DWORD","COMMAND","DEVICE_ID","HEADER_TYPE","INTERRUPT_LINE","INTERRUPT_PIN","STATUS","SUBSYSTEM_ID","SUBSYSTEM_VENDOR_ID","VENDOR_ID","InnerPipe","PipeSide","az","az","borrow","borrow","borrow_mut","borrow_mut","buffer","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone_device","clones","close","create_pipe_pair","fmt","fmt","from","from","inner","into","into","is_read_side","name","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","read","read_side_available","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","write","write_side_available","elf","load_elf_to_vm","Dynamic","Dynamic","DynamicSymbols","Elf","ElfHeader","ElfHeader32","ElfHeader64","ElfHeaderBase","ElfHeaderUnion","ElfLoadError","ElfProgram","ElfProgram32","ElfProgram64","ElfProgramType","ElfSection","ElfSection32","ElfSection64","ElfSectionInner","ElfSectionType","ExtendedSymbolTableIndices","FileSystemError","FiniArray","Group","Hash","InitArray","Interpreter","InvalidElfOrNotSupported","InvalidMagic","Load","NoBits","Note","Note","Null","Null","Num","OsSpecific","Other","PreInitArray","ProcessorSpecific","Program32","Program64","ProgramBits","ProgramHeader","Rel","Rela","Section32","Section64","Shlib","Shlib","StringTable","SymbolTable","ThreadLocalStorage","UnexpectedEndOfFile","_pad","abi","abi_version","address","address","address","alignment","alignment","alignment","alignment","alignment","alignment","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","base","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","consts","deref","elf_type","elf_version","endianness","entry","entry","entry","entry_point","entry_size","entry_size","entry_size","file_size","file_size","file_size","flags","flags","flags","flags","flags","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_u32","from_u32","header","header","header32","header64","header_size","header_size","info","info","info","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_elf64","is_little_endian","is_valid_and_supported","link","link","link","load","load","load","machine","magic","mem_size","mem_size","mem_size","name","name","name","name","name_index","new","offset","offset","offset","offset","offset","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","physical_address","physical_address","physical_address","program_header_entry_count","program_header_entry_count","program_header_entry_count","program_header_entry_size","program_header_entry_size","program_header_entry_size","program_header_offset","program_header_offset","program_header_offset","program_headers","program_headers","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","section_header_entry_count","section_header_entry_count","section_header_entry_count","section_header_entry_size","section_header_entry_size","section_header_entry_size","section_header_offset","section_header_offset","section_header_offset","section_header_string_table_index","section_header_string_table_index","section_header_string_table_index","sections","sections","size","size","size","size_of_header","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_virtual_memory_flags","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","version","virtual_address","virtual_address","virtual_address","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ABI_SYSV","BITS_32","BITS_64","ELF_MACHINE_X86","ELF_MACHINE_X86_64","ELF_MAGIC","ELF_TYPE_EXECUTABLE","ELF_TYPE_RELOCATABLE","ELF_TYPE_SHARED","ENDIANNESS_BIG","ENDIANNESS_LITTLE","PROG_FLAG_EXE","PROG_FLAG_READ","PROG_FLAG_WRITE","ANOTHER_FILESYSTEM_MAPPING_INODE_MAGIC","ARCHIVE","AccessHelper","BaseNode","BufferNotLargeEnough","Continue","CouldNotSetFileLength","DIRECTORY","DeviceNotFound","DirTreverse","Directory","Directory","Directory","DirectoryNode","DiskReadError","EMPTY","EMPTY_FILESYSTEM","EmptyFileSystem","EndOfFile","FILESYSTEM_MAPPING","FatError","File","File","File","FileAlreadyExists","FileAttributes","FileNode","FileNotFound","FileSystem","FileSystemError","FileSystemMapping","FilesystemNode","HIDDEN","InvalidData","InvalidOffset","InvalidPath","IsDirectory","IsNotDirectory","MustBeAbsolute","NO_PARENT_DIR_SECTOR","Node","OperationNotSupported","PartitionTableNotFound","READ_ONLY","ReadNotSupported","SYSTEM","Stop","VOLUME_LABEL","WriteNotSupported","access_helper","archive","as_dir_mut","as_file","as_file_mut","as_file_stat","attributes","attributes","attributes","az","az","az","az","az","az","az","az","az","az","az","az","az","base","base","bitand","bitor","bitor_assign","blocking_mode","blocking_mode","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone_inherit","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close_file","cluster_index","contains","create_disk_mapping","create_node","create_node","current_cluster","current_position","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","device","dir_entries","directory","drop","drop","empty_filesystem","eq","fat","fetch_entries","filesize","filesystem","filesystem","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_inode","from_inode","from_node","get_all_matching_mappings","get_mapping","get_mapping","hidden","inode","inode","into","into","into","into","into","into","into","into","into","into","into","into","into","into_dir","into_file","is_blocking","is_dir","is_terminal","is_terminal","mappings","mbr","mount","mount","name","name","name","new","new","new_device","new_file","open","open","open","open_blocking","open_inode","open_root","open_root","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent_dir_index","parent_dir_index","parent_dir_sector","parent_dir_sector","path","path","path","path","path","position","position","read","read","read_dir","read_dir","read_file","read_only","read_to_end","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","seek","set_blocking","set_file_size","set_size","set_size","set_start_cluster","set_terminal","size","size","size","size","start_cluster","start_cluster","system","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_open_device","try_open_device","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","volume_label","without_parent","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write_file","error","sector","Bad","ClusterCache","ClusterCacheEntry","DIRECTORY_ENTRY_SIZE","Directory","DirectoryEntry","DirectoryEntryLong","DirectoryEntryNormal","DirectoryEntryState","DirectoryIterSavedPosition","DirectoryIterator","EndOfChain","Fat","Fat12","Fat12_16ExtendedBootSector","Fat16","Fat32","Fat32ExtendedBootSector","FatBootSector","FatBootSectorRaw","FatEntry","FatError","FatExtendedBootSector","FatFilesystem","FatType","FileAccessBuffer","Free","Free","FreeAndLast","InvalidBootSector","Long","Next","Normal","Normal","NotEnoughSpace","Read","Reserved","RootFat12_16","UnexpectedFatEntry","Used","Write","_nt_reserved","_zero","add_directory_entry","add_entry","as_long","as_normal","as_normal_mut","attributes","attributes","attributes","attrs","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","backup_boot_sector","boot_code","boot_code","boot_sector","boot_sector","boot_signature","boot_signature","boot_signature_2","boot_signature_2","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","bytes_per_cluster","bytes_per_sector","bytes_per_sector","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checksum","clear_dirty","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cluster","cluster","cluster_cache","create_dir_entries","creation_date","creation_time","creation_time_tenths_of_seconds","current_cluster","current_sector","current_sector_dirty","current_sector_index","data","data_sectors","data_start_sector","default","device","dir","dirty","dirty","dirty_bitmap","dirty_sectors","drive_number","drive_number","drop","entries","entry","entry_index_in_sector","eq","eq","eq","eq","ext_flags","extended","fat","fat12_16","fat32","fat_size_16","fat_size_32","fat_size_in_sectors","fat_start_sector","fat_type","fat_type","file_attribute_from_fat","file_attribute_to_fat","file_size","file_system_type","file_system_type","filesystem","find_free_cluster","first_cluster_hi","first_cluster_lo","first_sector_of_cluster","flush_current_sector","flush_fat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_u32","fs_info","fs_version","get_cluster","get_next_entry","hidden_sectors","insert_cluster","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_long","jmp_boot","last_access_date","last_modification_date","last_modification_time","len","load","load_fat_filesystem","lock_cluster","long_name_type","mark_sector_dirty","mark_sector_dirty","media_type","name","name1","name2","name3","name_checksum","new","new","new","new","next","next_cluster","next_sector","number_of_fats","number_of_fats","number_of_heads","oem_name","open_dir_inode","open_root_dir","open_root_dir_inode","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","read_fat_entry","read_sectors_no_cache","read_write_file","reference_count","release_cluster","release_cluster","reserved","reserved","reserved_2","reserved_sectors_count","reserved_sectors_count","restore_at","root_cluster","root_dir_sectors","root_dir_start_sector","root_entry_count","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","save_current","sector","sector_size","sectors_per_cluster","sectors_per_cluster","sectors_per_track","sequence_number","set_file_size","short_name","size_in_sectors","start_lba","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u32","total_sectors","total_sectors_16","total_sectors_32","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_cluster_locked","try_get_cluster_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","update_directory_entry","volume_id","volume_id","volume_label","volume_label","volume_label","volume_label","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_fat_entry","write_long","write_normal","write_sectors","inode","size_in_sectors","start_sector","ARCHIVE","DIRECTORY","HIDDEN","LONG_NAME","READ_ONLY","SYSTEM","VOLUME_ID","Mbr","PartitionEntry","az","az","boot_code","bootable","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","copy_protection","disk_signature","end_cylinder","end_head","end_sector","extended_boot_code","fmt","fmt","from","from","hours","into","into","minutes","original_first_physical_drive","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partition_table","partition_type","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","seconds","signature","size_in_sectors","start_cylinder","start_head","start_lba","start_sector","to_owned","to_owned","try_create_from_disk","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","Ancestors","Body","Component","Components","CurDir","Display","Done","Iter","Normal","ParentDir","Path","PathBuf","Prefix","RootDir","SEPARATOR","StartDir","State","StripPrefixError","_ends_with","_join","_push","_set_file_name","_starts_with","_strip_prefix","_with_file_name","ancestors","as_path","as_path","as_path","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_str","as_str","az","az","az","az","az","az","az","az","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","components","default","deref","display","ends_with","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","file_name","finished","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_str","front","has_last_separator","has_root","has_root","has_root","has_root","hash","hash","hash","impl_cmp","include_cur_dir","inner","inner","inner","into","into","into","into","into","into","into","into","into_boxed_path","into_iter","into_iter","into_iter","into_iter","into_iter","into_string","is_absolute","is_empty","is_relative","is_root","is_separator","is_separator_byte","iter","iter_after","join","len_before_body","new","new","next","next","next","next","next_back","next_back","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent","parse_next_component","parse_next_component_back","parse_single_component","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","path","pop","push","reserve","reserve_exact","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_file_name","shrink_to","shrink_to_fit","starts_with","strip_prefix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_path_buf","to_str","to_string","to_string","to_string_lossy","trim_left","trim_right","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","with_capacity","with_file_name","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Pixel","az","b","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","eq","fmt","from","from","g","into","overflowing_as","overflowing_cast_from","r","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vga","wrapping_as","wrapping_cast_from","FrameBufferDraw","FrameBufferInfo","VGA_DISPLAY_CONTROLLER","VgaDisplay","VgaDisplayController","az","az","az","blit","blit_fast","blit_inner_ranges","blit_slow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounding_box","byte_per_pixel","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clear","clear","clear_rect","clipped","clone","clone_into","color_converted","controller","cropped","display","draw_iter","fb_info","field_pos","fill_solid","fmt","framebuffer_info","framebuffer_info","from","from","from","get_arr_pos","height","init","into","into","into","lock_kernel","lock_process","mask","memory","memory_size","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","owner_process","pitch","pixel_mem","pixel_mem_mut","put_pixel","read_pixel","read_pixel","release","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","take_ownership","to_owned","translated","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","width","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_pixel","write_pixel","ArrayTrait","ByteStr","HexArray","Item","NoDebug","PRINT_ERR","_eprint","_print","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","console","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","from","from","from","hexdump","impl_copy_clone_deref_wrapper","into","into","into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_err_enable","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uart","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AnsiColor","Black","Blue","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","CONSOLE","Console","ConsoleController","Cyan","Early","EarlyConsole","Green","Late","LateConsole","Magenta","Red","VideoConsole","VideoConsoleAttribute","White","Yellow","az","az","az","az","az","background","backspace","bold","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","console_cmd_buffer","create_video_console","current_attrib","default","early_init","empty","empty_early","faint","fmt","fmt","fmt","foreground","from","from","from","from","from","from_u8","init","init","init_early","init_late","init_late_device","into","into","into","into","into","keyboard","late_device","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","read","read","read","run_with","run_with_console","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_attrib","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uart","uart","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vga_graphics","vga_text","video_console","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write","write","write_byte","write_byte","write_byte","write_str","write_str","VgaGraphics","az","backspace","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear_current_text_line","fix_after_advance","from","init","into","new","overflowing_as","overflowing_cast_from","pos","saturating_as","saturating_cast_from","scroll","set_attrib","text_style","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vga","wrapping_as","wrapping_cast_from","write_byte","DEFAULT_ATTRIB","VgaText","attrib","az","backspace","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear","clear_line","fix_after_advance","from","get_arr_pos","height","init","into","memory","new","overflowing_as","overflowing_cast_from","pitch","pos","saturating_as","saturating_cast_from","set_attrib","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","width","wrapping_as","wrapping_cast_from","write_byte","COM1","Data","IE_RX_READY","IE_TX_READY","InterruptAndFifoControl","InterruptEnable","LINE_BAUD_LATCH","LINE_RX_READY","LINE_TX_EMPTY","LineControl","LineStatus","MODEM_CTL_DTR","MODEM_CTL_LOOPBACK","MODEM_CTL_OUT1","MODEM_CTL_OUT2","MODEM_CTL_RTS","ModemControl","ModemStatus","Scratch","Uart","UartPort","UartReg","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","from","from","from","init","init_port","interrupt_num","into","into","into","is_enabled","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","port_addr","read_reg","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_read_byte","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_byte","write_reg","kernel_heap_allocator","memory_layout","physical_page_allocator","virtual_memory_mapper","virtual_space","ALLOCATOR","LockedKernelHeapAllocator","PageAllocator","alloc","allocate_pages","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","dealloc","deallocate_pages","empty","from","from","heap_start","init_mutex","inner","into","into","mapped_pages","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","stats","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","AlignMem","EXTENDED_OFFSET","GB","INTR_STACK_BASE","INTR_STACK_COUNT","INTR_STACK_EMPTY_SIZE","INTR_STACK_ENTRY_SIZE","INTR_STACK_SIZE","INTR_STACK_TOTAL_SIZE","KB","KERNEL_BASE","KERNEL_END","KERNEL_EXTRA_MEMORY_BASE","KERNEL_EXTRA_MEMORY_SIZE","KERNEL_HEAP_BASE","KERNEL_HEAP_SIZE","KERNEL_LAST_POSSIBLE_ADDR","KERNEL_LINK","KERNEL_MAPPED_SIZE","KERNEL_PROCESS_VIRTUAL_ADDRESS_START","MB","MemSize","PAGE_2M","PAGE_4K","PROCESS_KERNEL_STACK_BASE","PROCESS_KERNEL_STACK_END","PROCESS_KERNEL_STACK_GUARD","PROCESS_KERNEL_STACK_SIZE","align_down","align_down","align_range","align_range","align_up","align_up","az","begin","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","data_end","display_kernel_map","end","fmt","fmt","from","impl_align_mem","into","is_aligned","is_aligned","kernel_elf_data_end","kernel_elf_end","kernel_elf_rodata_end","kernel_elf_size","kernel_text_end","overflowing_as","overflowing_cast_from","physical2virtual","rodata_end","saturating_as","saturating_cast_from","stack_guard_page","stack_guard_page_ptr","text_end","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","virtual2physical","wrapping_as","wrapping_cast_from","ALLOCATOR","FreePage","PhysicalPageAllocator","alloc","alloc","alloc_zeroed","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","end","free","free","free_count","from","from","high_mem_start","init","init_range","into","into","low_mem_free_list_head","new","next","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","start","stats","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","used_count","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","ADDR_MASK","KERNEL_L3_INDEX_END","KERNEL_L3_INDEX_START","KERNEL_L3_PROCESS_INDEX_END","KERNEL_L3_PROCESS_INDEX_START","KERNEL_L4_INDEX","KERNEL_PROCESS_VIRTUAL_ADDRESS_START","KERNEL_VIRTUAL_MEMORY_MANAGER","MAX_USER_VIRTUAL_ADDRESS","NUM_USER_L4_INDEXES","PageDirectoryTable","PageDirectoryTablePtr","VirtualMemoryMapEntry","VirtualMemoryMapper","add_process_specific_mappings","alloc_new","as_mut","as_physical","as_ptr","as_ref","as_virtual","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_current_vm_as_user","clone_into","clone_kernel_mem","do_for_every_user_entry","do_for_kernel_process_entry","do_for_ranges_enteries","enteries_from_mut_entry","entries","flags","flags","fmt","free","from","from","from","from","from_entry","get_current_vm","get_current_vm","get_l1","get_l2","get_l3","get_l4","init_kernel_vm","into","into","into","into","is_address_mapped","is_address_mapped_in_kernel","is_user","load_vm","map","map_kernel","new","new_kernel_vm","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","page_map_l4","physical_addr","physical_address","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","switch_to_kernel","switch_to_this","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unmap","unmap_kernel","unmap_process_memory","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","virtual_address","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","PTE_ACCESSED","PTE_DIRTY","PTE_GLOBAL","PTE_HUGE_PAGE","PTE_NOT_CACHEABLE","PTE_NO_EXECUTE","PTE_PRESENT","PTE_USER","PTE_WRITABLE","PTE_WRITETHROUGH","AlreadyMapped","EntryNotFound","Err","NotFullRange","Ok","OutOfSpace","Result","VIRTUAL_SPACE_ALLOCATOR","VirtualSpace","VirtualSpaceAllocator","VirtualSpaceEntry","VirtualSpaceError","allocate","allocate_and_map_virtual_space","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","data","deallocate","deallocate_virtual_space","debug_blocks","debug_blocks","deref","deref_mut","drop","empty","entries","fmt","fmt","fmt","from","from","from","from","get_entry_containing","into","into","into","into","new","new_slice","new_uninit","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","physical_start","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","size","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","virtual_for_physical","virtual_start","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ACPINonVolatile","ACPINonVolatile","ACPIReclaimable","ACPIReclaimable","AdvancedPowerManagementTable","AdvancedPowerManagementTable","Available","BadMemory","BasicMemoryInfo","BasicMemoryInfo","BiosBootDevice","BootCommandLine","BootLoaderName","BootServicesCode","BootServicesData","Conventional","Efi64ImageHandle","Efi64SystemTablePtr","EfiBootServicesNotTerminated","EfiMemoryMap","EfiMemoryMap","EfiMemoryMapIter","EfiMemoryMapType","EfiMemoryMapsRaw","EgaText","ElfSymbols","FrameBufferInfo","Framebuffer","FramebufferColorInfo","FramebufferRaw","ImageLoadBasePhysical","Indexed","LoaderCode","LoaderData","MemoryMap","MemoryMap","MemoryMapIter","MemoryMapTagRaw","MemoryMapType","MemoryMappedIO","MemoryMappedIOPortSpace","MemoryMapsRaw","MultiBoot2Info","MultiBootTag","MultiBootTagIter","MultiBootTagRaw","NewRsdp","OldRsdp","PalCode","PersistentMemory","Reserved","Reserved","Rgb","RuntimeServicesCode","RuntimeServicesData","Undefined","Undefined","Unusable","VbeControlInfo","VbeInfo","VbeInfo","VbeModeInfo","_entry_version","addr","addr","attributes","attributes","attributes","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","bank_size","banks","base_addr","base_addr","blue_field_position","blue_mask_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpp","bpp","bpp","bytes_per_scanline","capabilities","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_info","control_info","cseg","cseg_16","cseg_16_len","cseg_len","current","data_ptr","data_slice","direct_color_mode_attributes","dseg","dseg_len","end_address","entry_size","entry_size","entry_size","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer","framebuffer_addr","framebuffer_type","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_color_info","get_most_recent_rsdp","green_field_position","green_mask_size","height","height","height","image_pages","interface_len","interface_off","interface_seg","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_rgb","length","length","mem_lower","mem_type","mem_type","mem_type","mem_type","mem_upper","memory_map_raw","memory_map_raw","memory_maps","memory_model","mode","mode_info","next","next","next","number_of_pages","number_of_pages","oem_data","oem_str_ptr","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","phantom","physical_start","physical_start","pitch","pitch","planes","product_name","product_rev","red_field_position","red_mask_size","remaining","remaining","remaining","reserved","reserved","reserved","reserved","reserved0","reserved1","rsvd_field_position","rsvd_mask_size","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","signature","size","software_rev","tags","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","total_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vbe_info","vendor","version","version","video_memory_size_blocks","video_modes_ptr","virtual_start","virtual_start","w_char","width","width","width","window_a_attributes","window_a_segment","window_b_attributes","window_b_segment","window_func_ptr","window_granularity","window_size","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","y_char","blue_field_position","blue_mask_size","green_field_position","green_mask_size","num_colors","red_field_position","red_mask_size","base_addr","biosdev","cmdline","name","partition","ptr","ptr","sub_partition","PANIC_COUNT","abort","panic","panic_trace","stack_trace","CouldNotLoadElf","DEAFULT_MAX_HEAP_SIZE","Exited","FxSave","GoingUpAllocator","HEAP_OFFSET_FROM_ELF_END","INITIAL_STACK_SIZE_PAGES","PROCESS_ID_ALLOCATOR","Process","ProcessContext","ProcessError","ProcessState","Running","Scheduled","WaitingForPid","WaitingForTime","Yielded","add_child_exit","add_to_heap","allocate","allocate_process","argv","attach_fs_node_to_fd","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","children_exits","clone","clone","clone","clone_into","clone_into","clone_into","context","cs","current_dir","default","default","dr0","dr1","dr2","dr3","dr6","dr7","drop","ds","eq","es","exit","exit_code","file_index_allocator","finish_stdio","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","fs","fxsave","get_child_exit","get_current_dir","get_fs_node","gs","heap_max","heap_size","heap_start","id","id","into","into","into","into","into","into","is_user_address_mapped","new","next_id","open_filesystem_nodes","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent_id","parent_id","prepare_stack","push_fs_node","put_fs_node","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","rflags","rip","rsi","rsp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scheduler","set_current_dir","ss","stack_ptr_end","stack_size","state","switch_to_this_vm","syscalls","take_fs_node","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vm","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_process_meta","SCHEDULER","Scheduler","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","earliest_wait","exit_current_process","from","init_interrupt","interrupt_initialized","into","is_process_running","new","overflowing_as","overflowing_cast_from","processes","push_process","push_process","saturating_as","saturating_cast_from","schedule","scheduler_interrupt_handler","sleep_current_process","swap_context","syscall_interrupt_handler","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wait_for_pid","with_current_process","wrapping_as","wrapping_cast_from","yield_current_if_any","SYSCALLS","Syscall","check_ptr","handle_syscall","path_to_proc_absolute_path","ptr_as_mut","ptr_as_ref","sys_arg_to_file_mappings_array","sys_arg_to_mut_slice","sys_arg_to_path","sys_arg_to_slice","sys_arg_to_str","sys_arg_to_str_array","sys_blocking_mode","sys_chdir","sys_close","sys_create_pipe","sys_exit","sys_get_cwd","sys_get_file_meta","sys_get_time","sys_graphics","sys_inc_heap","sys_open","sys_open_dir","sys_read","sys_read_dir","sys_seek","sys_set_file_meta","sys_sleep","sys_spawn","sys_stat","sys_wait_pid","sys_write","cache_padded","once","spin","CachePadded","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","default","deref","deref_mut","eq","fmt","from","from","from","hash","into","into_inner","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","value","wrapping_as","wrapping_cast_from","ONCE_STATE_DONE","ONCE_STATE_INIT","ONCE_STATE_RUNNING","Once","OnceLock","_marker","az","az","borrow","borrow","borrow_mut","borrow_mut","call","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","default","drop","fmt","from","from","get","get_or_init","get_or_try_init","get_unchecked","init","into","into","is_completed","is_completed","new","new","once","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","set","state","to_owned","try_from","try_from","try_get","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","value","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","lock","mutex","remutex","rwlock","Lock","MASK","MAX_READERS","READ_LOCKED","UNLOCKED","WRITE_LOCKED","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","from","into","is_read_lockable","new","overflowing_as","overflowing_cast_from","read_lock","read_unlock","saturating_as","saturating_cast_from","state","try_from","try_into","try_read_lock","try_write_lock","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","write_lock","write_unlock","Mutex","MutexGuard","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","close_file","create_node","data","deref","deref_mut","drop","fmt","fmt","fmt","from","from","get_mut","get_time","granularity","into","into","lock","lock","lock","marker","name","new","open_root","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","owner_cpu","rating","read_dir","read_file","require_calibration","run_with","run_with_mut","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","set_file_size","to_string","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","write_file","ReMutex","ReMutexGuard","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","data","deref","drop","fmt","fmt","from","from","get_mut","into","into","lock","lock","lock","lock_count","marker","name","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","owner_cpu","read","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","write","RwLock","RwLockReadGuard","RwLockWriteGuard","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","data","data","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","get_mut","inner_lock","into","into","into","lock","lock","marker","marker","new","open_root","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","owner_cpu","read","read_dir","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write"],"q":[[0,"kernel"],[24,"kernel::acpi"],[27,"kernel::acpi::aml"],[623,"kernel::acpi::tables"],[1544,"kernel::acpi::tables::InterruptControllerStruct"],[1546,"kernel::acpi::tables::StaticResourceAffinity"],[1548,"kernel::collections"],[1549,"kernel::collections::ring"],[1578,"kernel::cpu"],[1653,"kernel::cpu::cpuid"],[1657,"kernel::cpu::flags"],[1658,"kernel::cpu::gdt"],[1861,"kernel::cpu::gdt::flags"],[1868,"kernel::cpu::idt"],[2100,"kernel::cpu::idt::flags"],[2104,"kernel::cpu::interrupts"],[2146,"kernel::cpu::interrupts::apic"],[2441,"kernel::cpu::interrupts::apic::io_apic"],[2455,"kernel::cpu::interrupts::handlers"],[2456,"kernel::cpu::interrupts::stack_index"],[2458,"kernel::cpu::msr"],[2462,"kernel::devices"],[2504,"kernel::devices::clock"],[2609,"kernel::devices::clock::hpet"],[2795,"kernel::devices::clock::rtc"],[2873,"kernel::devices::clock::tsc"],[2931,"kernel::devices::ide"],[3343,"kernel::devices::ide::ata"],[3402,"kernel::devices::ide::pci_cfg"],[3416,"kernel::devices::keyboard_mouse"],[3614,"kernel::devices::keyboard_mouse::keyboard"],[3651,"kernel::devices::keyboard_mouse::mouse"],[3690,"kernel::devices::keyboard_mouse::mouse::commands"],[3699,"kernel::devices::keyboard_mouse::mouse::packet"],[3703,"kernel::devices::keyboard_mouse::mouse::resolution"],[3707,"kernel::devices::keyboard_mouse::mouse::scaling"],[3714,"kernel::devices::keyboard_mouse::ps2"],[3751,"kernel::devices::keyboard_mouse::ps2::status"],[3759,"kernel::devices::pci"],[3933,"kernel::devices::pci::PciBar"],[3938,"kernel::devices::pci::reg"],[3955,"kernel::devices::pipe"],[4009,"kernel::executable"],[4011,"kernel::executable::elf"],[4543,"kernel::executable::elf::consts"],[4557,"kernel::fs"],[4998,"kernel::fs::FileSystemError"],[5000,"kernel::fs::fat"],[5637,"kernel::fs::fat::Directory"],[5640,"kernel::fs::fat::attrs"],[5647,"kernel::fs::mbr"],[5716,"kernel::fs::path"],[6054,"kernel::graphics"],[6084,"kernel::graphics::vga"],[6194,"kernel::io"],[6283,"kernel::io::console"],[6453,"kernel::io::console::vga_graphics"],[6484,"kernel::io::console::vga_text"],[6520,"kernel::io::uart"],[6615,"kernel::memory_management"],[6620,"kernel::memory_management::kernel_heap_allocator"],[6672,"kernel::memory_management::memory_layout"],[6746,"kernel::memory_management::physical_page_allocator"],[6803,"kernel::memory_management::virtual_memory_mapper"],[6940,"kernel::memory_management::virtual_memory_mapper::flags"],[6950,"kernel::memory_management::virtual_space"],[7063,"kernel::multiboot2"],[7697,"kernel::multiboot2::FramebufferColorInfo"],[7704,"kernel::multiboot2::MultiBootTag"],[7712,"kernel::panic_handler"],[7717,"kernel::process"],[7937,"kernel::process::scheduler"],[7975,"kernel::process::syscalls"],[8009,"kernel::sync"],[8012,"kernel::sync::cache_padded"],[8046,"kernel::sync::once"],[8111,"kernel::sync::spin"],[8115,"kernel::sync::spin::lock"],[8149,"kernel::sync::spin::mutex"],[8219,"kernel::sync::spin::remutex"],[8276,"kernel::sync::spin::rwlock"],[8364,"alloc::string"],[8365,"core::result"],[8366,"core::option"],[8367,"core::fmt"],[8368,"core::fmt"],[8369,"alloc::collections::btree::set"],[8370,"alloc::vec"],[8371,"alloc::boxed"],[8372,"core::any"],[8373,"core::any"],[8374,"core::clone"],[8375,"core::default"],[8376,"core::ops::function"],[8377,"alloc::sync"],[8378,"core::cmp"],[8379,"core::iter::traits::iterator"],[8380,"core::fmt"],[8381,"emerald_kernel_user_link::keyboard"],[8382,"emerald_kernel_user_link::process"],[8383,"emerald_kernel_user_link::file"],[8384,"emerald_kernel_user_link::file"],[8385,"emerald_kernel_user_link::file"],[8386,"core::iter::traits::collect"],[8387,"core::marker"],[8388,"embedded_graphics_core::pixelcolor::rgb_color"],[8389,"embedded_graphics_core::primitives::rectangle"],[8390,"embedded_graphics::draw_target::clipped"],[8391,"embedded_graphics::draw_target::color_converted"],[8392,"embedded_graphics_core::pixelcolor"],[8393,"core::convert"],[8394,"embedded_graphics_core::drawable"],[8395,"embedded_graphics_core::geometry::size"],[8396,"embedded_graphics_core::geometry::point"],[8397,"embedded_graphics::draw_target::translated"],[8398,"core::fmt"],[8399,"core::fmt"],[8400,"increasing_heap_allocator::allocator"],[8401,"increasing_heap_allocator"],[8402,"core::convert"],[8403,"core::fmt"],[8404,"core::panic::panic_info"],[8405,"emerald_kernel_user_link::syscalls"],[8406,"emerald_kernel_user_link::process"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","inner state of the parser to store information about the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Renamed to not be confused with <code>Clone::clone</code>","Renamed to not be confused with <code>Clone::clone</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Shared state all method names","","","","","","","","all found names (aliases, fields, etc.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","similar to <code>Self::parse_term_arg</code>, but doesn’t expect to …","similar to <code>Self::parse_term_arg</code>, but cannot call methods, …epresent v2 and above","","","","","","","","","","","","","This is inside DSDT andeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","","","Safety","","","","","Safety","","Will fill the table from the header data, and zero out …","","Will fill the table from the header data, and zero out …","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","allocates a newfixed size ring buffer","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","SAFETY: the data pointed to by <code>gdtr</code> must be static and …","SAFETY: the data pointed to by <code>ldtr</code> must be static and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","System Descriptor Entry for GDT","SAFETY: TSS is only used when <code>GDT</code> is locked, so its safe …","Task State Segment","","User Descriptor Entry for GDT","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","This should be called only once, otherwise, it will crash","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Must make sure that the data is a valid descriptor …","Must make sure that the data is a valid descriptor …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Puts the handler in the IDT and returns the …","","Puts the handler in the IDT and returns the …","Puts the handler in the IDT and returns the …","","","","","","","","","","","Returns the argument unchanged.","","Global handlers that have several purposes and doesn’t …","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","disable the Local interrupts 0 and 1","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codenforms the device that it is cloned.","Informs the device that it is closed.","","","Returns the argument unchanged.","","","Devices such as PS/2 keyboard, mouse, serial ports, etc.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Open the device. This tells the device manager that when …","","","","","","","","","","","","","","Accurate always increasing time source","","","","","","","","","","","","","","","","","","","","","","","","","","device used to get the time","devices sorted based on their rating","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the current time of the device with no relation to …","Returns the granularity of the device in nanoseconds, i.e. …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The last time we ticked the system time","Returns the name of the device","nanoseconds added to <code>seconds</code>","","","","","","","","","","Returns the rating of the device, i.e. how good it is The …","Returns true if the device needs to be calibration i.e. it …","","Used to determine the outside world time and use it as a …","","","","","","","seconds passed since a fixed point in time","The time when the system was started","The system time since the start","","System time","","","","","","","","","","","","","","","","","","","","","","","","Will update the device if this one is different","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of femtoseconds per counter tick","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is very inaccurate, but we only use it for <code>ClockDevice</code>…","(365.25925925925924 * SECONDS_PER_DAY); idk why this works …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Frequency of the TSC, how many nano seconds per cycle …","","","","","","","The latency of reading the TSC","","","","","","","Nanoseconds offset that we started counting from it may be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Note that this is only valid if the device is not busy and …his is just a helper definition, and should not be used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","Safety","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of key events that can be buffered before being …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Number of events that can be buffered before being …","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pipe is a device that allows two processes to communicate …","Represent one side of a pipe. Check <code>create_pipe_pair</code> for …","","","","","","","The buffer of the pipe.","","","","","","","","","","Create a connected pipe pair. The first returned file is …","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","Dynamic linking information","Dynamic loader symbol table","","","","","","","","","","","","","","","","","Extended section indices","","Array of destructors","Section group","Symbol hash table","Array of constructors","","","","","Uninitialized space","","Note section","","Unused","Number of defined types","","Start OS-specific","Array of pre-constructors","","","","Program data","","Relocation entries, no addends","Relocation entries with addends","","","","Reserved","String table","Symbol table","","","","","","","Address in memory image","Address in memory image","","","","","Alignment","Alignment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Entry size if section holds table (such as symbol table)","Entry size if section holds table (such as symbol table)","","","","","","","","","","Section flags","Section flags","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Misc info","Misc info","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Link to other section","Link to other section","","","","","","","","","","Section name (string tbl index)","Section name (string tbl index)","","","","","","","","Offset in file","Offset in file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Size of section","Size of section","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Section type","Section type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is not used at all, just an indicator in …","","","","","","","","","","A handle to a directory, it has the inode which controls …","","","","","","","","","","","A handle to a file, it has the inode which controls the …","","","","","","","","","","A node in the filesystem, can be a file or a directory","","Unlike InvalidInput, this typically means that the …","","","","","","","A node of the filesystem, it can be anything, a file, a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is a move verbose method than <code>Clone::clone</code>, as I want …","","","","","","","","","","Loads the hard disk specified in the argument it will load …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Retrieves the file system mapping for a given path.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Open the inode of a path, this include directories and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The position of this file in the parent directory the size …","","","A library for parsing, manipulating Paths that follow unix …ile Allocation Table buffer","","","","","","","","","","","","","Buffer for reading or writing file datane bit for each sector in the FAT","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","A temmporary initilizer for the FAT, will be replaced with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of active users of this clustereturns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over <code>Path</code> and its ancestors.","","A single component of a path.","An iterator over the <code>Component</code>s of a <code>Path</code>.","A reference to the current directory, i.e., <code>.</code>.","","","An iterator over the <code>Component</code>s of a <code>Path</code>, as <code>str</code> slices.","A normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.","A reference to the parent directory, i.e., <code>..</code>.","A slice of a path (akin to <code>str</code>).","An owned, mutable path (akin to <code>String</code>).","","The root directory component, appears after any prefix and …","use unix pathes seperator","","Component parsing works by a double-ended state machine; …","An error returned from <code>Path::strip_prefix</code> if the prefix …","","","","","","","","Produces an iterator over <code>Path</code> and its ancestors.","Extracts a slice corresponding to the portion of the path …","Extracts a slice corresponding to the portion of the path …","Coerces to a <code>Path</code> slice.","","","","","","","","","","","Yields the underlying bytes.","Extracts the underlying <code>str</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Invokes <code>capacity</code> on the underlying instance of <code>String</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Invokes <code>clear</code> on the underlying instance of <code>String</code>.","","","","","","","","","","","","","","","","","","","Produces an iterator over the <code>Component</code>s of the path.","","","Returns a newtype that implements Display for safely …","Determines whether <code>child</code> is a suffix of <code>self</code>.","","","","","","","","","","","","","","","Returns the final component of the <code>Path</code>, if there is one.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a <code>String</code> into a <code>PathBuf</code>","","Returns the argument unchanged.","","","","Checks if the path ends with a separator.","Check if the first char is <code>/</code>","Returns <code>true</code> if the <code>Path</code> has a root.","Is the <em>original</em> path rooted?","","","","","","Should the normalized path include a leading . ?","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>PathBuf</code> into a boxed <code>Path</code>.","","","","","","Consumes the <code>PathBuf</code>, yielding its internal <code>String</code> storage.","Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …","Checks if the path is empty.","Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.","Checks if the path is the root directory.","","","Produces an iterator over the path’s components viewed …","","Creates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.","","Directly wraps a string slice as a <code>Path</code> slice.","Allocates an empty <code>PathBuf</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Path</code> without its final component, if there is …","","","","","","","","","","","","","","","","","","Truncates <code>self</code> to <code>self.parent</code>.","Extends <code>self</code> with <code>path</code>.","Invokes <code>reserve</code> on the underlying instance of <code>String</code>.","Invokes <code>reserve_exact</code> on the underlying instance of <code>String</code>.","","","","","","","","","","","","","","","","","Updates <code>self.file_name</code> to <code>file_name</code>.","Invokes <code>shrink_to</code> on the underlying instance of <code>String</code>.","Invokes <code>shrink_to_fit</code> on the underlying instance of <code>String</code>.","Determines whether <code>base</code> is a prefix of <code>self</code>.","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.","","","","","","","","","Converts a <code>Path</code> to an owned <code>PathBuf</code>.","Yields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.","","","Converts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>PathBuf</code> with a given capacity used to create …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given file …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","blit the src framebuffer to the current framebuffer <code>fast</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the position in the memory buffer for a given pixel …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The size of the memory buffer required to hold the …","","","","","","","","","","","Get the pixel slice at a given position (read-only)","Get the pixel slice at a given position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an early console, this is used before the kernel …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","SAFETY","Create a late console, this is used after the kernel heap …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","SAFETY: must ensure that there is no console running at …","","","","","","","","","","","","","","","SAFETY","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A temporary tool to allow for easy printing to the screen. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","White on black text","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Enables the divisor latch access bit","Got data","Trasmitter is empty","","","Controls the Data Terminal Ready Pin","Controls the loopback mode","Controls the Out1 pin","Controls the Out2 pin (used for interrupts)","Controls the Request To Send Pin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Will return <code>true</code> if the test pass, otherwise, the serial …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","SAFETY: <code>init</code> must be called before calling this function","","","","","","","","","","","","","","","","SAFETY: <code>init</code> must be called before calling this function","","","","","This very specific to 64-bit x86 architecture, if this is …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SAFETY: this must be called after <code>init</code>","SAFETY: this must be called after <code>init</code>","SAFETY: this must be called after <code>init</code>","","","","","","","","","","","","","","SAFETY: this must be called after <code>init</code>","SAFETY: this must be called after <code>init</code>","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An ugly hack used in <code>do_for_every_user_entry</code> to get a …","","","The flags to use for the mapping, look at flags for more …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","The physical address to map, if <code>None</code> then it will be …","","","","","","","","","The size of the mapping, this is constrained by the memory …","Safety","Safety","","","","","","","","","","","","","","Removes mapping of a virtual entry, it will free it from …","<code>is_allocated</code> is used to indicate if the physical pages …","","","","","","","","","","The virtual address to map, this is constrained by the …","","","","","","","","","","","","","","","","","","","","","Contains the error value","","Contains the success value","","","","A wrapper over memory that is defined by its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>(virtual_start, is_fully_inside)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new virtual space for the given <code>physical_start</code> on …","Create a new virtual space for the given <code>physical_start</code> on …","Create a new virtual space for the given <code>physical_start</code> on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>None</code> if its not mapped, or if the <code>physical_start</code> is …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codedd/Remove to/from the heap and return the previous end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Exit the current process, and move the <code>all_state</code> to the …","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the absolute path, if the <code>path</code> is relative, it will …","","","Allocates space fro the mapping and copies them","","","","","Allocates space for the strings and copies them","","","","","","","","","","","","","","","","","","","","","","","","","Pads and aligns a value to the length of a cache line.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the inner value.","Pads and aligns a value to the length of a cache line.","","","","","","","","","","","","","","","","","","","<code>PhantomData</code> to make sure dropck understands we’re …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A raw spin lock, provides <code>read_lock</code>, <code>read_unlock</code>, …","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Try to lock the lock, returns true if successful","Try to lock the lock, returns true if successful","","","","","","","SAFETY: the caller must assure that there is only one …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","We know statically that no one else is accessing the lock, …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A special method to allow accessing the variable inside …","A special method to allow accessing the variable inside …","","","","","","","","","","","","","","","","","","","","","","","A mutex that can be intered more than once by the same CPU","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","We know statically that no one else is accessing the lock, …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,15,15,0,0,0,15,15,16,17,15,15,14,10,15,15,15,14,14,14,15,15,15,15,15,15,14,0,16,17,15,15,17,15,15,15,15,16,15,0,0,15,15,15,15,15,17,15,0,10,10,15,15,15,15,15,15,15,15,15,16,17,15,15,0,15,15,15,15,16,17,15,22,15,17,15,15,15,15,15,15,15,0,0,15,0,15,0,14,15,17,15,0,15,10,22,15,15,15,0,15,15,15,15,15,15,0,0,0,15,15,15,0,0,15,15,15,15,10,15,15,15,14,15,4,4,8,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,9,4,9,0,0,0,0,0,0,0,0,0,0,0,0,13,20,21,4,4,20,21,8,10,13,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,9,9,21,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,4,18,19,20,21,8,24,25,4,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,18,19,20,21,8,23,24,25,0,9,9,9,9,9,9,9,9,9,9,9,9,23,9,19,19,19,9,25,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,25,13,18,8,23,24,25,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,13,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,9,9,9,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,24,24,24,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,9,10,13,14,15,16,17,18,19,20,21,22,8,23,24,25,4,0,40,0,0,0,0,0,40,0,0,0,0,40,0,40,0,56,56,0,0,56,0,40,0,0,42,0,42,0,42,0,42,0,56,0,42,56,0,0,42,56,0,0,0,0,0,0,40,40,0,40,42,56,0,40,0,49,49,43,47,60,50,50,52,43,57,49,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,51,58,58,39,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,45,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,49,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,36,38,57,59,60,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,38,38,49,49,62,62,49,49,49,54,37,51,66,36,49,49,41,43,45,46,47,49,57,58,59,60,62,49,49,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,41,52,55,39,42,56,36,36,0,0,0,37,0,45,46,44,49,49,49,49,49,37,39,51,49,49,53,53,53,53,41,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,44,44,61,66,36,38,58,58,41,48,47,57,51,49,63,65,36,38,38,38,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,49,49,51,49,49,49,49,49,49,49,49,49,49,49,58,59,60,61,62,57,57,49,36,50,50,66,36,44,48,49,50,55,58,59,61,62,49,55,58,59,62,58,49,49,65,36,38,63,66,63,65,36,49,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,49,65,36,38,49,49,49,45,55,53,38,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,53,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,59,49,49,49,49,49,49,49,49,49,49,66,36,322,322,323,323,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,0,72,72,72,72,72,72,72,0,72,72,72,0,0,72,0,72,72,0,0,0,0,0,0,72,0,0,0,72,0,72,72,0,0,0,74,0,74,0,0,0,0,72,72,72,0,0,0,72,72,72,72,72,0,0,72,72,72,0,0,0,0,0,0,72,72,72,72,72,72,72,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,80,78,81,75,82,78,77,79,80,75,79,80,79,80,79,80,80,81,75,82,78,77,79,80,81,75,82,78,77,79,80,81,75,82,78,77,79,80,81,75,82,78,77,79,80,81,75,82,78,77,79,80,77,79,80,77,79,80,78,77,79,80,81,82,78,79,80,0,79,80,77,81,75,82,78,77,79,80,77,82,0,0,78,0,81,75,82,78,77,79,80,81,81,82,82,75,80,79,82,82,81,75,82,78,77,79,80,81,75,82,78,77,79,80,78,78,81,81,81,81,81,81,75,82,78,77,79,80,81,75,82,78,77,79,80,77,79,80,81,75,82,78,77,79,80,81,75,82,78,77,79,80,82,81,75,82,78,77,79,80,81,75,82,78,77,79,80,81,75,82,78,77,79,80,82,82,81,75,82,78,77,79,80,81,75,82,78,77,79,80,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,83,83,76,84,85,86,87,76,83,76,84,85,86,87,83,76,84,85,86,87,83,83,83,76,84,85,86,87,83,76,84,85,86,87,83,76,84,85,86,87,84,85,86,87,84,85,86,87,83,83,84,83,84,85,86,87,0,0,83,83,83,85,85,85,85,85,85,85,83,87,86,85,0,87,84,85,86,86,83,76,84,85,86,87,85,83,85,83,83,0,83,76,84,85,86,87,83,83,87,76,83,83,86,87,87,87,83,83,76,84,85,86,87,83,76,84,85,86,87,87,83,87,85,85,85,85,85,85,85,85,85,85,85,85,85,85,83,83,83,83,86,84,84,85,84,0,83,76,84,85,86,87,83,76,84,85,86,87,83,83,87,87,87,87,87,87,87,87,83,84,83,84,85,86,87,83,76,84,85,86,87,83,76,84,85,86,87,83,76,84,85,86,87,83,76,84,85,86,87,83,76,84,85,86,87,83,83,83,76,84,85,86,87,83,76,84,85,86,87,83,87,0,0,0,0,0,0,0,0,0,0,0,90,0,91,0,0,91,0,91,91,91,91,91,91,0,0,91,91,0,91,91,0,91,91,91,91,91,91,0,91,91,91,91,91,91,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,0,100,324,324,324,324,324,324,324,0,92,0,92,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,96,93,96,93,100,96,93,324,92,0,324,0,324,324,324,324,324,98,99,324,101,100,97,97,92,96,93,92,97,324,97,324,0,92,92,324,324,324,324,98,99,324,101,100,97,92,96,93,0,92,100,97,0,92,324,324,324,97,92,92,97,92,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,324,324,98,99,100,97,98,99,96,93,100,324,97,0,92,100,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,92,92,324,0,324,324,324,324,324,324,324,96,93,324,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,324,93,93,93,96,93,96,96,96,93,96,93,98,99,324,101,100,97,92,96,93,98,99,324,101,100,97,92,96,93,98,99,97,100,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,0,102,102,104,104,104,0,0,0,104,0,102,104,104,0,0,0,0,102,0,104,104,102,104,104,104,104,104,104,104,102,0,0,0,0,0,0,107,108,107,112,108,107,112,108,107,112,108,107,112,108,107,112,108,107,112,108,107,0,107,107,107,112,108,107,108,107,112,108,107,108,108,109,109,0,0,112,108,107,112,109,107,112,108,112,108,107,112,108,107,107,109,109,0,108,112,108,107,112,108,107,107,112,112,107,108,112,108,112,108,112,108,107,112,108,107,112,108,107,0,112,108,107,112,108,107,112,108,107,112,112,108,107,112,108,107,0,0,0,0,0,0,0,0,0,0,0,113,114,117,113,115,116,120,114,115,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,113,115,113,115,116,116,116,114,114,114,0,115,113,115,116,120,114,117,117,113,115,116,120,114,117,116,120,120,120,0,117,117,117,117,117,113,115,116,120,114,117,117,117,117,113,115,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,114,113,116,120,120,120,120,117,113,115,116,120,114,117,113,115,116,120,114,116,114,114,113,113,114,0,117,120,113,115,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,113,115,116,120,114,117,116,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,122,111,122,111,122,111,122,111,111,122,111,122,122,122,122,122,122,122,122,111,122,111,111,122,111,122,111,111,122,122,111,111,122,111,122,111,111,122,111,122,122,122,122,122,111,122,111,122,111,122,111,122,111,122,111,122,111,122,122,0,0,124,123,124,123,124,123,123,124,123,124,123,124,123,124,0,123,124,123,123,123,123,123,124,123,123,124,123,123,124,123,124,123,123,123,123,123,124,123,124,123,123,123,124,123,124,123,124,123,124,123,124,123,124,123,124,123,125,0,125,0,0,131,0,131,129,0,0,0,0,0,0,0,0,129,129,131,133,133,0,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,131,125,126,127,128,129,130,131,128,127,133,133,127,133,133,133,132,132,133,132,130,128,130,125,130,128,128,133,128,133,125,126,127,128,129,130,133,131,131,132,134,125,126,127,128,129,130,133,131,132,134,133,0,133,0,0,134,126,132,134,133,132,134,133,125,126,127,128,129,130,133,131,132,134,134,133,133,133,132,132,133,128,130,133,133,133,134,133,133,133,133,133,133,133,133,133,133,128,130,133,132,132,133,133,133,133,133,133,133,133,133,133,133,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,130,130,0,134,133,132,130,130,130,133,127,127,127,127,127,127,127,132,134,134,133,133,133,133,133,133,133,133,133,133,133,133,133,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,133,132,134,128,133,132,132,133,133,133,133,133,133,133,133,133,133,133,125,126,127,128,129,130,131,131,133,133,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,0,126,125,126,127,128,129,130,133,131,132,134,133,133,133,133,133,133,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,133,133,133,133,127,127,130,130,128,128,128,130,128,133,125,126,127,128,129,130,133,131,132,134,125,126,127,128,129,130,133,131,132,134,128,127,127,127,127,130,133,133,133,132,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,138,0,0,0,0,0,0,0,0,0,0,136,138,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,141,143,144,139,140,138,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,139,140,136,138,141,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,0,141,0,141,0,136,138,141,143,144,139,140,136,0,141,136,0,141,143,144,139,140,141,136,138,141,143,144,139,140,136,138,141,143,144,139,140,0,136,0,141,0,143,144,141,143,144,136,138,141,143,144,139,140,136,138,141,143,144,139,140,138,136,138,139,140,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,138,141,143,144,139,140,136,136,138,141,143,144,139,140,136,138,141,143,144,139,140,138,138,0,0,0,0,0,146,146,146,146,146,146,146,146,146,0,0,146,146,0,146,146,146,146,146,146,325,325,146,146,146,146,146,146,146,146,146,146,0,0,0,0,149,149,149,149,149,149,0,149,149,149,149,149,149,149,149,149,149,0,149,326,326,149,0,149,149,0,149,149,149,149,149,149,149,149,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,0,0,0,0,0,0,0,150,150,150,150,150,150,150,150,151,150,151,150,150,150,150,151,0,0,0,0,0,150,150,0,150,150,150,150,150,150,150,150,135,153,135,150,151,105,105,153,135,150,151,105,153,135,150,151,105,153,105,105,153,135,150,151,105,153,135,150,151,105,153,135,150,151,105,150,151,105,150,151,105,153,105,105,152,105,150,150,151,105,153,135,150,151,105,153,105,151,151,105,105,105,153,135,150,151,105,153,153,150,153,153,135,150,151,105,153,135,150,151,105,105,152,105,105,0,105,0,153,135,150,151,105,153,135,150,151,105,150,151,105,150,153,135,150,151,105,153,135,150,151,105,153,135,150,151,105,153,135,150,151,105,153,135,150,151,105,105,153,135,150,151,105,153,135,150,151,105,105,105,0,105,327,328,327,327,328,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,154,156,154,156,154,156,156,154,156,154,156,154,154,154,154,0,156,154,156,154,154,156,154,154,154,156,154,156,154,154,156,156,154,156,154,156,154,156,154,156,154,156,154,156,154,156,154,156,154,154,156,0,0,167,170,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,174,170,170,170,170,167,174,174,167,170,167,170,167,170,170,167,170,170,167,161,161,170,167,170,170,160,160,167,170,170,170,167,174,162,162,162,160,171,172,161,160,168,169,171,172,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,166,162,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,162,163,164,165,166,167,168,169,161,170,171,172,160,173,162,163,164,165,166,167,168,169,161,170,171,172,160,173,0,173,162,162,162,166,163,164,157,160,171,172,161,168,169,161,160,163,164,168,169,171,172,174,162,163,164,166,167,168,169,161,170,171,172,173,157,174,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,167,170,166,157,165,165,163,164,160,171,172,173,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,166,166,166,160,171,172,161,160,157,162,162,161,168,169,173,171,172,173,160,173,161,160,168,169,171,172,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,161,168,169,166,163,164,166,163,164,166,163,164,157,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,166,163,164,166,163,164,166,163,164,166,163,164,157,157,160,171,172,166,162,163,164,165,166,167,168,169,161,170,171,172,160,173,0,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,161,160,168,169,171,172,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,162,161,168,169,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,174,162,163,164,165,166,167,168,169,161,170,171,172,160,173,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,103,329,103,175,103,0,0,176,178,0,103,175,0,0,103,0,103,0,176,178,103,0,0,103,0,0,0,0,175,103,103,103,103,103,103,0,0,103,103,175,103,175,329,175,103,155,175,176,176,176,178,180,178,180,329,186,190,155,177,176,175,180,182,183,178,185,103,182,183,175,175,175,155,155,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,177,175,180,182,183,178,155,177,175,180,182,183,178,184,185,175,0,184,177,185,155,185,182,183,178,182,183,178,182,177,175,155,182,0,175,0,177,155,155,177,175,180,182,183,178,185,103,329,186,190,155,177,176,176,176,175,180,182,183,178,178,178,185,103,103,155,177,176,190,0,190,175,155,177,329,186,190,155,177,176,175,180,182,183,178,185,103,178,178,155,178,155,155,190,0,0,190,180,178,180,183,178,182,182,155,177,176,155,0,184,186,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,180,180,180,180,0,155,177,155,177,155,177,155,177,184,186,184,175,155,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,155,155,184,155,182,180,155,155,182,178,182,180,180,175,177,175,180,182,183,178,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,182,178,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,175,183,329,186,190,155,177,176,175,180,182,183,178,185,103,329,186,190,155,177,176,175,180,182,183,178,185,103,155,184,330,330,205,0,0,0,0,0,0,0,0,0,0,205,0,204,0,204,204,0,0,0,0,0,0,0,0,0,205,206,206,187,197,205,197,208,187,211,205,208,187,206,211,195,196,193,194,197,197,197,195,195,196,0,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,201,200,201,198,193,200,201,200,201,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,199,198,198,203,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,196,199,200,201,202,203,204,205,206,195,196,207,208,200,201,202,203,204,205,206,195,196,207,208,207,210,193,0,195,195,195,194,194,194,194,210,198,198,209,193,194,210,199,199,199,200,201,194,209,207,194,204,205,206,195,201,203,193,202,202,203,201,198,198,193,199,0,0,195,200,201,194,199,195,195,193,194,193,187,200,201,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,205,201,201,193,194,203,209,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,194,197,203,195,195,195,211,199,0,193,196,194,199,203,196,196,196,196,195,194,198,199,193,194,199,194,198,203,203,203,193,193,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,199,193,193,210,209,193,200,201,201,198,203,194,201,198,198,203,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,194,207,199,198,203,203,196,193,195,193,193,197,200,201,202,203,204,205,206,195,196,207,208,205,198,203,203,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,209,209,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,198,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,193,200,201,198,193,200,201,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,197,194,211,187,200,201,202,203,204,205,198,206,195,196,207,208,210,209,199,193,199,197,197,193,331,332,332,0,0,0,0,0,0,0,0,0,212,213,213,212,212,213,212,213,212,213,212,213,212,213,212,213,212,213,213,213,212,212,212,213,212,213,212,213,213,212,213,213,213,212,213,212,213,213,212,212,213,212,213,213,213,212,212,212,212,212,212,213,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,0,220,0,0,219,0,220,0,219,219,0,0,220,219,0,220,0,0,188,188,214,214,188,188,188,188,217,218,214,188,188,219,219,217,217,218,218,214,214,188,219,221,220,219,217,218,216,214,215,217,188,221,220,219,217,218,216,214,214,215,188,221,220,219,217,218,216,214,215,214,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,214,220,219,217,218,216,214,215,220,219,217,218,216,214,215,188,219,217,214,188,214,214,188,188,188,188,188,188,188,220,219,217,214,214,214,214,215,214,188,217,188,221,221,220,219,217,218,216,214,215,215,221,220,219,217,218,216,214,214,214,214,215,214,214,217,188,0,188,217,217,188,219,214,0,217,188,218,214,221,220,219,217,218,216,214,215,214,188,217,218,216,214,214,188,188,188,188,0,0,188,0,188,217,188,214,217,218,216,216,217,218,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,188,217,217,217,188,188,188,188,188,220,219,217,214,214,214,214,221,217,214,214,214,214,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,214,214,214,188,188,188,220,219,217,218,216,214,215,188,188,221,215,188,217,217,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,188,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,214,188,221,220,219,217,218,216,214,215,221,220,219,217,218,216,214,215,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,227,227,0,0,0,0,0,230,236,229,229,229,229,229,230,236,229,230,236,229,229,230,230,236,229,230,236,229,230,236,229,229,229,229,229,230,230,229,0,229,236,229,229,230,229,230,236,236,230,236,229,230,230,0,230,236,229,236,236,230,229,230,236,229,230,236,229,230,236,229,236,230,230,230,229,241,230,236,230,236,229,230,236,229,229,236,230,229,230,236,229,230,236,229,230,236,229,230,236,229,230,236,229,230,230,236,229,230,236,229,241,230,0,0,0,249,0,0,0,0,246,247,248,246,247,248,246,247,248,246,247,248,246,247,248,246,247,248,246,247,248,246,247,248,0,249,246,247,248,246,247,248,246,247,248,246,247,248,0,0,246,247,248,246,247,248,246,247,248,246,247,248,246,247,248,0,246,247,248,246,247,248,246,247,248,246,247,248,0,246,247,248,246,247,248,246,247,248,246,247,248,0,252,252,252,252,252,252,252,252,252,252,0,0,0,252,255,0,252,255,0,252,252,0,0,252,252,255,254,256,252,253,253,251,253,255,254,256,252,253,255,254,256,252,253,255,254,256,252,253,255,254,256,252,253,255,254,256,252,253,252,253,252,253,256,0,256,253,0,254,255,253,256,252,253,253,255,254,256,252,253,252,251,254,255,255,0,255,254,256,252,253,256,255,256,255,254,256,252,253,255,254,256,252,253,260,254,256,255,0,255,254,256,252,253,255,254,256,252,253,251,252,253,255,254,256,252,253,255,254,256,252,253,255,254,256,252,253,254,256,255,254,256,252,253,255,254,256,252,253,0,0,256,255,254,256,252,253,255,254,256,252,253,260,254,256,251,254,256,254,256,0,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,0,0,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,264,265,0,0,265,265,0,0,0,265,265,0,0,0,0,0,265,265,265,0,0,0,265,264,259,265,264,259,265,264,259,265,264,259,265,264,259,265,264,259,264,259,264,259,265,264,259,259,0,259,265,264,259,259,259,265,264,259,265,264,259,259,0,265,264,259,265,264,259,264,259,265,264,259,265,264,259,259,265,264,259,265,264,259,265,264,259,265,264,259,265,264,259,259,0,0,0,0,0,0,0,0,0,266,268,268,266,268,266,268,266,268,266,268,266,268,266,266,268,266,268,266,268,266,266,268,266,268,268,268,266,268,266,268,266,268,266,266,268,266,268,266,268,266,268,266,268,266,268,266,268,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,271,0,271,0,271,272,0,272,272,272,272,272,0,0,0,272,272,272,0,272,0,271,0,0,0,0,0,272,272,0,0,272,272,0,0,0,272,272,272,272,272,272,0,272,272,0,0,0,0,274,0,333,274,333,274,333,274,333,274,333,274,333,274,274,0,274,274,333,274,274,0,274,333,274,274,274,333,333,274,333,274,333,274,333,274,274,0,333,274,333,274,333,274,333,274,333,274,274,333,274,333,274,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,275,275,275,275,275,275,276,275,159,277,276,275,159,277,276,275,159,277,276,275,159,277,276,275,159,277,276,275,159,277,277,0,277,159,159,159,159,275,276,0,277,277,275,276,275,159,277,275,0,159,0,0,0,0,0,276,275,159,277,159,0,159,159,159,0,159,159,276,275,159,277,276,275,159,277,159,275,277,276,275,159,277,276,275,159,277,277,0,159,277,276,275,159,277,276,275,159,277,276,275,159,277,159,0,159,276,275,159,277,276,275,159,277,277,276,275,159,277,276,275,159,277,0,0,0,0,0,0,0,0,0,0,280,280,334,280,334,280,0,0,0,0,0,0,279,0,280,68,283,279,280,68,283,279,280,68,283,279,280,68,283,279,280,68,283,279,280,68,283,279,68,279,0,0,279,68,68,68,279,279,280,68,68,280,68,283,279,279,280,68,283,279,68,68,68,280,68,283,279,280,68,283,279,283,280,68,283,279,280,68,283,279,68,283,68,280,68,283,279,280,68,283,279,280,68,283,279,280,68,283,279,280,68,283,279,283,283,280,68,283,279,280,68,283,279,294,295,294,295,0,293,294,294,0,293,293,293,293,295,295,295,293,293,293,0,293,0,0,0,287,293,293,0,0,0,293,287,295,295,0,293,0,0,0,295,295,0,0,0,0,0,293,293,295,295,294,295,287,295,295,294,295,295,0,0,293,0,335,336,239,337,297,289,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,289,289,338,296,289,289,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,336,239,289,289,288,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,285,286,287,239,288,289,290,291,292,293,285,286,287,239,288,289,290,291,292,293,239,290,292,292,292,292,298,2,2,289,292,292,2,335,285,286,294,295,292,2,294,296,296,285,295,297,297,286,287,239,288,289,290,291,292,293,2,289,336,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,287,2,289,289,336,239,289,289,290,290,290,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,298,285,286,287,338,296,291,337,338,296,297,291,285,286,2,289,290,290,298,285,286,337,297,288,288,292,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,298,337,297,336,239,289,288,288,289,289,298,285,286,338,336,2,288,289,289,289,289,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,288,339,288,2,285,286,287,239,288,289,290,291,292,293,2,296,297,2,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,339,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,2,288,288,292,288,288,337,297,289,336,239,289,289,289,289,289,289,289,289,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,335,337,338,336,339,298,2,294,296,285,295,297,286,287,239,288,289,290,291,292,293,289,340,340,340,340,341,340,340,342,343,344,345,343,346,347,343,0,0,0,0,0,304,0,307,0,0,0,0,0,0,0,0,0,307,307,307,307,307,300,300,303,300,300,300,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,300,305,306,307,305,306,307,300,306,300,305,306,306,306,306,306,306,306,300,306,307,306,300,300,300,300,304,305,306,307,303,300,304,304,305,306,307,306,306,300,300,300,306,300,300,300,300,300,303,300,304,305,306,307,300,303,303,300,303,300,304,305,306,307,303,300,304,305,306,307,300,300,300,300,300,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,303,300,304,305,306,307,303,300,304,305,306,307,0,300,306,300,300,300,300,0,300,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,303,300,304,305,306,307,300,303,300,304,305,306,307,303,300,304,305,306,307,300,0,0,308,308,308,308,308,308,308,0,308,308,308,308,0,308,308,308,308,0,308,308,308,0,0,0,0,0,308,308,308,308,308,0,0,308,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,0,0,0,0,0,316,315,316,315,316,315,316,315,315,316,315,316,315,316,316,316,315,316,316,315,316,316,316,316,316,316,315,316,315,316,315,316,316,315,316,315,316,315,316,315,316,316,315,316,315,316,316,315,316,315,316,315,316,315,316,316,315,316,315,316,0,0,0,0,0,0,0,0,0,0,317,317,317,317,317,317,317,317,0,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,0,0,121,240,121,240,121,240,121,240,121,240,121,240,121,121,121,240,240,240,121,240,240,121,240,121,121,121,121,240,121,121,240,240,121,121,121,121,240,121,240,121,121,121,121,121,121,121,121,240,121,240,121,240,121,240,121,240,121,121,240,121,240,121,240,121,240,121,240,121,0,0,258,318,258,318,258,318,258,318,258,318,258,318,258,318,318,258,318,258,318,258,258,318,258,258,318,258,318,258,258,258,318,258,318,258,258,258,318,258,318,258,318,258,318,258,258,318,258,318,258,318,258,318,258,318,258,0,0,0,321,319,320,321,319,320,321,319,320,321,319,320,321,319,320,321,319,320,321,319,319,320,320,319,320,321,319,319,320,320,321,319,320,321,319,321,319,320,321,320,319,320,321,321,321,319,320,321,319,320,321,321,321,321,319,320,321,319,320,319,320,321,319,320,321,319,320,321,321,321,319,320,321,319,320,321,319,320,321,319,320,321,319,320,321],"f":[0,0,0,0,0,0,0,0,0,0,[[],1],0,0,0,[2,3],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[4,5,6],1],[[4,7],1],[8,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,6],[[11,[1,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,[[11,[1,10]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[10,10],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[8,8],[23,23],[24,24],[25,25],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[9,9],[4,4],0,[[5,16,16,17,26,6],27],[[5,[28,[16]],[28,[17]],26,6],27],[[26,6],27],[[[28,[22]],26,6],27],[[16,16,17,26,6],27],[[8,26,6],27],[[5,23,26,6],27],[[18,26,6],27],[[17,26,6],27],[[15,26,6],27],[[16,26,6],27],[[[28,[15]],26,6],27],[[13,26,6],27],0,0,[[4,5],[[12,[6]]]],[[4,5],29],0,0,0,[[10,26],27],[[13,26],27],[[13,26],27],[[14,26],27],[[15,26],27],[[16,26],27],[[17,26],27],[[18,26],27],[[19,26],27],[[20,26],27],[[21,26],27],[[22,26],27],[[8,26],27],[[23,26],27],[[24,26],27],[[25,26],27],[[4,26],27],[[9,6],[[11,[1,10]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[11,[9,10]]]],[9,[[11,[30,10]]]],[9,[[11,[6,10]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[[31,[7,6]],[32,[7]]],4],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[9,[[11,[18,10]]]],[9,[[11,[19,10]]]],[9,[[11,[20,10]]]],[9,[[11,[21,10]]]],[9,[[11,[8,10]]]],[9,[[11,[23,10]]]],[9,[[11,[24,10]]]],[9,[[11,[25,10]]]],[[[28,[30]]],[[11,[13,10]]]],[9,[[11,[[1,[30,[33,[22]]]],10]]]],[9,[[11,[7,10]]]],[9,[[11,[13,10]]]],[9,[[11,[[34,[17]],10]]]],[9,[[11,[15,10]]]],[9,[[11,[16,10]]]],[[9,29,29],[[11,[16,10]]]],[9,[[11,[16,10]]]],[9,[[11,[16,10]]]],[9,[[11,[[33,[15]],10]]]],[9,[[11,[30,10]]]],0,0,[[9,29,5],6],0,0,0,[9,6],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[9,30],[[11,[[12,[30]],10]]]],[[9,30],[[11,[[12,[30]],10]]]],[9,[[11,[[12,[7]],10]]]],[[9,30],[[11,[[12,[15]],10]]]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,0,0,0,0,0,[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[36,26],27],[[37,26],27],[[38,26],27],[[39,26],27],[[40,26],27],[[41,26],27],[[42,26],27],[[43,26],27],[[44,26],27],[[45,26],27],[[46,26],27],[[47,26],27],[[48,26],27],[[49,26],27],[[50,26],27],[[51,26],27],[[52,26],27],[[53,26],27],[[54,26],27],[[55,26],27],[[56,26],27],[[57,26],27],[[58,26],27],[[59,26],27],[[60,26],27],[[61,26],27],[[62,26],27],[[63,26],27],[[63,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[28,[30]]],41],[[[28,[30]]],52],[[[28,[30]]],55],[64,39],[[30,[28,[30]]],42],[[30,[28,[30]]],56],[65,36],[66,36],[67,[[1,[38,[68,[[28,[30]]]]]]]],[2,[[11,[63,1]]]],[[[28,[30]]],-1,[]],[37,[[12,[-1]]],69],[[[28,[30]]],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,63],0,0,0,0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[38,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[70,[-1]]],1,[]],[[],[[70,[-1]]],71],[-1,-1,[]],[-1,-2,[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[[70,[-1]]],[[12,[-1]]],[]],[[[70,[-1]],-1],1,[]],[[[70,[-1]],-1],1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[70,[-1]],-1],29,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[],1],[72,72],[[-1,-2],1,[],[]],0,[[],72],0,[[],72],0,[[72,26],27],[-1,-1,[]],0,[[],67],[[],67],[[],67],[[],73],[[],1],0,0,[73,30],[73,64],[[72,6,30],1],0,[72,29],[-1,-2,[],[]],[67,1],[73,73],[73,-1,74],[73,74],[[73,-1],1,74],[[73,74],1],[75,1],[76,1],[77,1],0,[72,6],0,0,[[73,30],1],[[73,64],1],[[73,73],1],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[72,1],0,[72,1],[[],67],[[],67],[-1,-2,[],[]],[-1,-2,[],[]],0,[67,1],[67,1],[67,1],[77,1],[77,1],[[],1],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[78,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[77,77],[79,79],[80,80],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[[],77],[[],79],[[],80],[[],81],[[],82],[[],78],[[],79],[[],80],0,0,0,[[77,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,77],0,[[],77],[[],77],0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[82,1],[82,1],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[78,80],6],[[78,79],6],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[30,30],0,0,0,0,0,0,0,0,0,0,0,[83,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[84,84],[85,85],[86,86],[[[87,[-1]]],[[87,[-1]]],88],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,[[],84],[[],85],[[],86],[[],[[87,[-1]]],89],[84,1],[[84,67],1],0,0,0,0,0,0,0,0,0,0,[[],83],[[],[[87,[-1]]],[]],0,0,0,0,[[84,26],27],[[85,26],27],[[86,26],27],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[83,1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[[87,[-1]],73],[[87,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[86,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[87,[-1]],29],[[87,[-1]]],[]],[87,87],[87,87],[[[87,[-1]],67],[[87,[-1]]],[]],[[[87,[-1]],30],[[87,[-1]]],[]],[[[87,[-1]],30],[[87,[-1]]],[]],[[[87,[-1]],[12,[30]]],[[87,[-1]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[30,30],0,0,0,0,0,0,0,[90,30],[[],30],[91,30],[-1,30,90],[[],30],[91,30],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[],1],[[],1],[-1,-1,[]],[91,30],0,0,[91,1],[[],1],[-1,-2,[],[]],0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,30,72],1,90],[[92,-1,30,72],1,90],[[-1,30,72,-2],1,90,[[95,[93],[[94,[93]]]]]],[[92,-1,30,72,-2],1,90,[[95,[93],[[94,[93]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[96,96],[93,93],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[[],96],[[],93],0,[92,1],[[],1],0,[84,1],0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[44,97],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[92,30],[[12,[[1,[30,97]]]]]],0,0,0,0,[63,1],[92,1],[92,1],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[97,30],29],[30,29],[[92,30],29],0,0,0,0,0,0,0,[63,92],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,[98,64],[99,96],[[100,64],64],[[97,64],64],0,0,0,0,0,0,[97,1],[[],1],[92,1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,1],0,0,[84,1],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[93,30],93],[[93,101],93],[[93,29],93],[[96,29],96],[[93,29],93],[[96,30],96],[[96,29],96],[[96,29],96],[[93,29],93],[[96,30],96],[[93,30],93],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[98,64],1],[[99,96],1],[[97,30,93],1],[[100,64,64],1],[[97,64,64],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[86,1],0,0,0,0,[64,67],[[64,67],1],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[102,[[11,[1,103]]]],[102,[[11,[1,103]]]],0,[[104,26],27],[-1,-1,[]],0,[[],1],[[],1],[-1,-2,[],[]],0,[102,5],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,[105,29],[[],1],[[102,67,[28,[30]]],[[11,[67,103]]]],[[[106,[102]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[102,[[12,[[11,[[106,[102]],103]]]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[102,67,[28,[30]]],[[11,[67,103]]]],0,0,0,0,0,0,[[107,107],-1,[]],[[108,[106,[109]]],1],[107,67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[],108],[107,107],[[-1,-2],1,[],[]],[[107,107],110],0,0,[[107,107],29],[[108,26],27],[[107,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[108,[[12,[[106,[109]]]]]],[108,[[12,[[106,[109]]]]]],[109,107],[109,67],0,[63,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[109,5],0,[111,112],[111,108],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[107,107],[[12,[110]]]],[109,67],[109,29],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[107,107],-1,[]],0,[112,1],[108,1],[112,107],[108,107],[112,107],[108,107],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[112,[106,[109]],111],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[113,30],1],[[114,30],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[113,113],[115,115],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[116,117],0,[114,67],[51,114],[114,67],[[],1],[115,[[0,[[119,[],[[118,[30]]]]]]]],[[113,26],27],[[115,26],27],[[116,26],27],[[120,26],27],[[114,26],27],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,[51,[[106,[[121,[114]]]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[113,30],29],[[115,30],29],0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[67,117],[114,67],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[116,117],1],[[114,29],1],[[114,29],1],[113,[[0,[[119,[],[[118,[30]]]]]]]],0,[114,[[0,[[119,[],[[118,[30]]]]]]]],[86,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[117,67],1],[[116,67],1],[[114,67],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[122,122],[[-1,-2],1,[],[]],0,[[],122],[[122,122],29],[[122,26],27],[[122,26],27],[-1,-1,[]],[-1,-1,[]],[111,122],[111,[[1,[122,30]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[111,29],[111,29],0,0,[[[12,[30]]],111],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[111,30],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[122,[[12,[67]]]],[-1,-2,[],[]],[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[123,109],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[[67,67],67],[[123,67],67],[-1,-1,[]],[-1,-1,[]],[[123,109],67],[[123,109,67],124],[123,107],[123,67],[-1,-2,[],[]],[-1,-2,[],[]],[123,5],0,0,[109,[[12,[123]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[123,67],0,[[123,109],1],[123,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[123,67],67],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,0,[132,5],0,0,0,0,0,[[125,125],29],[[130,127,[28,[30]]],[[11,[1,30]]]],[[128,127,[28,[30]]],[[11,[1,30]]]],[[128,127,[28,[30]]],[[11,[1,30]]]],0,0,0,[[125,26],27],[[126,26],27],[[127,26],27],[[128,26],27],[[129,26],27],[[130,26],27],[[133,26],27],[[131,26],27],[[131,26],27],[[132,26],27],[[134,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[126,[[12,[[106,[132]]]]]],0,[84,1],[84,1],0,0,[[[12,[73]],127,105,29],[[12,[132]]]],[[[12,[73]],127,105,29],[[12,[132]]]],0,[132,1],[134,1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[133,29],[133,29],[133,29],[132,29],[132,29],[133,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[30,128],[30,130],0,[132,67],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,0,0,[[105,135],[[12,[132]]]],[[130,30],130],[[130,73],130],[[130,64],130],0,[[127,73],30],[[127,73],30],[127,73],[[127,[28,[30]]],[[11,[1,30]]]],[127,30],[127,30],[127,30],[[132,67,[28,[30]]],[[11,[1,131]]]],[[134,67,67,[28,[30]]],[[11,[1,30]]]],[[134,67,67,[28,[30]]],[[11,[1,30]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[133,64],[132,64],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],0,0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[105,29],0,[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,67],0,0,0,[127,[[11,[1,30]]]],[127,1],[[130,73],130],[[130,129],130],[[128,30],128],[[128,67],128],[[128,29],128],[[130,29],130],[[128,73],128],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[128,127],1],[[127,73,30],1],[[127,73,30],1],[[127,73],1],[[127,[28,[30]]],[[11,[1,30]]]],[[130,127],1],0,0,0,[[132,67,[28,[30]]],[[11,[1,131]]]],[[134,67,67,[28,[30]]],[[11,[1,30]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[136,[[137,[30]]]],[138,[[137,[30]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[136,136],[138,138],[139,[[11,[1,103]]]],[140,[[11,[1,103]]]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[141,29],[[136,26],[[11,[1,142]]]],[[138,26],[[11,[1,142]]]],[[141,26],27],[[143,26],27],[[144,26],27],[[139,26],27],[[140,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[137,[30]]],136],[[[137,[30]]],138],[[],[[145,[136]]]],[141,[[145,[136]]]],[[],[[145,[138]]]],[141,[[145,[138]]]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[143,5],[144,5],[139,5],[140,5],[[],141],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[],1],0,0,0,[84,1],[[143,67,[28,[30]]],[[11,[67,103]]]],[[144,67,[28,[30]]],[[11,[67,103]]]],[141,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[139,[[12,[[11,[[106,[102]],103]]]]]],[140,[[12,[[11,[[106,[102]],103]]]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[136,[[12,[30]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,-1,[]],[30,[[12,[30]]]],[30,[[12,[30]]]],[146,1],[-1,-2,[],[]],[30,[[12,[147]]]],[146,30],[148,146],[146,[[145,[136]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[-1,-1,[]],[149,30],[149,[[137,[30]]]],[149,1],0,[-1,-2,[],[]],[148,149],[149,[[145,[138]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,0,[149,1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[149,30,[12,[30]]],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[148,148],[[-1,-2],1,[],[]],[[148,26],27],[-1,-1,[]],[148,29],[-1,-2,[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[148,30],[148,30],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[148,[[1,[29,29]]]],[148,1],[148,30],[[148,[28,[30]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[[148,30],[[12,[1]]]],[[148,30],1],[[148,30],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[150,150],[151,151],[105,105],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,[152,5],0,[[150,26],27],[[150,26],27],[[151,26],27],[[105,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[151,[[12,[[1,[73,6]]]]]],[151,[[12,[[1,[6,6,29]]]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],153],[64,150],[153,[[12,[-1]]],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[30,30,30],[[12,[105]]]],[[105,135],[[12,[152]]]],[105,73],[[105,30],-1,74],[[30,30,30,30],-1,74],[105,73],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[105,73],1],[[105,30,-1],1,74],[[30,30,30,30,-1],1,74],[[105,73],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[154,[[11,[1,103]]]],0,[154,[[11,[1,103]]]],[[],[[1,[155,155]]]],[[156,26],27],[[154,26],27],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[154,5],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[154,67,[28,[30]]],[[11,[67,103]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[154,67,[28,[30]]],[[11,[67,103]]]],0,0,[[157,155,158,159],[[11,[[1,[6,6]],103]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[160,67],0,0,[161,67],[160,67],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[161,161],[170,170],[171,171],[172,172],[160,160],[173,173],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[173,-1,[]],0,0,0,[166,67],0,0,[157,67],[160,67],0,0,[161,67],0,0,[161,64],[160,67],0,0,0,0,0,0,[[174,26],27],[[162,26],27],[[163,26],27],[[164,26],27],[[166,26],27],[[167,26],27],[[168,26],27],[[169,26],27],[[161,26],27],[[170,26],27],[[171,26],27],[[172,26],27],[[173,26],27],[[157,26],27],[103,174],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[64,167],[64,170],0,0,0,0,0,0,[160,67],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[166,29],[166,29],[166,29],[160,67],0,0,[[155,29,67],[[11,[161,174]]]],[[155,29,67],[[11,[160,174]]]],[155,[[11,[157,174]]]],0,0,[161,67],0,0,[173,5],0,0,0,[160,64],[[160,[28,[30]]],173],[161,67],[160,67],0,0,0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[161,67],0,0,[166,67],0,0,[166,67],0,0,[166,67],0,0,[157,[[28,[161]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[166,67],0,0,[166,67],0,0,[166,67],0,0,[166,67],0,0,[157,[[28,[173]]]],0,[160,67],0,0,[166,67],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,67],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[161,167],[160,170],0,0,0,0,[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[161,67],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[175,29],[176,[[11,[177,103]]]],[176,[[11,[155,103]]]],[176,[[11,[155,103]]]],[178,179],[180,175],[178,175],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[175,175],-1,[]],[[175,175],-1,[]],[[175,175],1],[155,181],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[177,177],[175,175],[180,180],[182,182],[183,183],[178,178],[155,155],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[184,182,185],[[11,[1,103]]]],0,[[175,175],29],[6,[[11,[1,103]]]],[[184,183,5,175],[[11,[178,103]]]],[[177,5,175],[[11,[176,103]]]],0,[155,67],[[],185],[182,-1,[]],[183,-1,[]],[178,-1,[]],[182,-1,[]],[183,-1,[]],[178,-1,[]],0,0,[175,29],[155,1],[182,1],[[],[[106,[186]]]],[[175,175],29],0,[177,[[11,[1,103]]]],[155,67],0,0,[[175,26],27],[[180,26],27],[[182,26],27],[[183,26],27],[[178,26],27],[[185,26],27],[[103,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[155,176],[177,176],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[183,178],[182,178],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[187,103],[[182,-1,[106,[184]],67,181],[[11,[155,103]]],[[189,[188]]]],[[183,-1,[106,[184]],67],[[11,[177,103]]],[[189,[188]]]],[[-1,178,[106,[184]]],[[11,[176,103]]],[[189,[188]]]],[[190,188],[[0,[[119,[],[[118,[[1,[188,[106,[184]]]]]]]]]]]],[188,[[11,[[1,[188,[106,[184]]]],103]]]],[[190,188],[[11,[[1,[188,[106,[184]]]],103]]]],[175,29],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[178,[[11,[183,103]]]],[178,[[11,[182,103]]]],[155,29],[178,29],[155,29],0,0,0,[[5,[106,[184]]],1],[[190,-1,[106,[184]]],1,[[189,[188]]]],[180,5],[178,5],0,[[7,175,67,67,73],183],[[7,175,67,67,67,73],178],[[7,175,[106,[102]]],182],[[7,175,67,67,67,73],182],[-1,[[11,[155,103]]],[[189,[188]]]],[-1,[[11,[177,103]]],[[189,[188]]]],[-1,[[11,[176,103]]],[[189,[188]]]],[[-1,181],[[11,[155,103]]],[[189,[188]]]],[-1,[[11,[[1,[[106,[184]],178]],103]]],[[189,[188]]]],[184,[[11,[183,103]]]],[186,[[11,[183,103]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[180,73],0,[180,67],0,0,[155,188],[177,188],0,0,0,0,[[155,[28,[30]]],[[11,[67,103]]]],[[177,[28,[191]]],[[11,[6,103]]]],[[184,183,192],[[11,[1,103]]]],[[186,183,192],[[11,[1,103]]]],[[184,182,67,[28,[30]],185],[[11,[67,103]]]],[175,29],[155,[[11,[[33,[30]],103]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[155,67],[[11,[1,103]]]],[[155,181],1],[[184,182,67],[[11,[1,103]]]],[[155,67],[[11,[1,103]]]],[[182,67],1],[[180,67],1],[[155,29],1],[155,67],[182,67],[178,67],0,[180,67],0,[175,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[182,[[11,[1,103]]]],[178,[[11,[1,103]]]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[175,29],[[7,175,67],183],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[155,[28,[30]]],[[11,[67,103]]]],[[184,182,67,[28,[30]],185],[[11,[67,103]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[193,183,5,175],[[11,[178,103]]]],[[194,195,[33,[196]]],[[11,[178,103]]]],[197,196],[197,195],[197,195],[195,30],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[198,64],[198,73],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[199,1],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[195,195],[196,196],[207,207],[208,208],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,[[5,175],[[1,[195,[33,[196]]]]]],0,0,0,0,0,0,0,0,[198,64],[198,64],[[],209],0,0,0,0,0,[199,[[12,[[0,[[119,[],[[118,[[1,[64,[28,[30]]]]]]]]]]]]]],0,0,[194,1],0,0,0,[[204,204],29],[[205,205],29],[[206,206],29],[[195,195],29],0,0,0,0,0,0,0,[198,64],[198,64],[193,204],0,[30,175],[175,30],0,0,0,0,[199,[[12,[64]]]],0,0,[[193,64],64],[194,1],[193,[[11,[1,103]]]],[[187,26],27],[[200,26],27],[[201,26],27],[[203,26],27],[[204,26],27],[[205,26],27],[[198,26],27],[[206,26],27],[[195,26],27],[[196,26],27],[[207,26],27],[[208,26],27],[[210,26],27],[[209,26],27],[[199,26],27],[[193,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[28,[30]]],197],[[204,64],205],0,0,[[193,64],[[12,[210]]]],[194,[[11,[197,103]]]],0,[[209,64,[33,[30]]],210],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[197,29],0,0,0,0,[211,6],[193,[[11,[199,103]]]],[[[106,[132]],64,64],[[11,[193,103]]]],[[193,64],[[11,[210,103]]]],0,[194,1],[[199,6],1],0,[196,7],0,0,0,[195,30],[[193,208],[[11,[194,103]]]],[[203,64],[[11,[198,187]]]],[[],199],[[64,64,198,[106,[132]]],[[11,[193,103]]]],[194,[[12,[-1]]],[]],[[199,64],[[11,[[12,[64]],103]]]],[194,[[11,[29,103]]]],[198,30],0,0,0,[[193,183],[[11,[194,103]]]],[193,[[11,[208,103]]]],[193,[[11,[183,103]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[199,64],205],[[193,64,64],[[11,[[33,[30]],103]]]],[[193,182,64,211,185],[[11,[67,103]]]],0,[[209,64],[[12,[210]]]],[[193,182,64],[[11,[1,103]]]],0,0,0,[198,73],0,[[194,207],[[11,[1,103]]]],0,[198,64],[198,64],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[194,207],0,0,[198,30],0,0,0,[[193,182,67],[[11,[1,103]]]],0,0,0,[197,206],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[205,204],[[12,[64]]]],[198,64],0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[209,64],[[12,[210]]]],[[209,64],[[12,[210]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[193,180,-1],[[11,[1,103]]],[[192,[195]]]],0,0,[198,[[137,[30]]]],[193,7],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[199,64,205],1],[[197,196],1],[[197,195],1],[[193,64,[28,[30]]],[[11,[1,103]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[212,212],[213,213],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,[[212,26],27],[[213,26],27],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[132,[[11,[213,103]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[188,188],29],[[188,188],214],[[214,188],1],[[214,5],1],[[188,188],29],[[188,188],[[11,[188,215]]]],[[188,5],214],[188,216],[217,188],[218,188],[214,188],[188,5],[188,188],[219,188],[219,5],[217,188],[217,5],[218,5],[218,188],[214,5],[214,188],[188,5],[219,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[214,188],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[214,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[214,1],[220,220],[219,219],[217,217],[218,218],[216,216],[214,214],[215,215],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[188,188],110],[[219,219],110],[[217,217],110],[[214,214],110],[188,217],[[],214],[214,188],[188,221],[[188,-1],29,[[189,[188]]]],[[188,214],29],[[188,214],29],[[188,[222,[188]]],29],[[188,188],29],[[188,[222,[188]]],29],[[220,220],29],[[219,219],29],[[217,217],29],[[214,[222,[188]]],29],[[214,188],29],[[214,214],29],[[214,188],29],[[215,215],29],[[214,-2],1,[[189,[188]]],[[223,[],[[118,[-1]]]]]],[188,[[12,[5]]]],[217,29],[[188,26],27],[[221,26],27],[[221,26],27],[[220,26],27],[[219,26],27],[[217,26],27],[[218,26],27],[[216,26],27],[[214,26],27],[[215,26],27],[[215,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[222,[188]]],214],[7,214],[-1,214,[224,[189,[5]]]],[-1,-1,[]],[-2,214,[[189,[188]]],[[223,[],[[118,[-1]]]]]],[5,[[11,[214,-1]]],[]],0,[188,29],[5,29],[188,29],[217,29],0,[[188,-1],1,225],[[219,-1],1,225],[[214,-1],1,225],0,[217,29],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[214,[[34,[188]]]],[188,218],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[214,218],[214,7],[188,29],[188,29],[188,29],[188,29],[226,29],[30,29],[188,218],[[-1,-2],[[12,[-1]]],[[119,[],[[118,[219]]]],88],[[119,[],[[118,[219]]]]]],[[188,-1],214,[[189,[188]]]],[217,6],[-1,188,[[189,[5]],224]],[[],214],[217,[[12,[219]]]],[218,[[12,[-1]]],[]],[216,[[12,[-1]]],[]],0,[217,[[12,[219]]]],[218,[[12,[-1]]],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[188,[[12,[188]]]],[217,[[1,[6,[12,[219]]]]]],[217,[[1,[6,[12,[219]]]]]],[[217,5],[[12,[219]]]],[[188,[222,[188]]],[[12,[110]]]],[[188,214],[[12,[110]]]],[[188,[222,[188]]],[[12,[110]]]],[[188,214],[[12,[110]]]],[[188,188],[[12,[110]]]],[[220,220],[[12,[110]]]],[[219,219],[[12,[110]]]],[[217,217],[[12,[110]]]],[[214,188],[[12,[110]]]],[[214,[222,[188]]],[[12,[110]]]],[[214,188],[[12,[110]]]],[[214,214],[[12,[110]]]],0,0,[214,29],[[214,-1],1,[[189,[188]]]],[[214,6],1],[[214,6],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[214,-1],1,[[189,[5]]]],[[214,6],1],[214,1],[[188,-1],29,[[189,[188]]]],[[188,-1],[[11,[188,215]]],[[189,[188]]]],[188,214],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[188,214],[188,[[12,[5]]]],[-1,7,[]],[-1,7,[]],[188,[[222,[5]]]],[217,1],[217,1],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,214],[[188,-1],214,[[189,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[227,227],[[-1,-2],1,[],[]],[[227,227],29],[[227,26],27],[-1,227,228],[-1,-1,[]],0,[-1,-2,[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[229,[28,[30]],230,[1,[6,6]],[1,[6,6]],6,6],1],[[229,[28,[30]],230,[1,[6,6]],[1,[6,6]],6,6],1],[[229,[1,[6,6]],[1,[6,6]],6,6],1],[[229,[28,[30]],230,[1,[6,6]],[1,[6,6]],6,6],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,231,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[229,1],[[229,-1],[[11,[1,-2]]],[],[]],[[229,6,6,6,6,227],1],[[-1,231],[[232,[-2]]],[],[]],[230,230],[[-1,-2],1,[],[]],[-1,[[233,[-2,-3]]],[],[],[234,235]],[[],[[12,[236]]]],[[-1,231],[[237,[-2]]],[],[]],0,[[229,-2],[[11,[1,-3]]],[],[[223,[],[[118,[[238,[-1]]]]]]],[]],0,0,[[229,231,-1],[[11,[1,-2]]],[],[]],[[230,26],[[11,[1,142]]]],[236,230],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[230,[1,[6,6]]],[[12,[6]]]],0,[[[12,[239]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[236,[[12,[[240,[229]]]]]],[[236,67],[[12,[[240,[229]]]]]],0,0,[230,6],[239,236],[239,229],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,[[230,[28,[30]],[1,[6,6]]],[[12,[[28,[30]]]]]],[[230,[28,[30]],[1,[6,6]]],[[12,[[28,[30]]]]]],[[229,6,6,227],1],[[241,[28,[30]],[1,[6,6]]],[[12,[227]]]],[[230,[28,[30]],[1,[6,6]]],[[12,[227]]]],[[236,67],29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[229,242],[[236,67],29],[-1,-2,[],[]],[[-1,243],[[244,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[241,[28,[30]],[1,[6,6]],227],[[12,[1]]]],[[230,[28,[30]],[1,[6,6]],227],[[12,[1]]]],0,0,0,0,0,0,[245,1],[245,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[246,[-1]]],[[246,[-1]]],88],[[[247,[-1]]],[[247,[-1]]],88],[[[248,[-1]]],[[248,[-1]]],88],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[[[249,[],[[118,[-1]]]]],[[28,[-1]]],[]],[[[246,[-1]]],-2,[],[]],[[[247,[-1]]],-2,[],[]],[[[248,[-1]]],-2,[],[]],[[[246,[-1]]],-2,[],[]],[[[247,[-1]]],-2,[],[]],[[[248,[-1]]],-2,[],[]],[[[246,[-1]],26],27,[]],[[[247,[-2]],26],27,250,[[249,[],[[118,[-1]]]]]],[[[248,[-1]],26],27,[[189,[[28,[30]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[28,[30]]],1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[251,1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[252,252],[253,253],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[[[12,[239]]],[[34,[251]]]],0,[[],253],[[],1],[[],254],[[],255],0,[[256,26],27],[[252,26],27],[[253,26],27],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,252],[251,1],[254,1],[255,1],[[255,[12,[239]]],1],[[[12,[239]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[255,[[12,[[106,[[258,[[257,[256]]]]]]]]]],[[259,[34,[251]]],256],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[[260,[28,[30]]],6],[[254,[28,[30]]],6],[[256,[28,[30]]],6],[[255,-2],-1,[],[[192,[261],[[94,[-1]]]]]],[-2,-1,[],[[192,[261],[[94,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[251,253],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[260,[28,[30]]],6],[[254,[28,[30]]],6],[[256,[28,[30]]],6],[[251,30],1],[[254,30],1],[[256,30],1],[[254,5],27],[[256,5],27],0,[-1,-2,[],[]],[262,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[262,229],1],[[262,229],1],[-1,-1,[]],[262,1],[-1,-2,[],[]],[[],262],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[262,6,229],1],[[262,253],1],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[262,30],1],0,0,0,[-1,-2,[],[]],[263,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[263,1],[[263,6],1],[263,1],[-1,-1,[]],[[263,[1,[6,6]]],6],0,[263,1],[-1,-2,[],[]],0,[239,263],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[263,253],1],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[263,30],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[264,264],[259,259],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[259,1],[264,29],[259,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[264,259],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[[264,265],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[259,[[12,[30]]]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[259,30],1],[[264,265,30],1],0,0,0,0,0,0,0,0,[[266,267],30],[[268,6],[[12,[30]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[266,30,267],1],[[268,6],29],[[],266],[-1,-1,[]],[-1,-1,[]],0,[[],[[121,[[269,[268]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],268],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[266,270],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,6],-1,271],[[271,6],271],[[-1,6,6],[[1,[-1,6,6]]],271],[[271,6,6],[[1,[271,6,6]]]],[[-1,6],-1,271],[[271,6],271],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[[],1],0,[[[272,[-1]],26],27,[[273,[67]],71]],[[[272,[-1]],26],27,[[273,[67]],71]],[-1,-1,[]],0,[-1,-2,[],[]],[[-1,6],29,271],[[271,6],29],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[67,6],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],6],0,[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,67],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],30],[274,30],[[],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[30,1],[[274,30],1],0,[-1,-1,[]],[-1,-1,[]],0,[2,1],[[274,30,30],1],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,274],0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[1,[6,6]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[159,1],[[],275],[275,276],[275,67],[275,276],[275,276],[275,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[277,277],[[],159],[[-1,-2],1,[],[]],[159,159],[[159,-1],1,[[192,[67]]]],[[159,-1],1,[[192,[67]]]],[[159,-1,-2,-3],1,[[278,[6]]],[[278,[6]]],[[192,[67]]]],[67,276],0,0,0,[[277,26],27],[275,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[67,275],[[],159],[[],159],[6,6],[6,6],[6,6],[6,6],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[159,6],29],[6,29],0,[275,1],[[159,277],1],[277,1],[[],159],[[],159],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],1],[159,1],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[[159,277,29],1],[[277,29],1],[159,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[279,67,6],[[11,[6,280]]]],[[67,6],[[11,[6,280]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[[279,6,6],[[11,[1,280]]]],[[6,6],[[11,[1,280]]]],[[],1],[279,1],[[[68,[-1]]],-2,224,[]],[[[68,[-1]]],-2,224,[]],[[[68,[-1]]],1,224],[[],279],0,[[280,26],27],[[[68,[-1]],26],27,[224,281]],[[[68,[-1]],26],27,[224,282]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[279,67,6],[[12,[[1,[283,29]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[67,[[11,[[68,[-1]],280]]],[]],[[67,6],[[11,[[68,[[28,[-1]]]],280]]],[]],[67,[[11,[[68,[[284,[-1]]]],280]]],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[283,67],[[12,[6]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[285,285],[286,286],[287,287],[239,239],[288,288],[289,289],[290,290],[291,291],[292,292],[293,293],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,[2,30],[2,[[28,[30]]]],0,0,0,[2,67],0,0,0,[[294,294],29],[[295,295],29],0,[[2,26],27],[[294,26],27],[[296,26],27],[[296,26],27],[[285,26],27],[[295,26],27],[[297,26],27],[[297,26],27],[[286,26],27],[[287,26],27],[[239,26],27],[[288,26],27],[[289,26],27],[[290,26],27],[[291,26],27],[[292,26],27],[[293,26],27],[2,[[12,[239]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[30,[28,[30]]],287],[2,[[12,[36]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[287,29],0,0,0,0,0,0,0,0,0,0,[2,[[12,[[0,[[119,[],[[118,[296]]]]]]]]]],0,0,0,[298,[[12,[-1]]],[]],[285,[[12,[-1]]],[]],[286,[[12,[-1]]],[]],0,0,0,0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[2,298],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[12,[290]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[299,3],[[],3],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[300,67,301],1],[[300,302],[[12,[6]]]],[303,67],[[67,157,155,[33,[7]],177],[[11,[300,304]]]],0,[[300,6,-1],29,[[235,[176]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[305,305],[306,306],[307,307],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,[[],305],[[],306],0,0,0,0,0,0,[300,1],0,[[307,307],29],0,[[300,301],1],0,0,[300,1],[[304,26],27],[[305,26],27],[[306,26],27],[[307,26],27],[-1,-1,[]],[-1,-1,[]],[103,304],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[300,67],[[12,[301]]]],[300,177],[[300,6],[[12,[176]]]],0,0,0,0,[300,67],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[300,6],29],[[],303],0,0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[300,67],0,[[159,[28,[7]],67,67],[[1,[67,67,67]]]],[[300,-1],6,[[235,[176]]]],[[300,6,176],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[300,177],1],0,0,0,0,[300,1],0,[[300,6],[[12,[176]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[159,6,158],1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[[301,86],1],[-1,-1,[]],[308,1],0,[-1,-2,[],[]],[67,29],[[],308],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[300,1],[[308,300],1],[-1,-2,[],[]],[-1,-2,[],[]],[[],3],[86,1],[[107,86],1],[[306,86],1],[86,1],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[86,67],29],[-2,-1,[],[[95,[300],[[94,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[86,1],0,0,[[30,6],[[11,[1,309]]]],[86,1],[188,[[222,[188]]]],[30,[[11,[309]]]],[30,[[11,[309]]]],[[30,6],[[11,[[28,[310]],309]]]],[[30,6],[[11,[[28,[-1]],309]]],224],[30,[[11,[188,309]]]],[[30,6],[[11,[[28,[-1]],309]]],224],[30,[[11,[5,309]]]],[30,[[11,[[33,[7]],309]]]],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],[86,311],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[312,[-1]]],[[312,[-1]]],88],[[-1,-2],1,[],[]],[[],[[312,[-1]]],89],[[[312,[-1]]],-1,[]],[[[312,[-1]]],-1,[]],[[[312,[-1]],[312,[-1]]],29,313],[[[312,[-1]],26],27,282],[-1,[[312,[-1]]],[]],[-1,-1,[]],[3,-1,[]],[[[312,[-1]],-2],1,314,225],[-1,-2,[],[]],[[[312,[-1]]],-1,[]],[-1,[[312,[-1]]],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[315,-1],1,95],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[316,[-1]]],[[316,[-1]]],88],[[-1,-2],1,[],[]],[[],315],[[[316,[-1]]],1,[]],[[[316,[-1]],26],27,282],[-1,-1,[]],[-1,-1,[]],[[[316,[-1]]],-1,[]],[[[316,[-1]],-2],-1,[],[[95,[],[[94,[-1]]]]]],[[[316,[-1]],-3],[[11,[-1,-2]]],[],[],[[95,[],[[94,[[11,[-1,-2]]]]]]]],[[[316,[-1]]],-1,[]],[[[316,[-1]],-3],[[11,[1,-2]]],[],[],[[95,[],[[94,[[11,[-1,-2]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[315,29],[[[316,[-1]]],29,[]],[[],315],[[],[[316,[-1]]],[]],0,[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[316,[-1]],-1],[[11,[1,-1]]],[]],0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[316,[-1]]],[[12,[-1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,-1,[]],[-1,-2,[],[]],[67,29],[[],317],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[317,1],[317,1],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[317,29],[317,29],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[317,1],[317,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[121,[193]],182,185],[[11,[1,103]]]],[[[121,[193]],183,5,175],[[11,[178,103]]]],0,[[[240,[-1]]],-2,224,[]],[[[240,[-1]]],-2,224,[]],[[[240,[-1]]],1,224],[[[121,[-1]],26],27,282],[[[240,[-1]],26],27,[224,281]],[[[240,[-1]],26],27,[224,282]],[-1,-1,[]],[-1,-1,[]],[[[121,[-1]]],-1,224],[[[121,[114]]],107],[[[121,[114]]],67],[-1,-2,[],[]],[-1,-2,[],[]],[[[121,[-1]]],[[240,[-1]]],224],0,0,0,[[[121,[114]]],5],[-1,[[121,[-1]]],[]],[[[121,[193]]],[[11,[183,103]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[[[121,[114]]],67],[[[121,[193]],183,192],[[11,[1,103]]]],[[[121,[193]],182,67,[28,[30]],185],[[11,[67,103]]]],[[[121,[114]]],29],[[[121,[-1]],-3],-2,224,[],[[95,[-1],[[94,[-2]]]]]],[[[121,[-1]],-3],-2,224,[],[[95,[-1],[[94,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[121,[193]],182,67],[[11,[1,103]]]],[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[121,[-1]]],[[12,[[240,[-1]]]]],224],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[121,[193]],182,67,[28,[30]],185],[[11,[67,103]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[[[318,[-1]]],-2,[],[]],[[[318,[-1]]],1,[]],[[[258,[-1]],26],27,282],[[[318,[-1]],26],27,282],[-1,-1,[]],[-1,-1,[]],[[[258,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[258,[-1]]],[[318,[-1]]],[]],0,0,0,0,[[[258,[[257,[256]]]]],5],[-1,[[258,[-1]]],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[[[258,[[257,[256]]]],67,[28,[30]]],[[11,[67,103]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[258,[-1]]],[[12,[[318,[-1]]]]],[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[258,[[257,[256]]]],67,[28,[30]]],[[11,[67,103]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,0,[[[319,[-1]]],-1,224],[[[320,[-1]]],-1,224],[[[320,[-1]]],-1,224],[[[319,[-1]]],1,224],[[[320,[-1]]],1,224],[[[321,[-1]],26],27,282],[[[319,[-1]],26],27,[224,281]],[[[319,[-1]],26],27,[224,282]],[[[320,[-1]],26],27,[224,281]],[[[320,[-1]],26],27,[224,282]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[321,[-1]]],-1,224],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[321,[-1]]],[]],[[[321,[104]]],[[11,[183,103]]]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],[-1,[[1,[-2,29]]],[],[]],0,[[[321,[-1]]],[[319,[-1]]],224],[[[321,[104]],183,192],[[11,[1,103]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[321,[-1]]],[[12,[[319,[-1]]]]],224],[[[321,[-1]]],[[12,[[320,[-1]]]]],224],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[321,[-1]]],[[320,[-1]]],224]],"c":[],"p":[[1,"tuple"],[5,"MultiBoot2Info",7063],[1,"never"],[5,"State",27],[1,"str"],[1,"usize"],[5,"String",8364],[5,"MethodObj",27],[5,"Parser",27],[6,"AmlParseError",27],[6,"Result",8365],[6,"Option",8366],[5,"AmlCode",27],[6,"DataObject",27],[6,"AmlTerm",27],[6,"TermArg",27],[6,"Target",27],[5,"ScopeObj",27],[5,"RegionObj",27],[5,"FieldDef",27],[5,"IndexFieldDef",27],[6,"FieldElement",27],[5,"PredicateBlock",27],[5,"ProcessorDeprecated",27],[5,"PowerResource",27],[5,"Formatter",8367],[8,"Result",8367],[1,"slice"],[1,"bool"],[1,"u8"],[5,"BTreeMap",8368],[5,"BTreeSet",8369],[5,"Vec",8370],[5,"Box",8371],[5,"TypeId",8372],[5,"Rsdp",623],[5,"Rsdt",623],[5,"DescriptionHeader",623],[5,"DescriptorTable",623],[6,"DescriptorTableBody",623],[5,"Apic",623],[6,"InterruptControllerStruct",623],[5,"ProcessorLocalApic",623],[5,"IoApic",623],[5,"InterruptSourceOverride",623],[5,"NonMaskableInterrupt",623],[5,"LocalApicNmi",623],[5,"LocalApicAddressOverride",623],[5,"Facp",623],[5,"ApicGenericAddress",623],[5,"Hpet",623],[5,"Xsdt",623],[5,"Bgrt",623],[5,"Waet",623],[5,"Srat",623],[6,"StaticResourceAffinity",623],[5,"ProcessorLocalAcpiAffinity",623],[5,"MemoryAffinity",623],[5,"ProcessorLocalX2ApicAffinity",623],[5,"GiccAffinity",623],[5,"GicInterruptTranslationServiceAffinity",623],[5,"GenericInitiatorAffinity",623],[5,"BiosTables",623],[1,"u32"],[5,"RsdpV1",623],[5,"RsdpV2",623],[1,"u64"],[5,"VirtualSpace",6950],[10,"Any",8372],[5,"RingBuffer",1549],[10,"Copy",8373],[5,"Cpu",1578],[1,"u16"],[10,"IoPortInt",1578],[5,"GlobalDescriptorTablePointer",1658],[5,"InterruptDescriptorTablePointer",1868],[5,"SegmentSelector",1658],[5,"GlobalDescriptorTable",1658],[5,"UserDescriptorEntry",1658],[5,"SystemDescriptorEntry",1658],[5,"TaskStateSegment",1658],[5,"GlobalDescriptorManager",1658],[5,"InterruptDescriptorTable",1868],[5,"InterruptStackFrame64",1868],[5,"RestSavedRegisters",1868],[5,"InterruptAllSavedState",1868],[5,"InterruptDescriptorTableEntry",1868],[10,"Clone",8374],[10,"Default",8375],[10,"InterruptHandler",2104],[5,"Interrupts",2104],[5,"Apic",2146],[5,"IoApicRedirectionBuilder",2146],[17,"Output"],[10,"FnOnce",8376],[5,"LocalVectorRegisterBuilder",2146],[5,"IoApic",2146],[5,"ApicReg",2146],[5,"LocalVectorRegister",2146],[5,"IoApicMmio",2146],[6,"DestinationType",2146],[10,"Device",2462],[6,"FileSystemError",4557],[5,"Devices",2462],[5,"PciDeviceConfig",3759],[5,"Arc",8377],[5,"ClockTime",2504],[5,"Clock",2504],[10,"ClockDevice",2504],[6,"Ordering",8378],[5,"Rtc",2795],[5,"SystemTime",2504],[5,"HpetInterruptStatus",2609],[5,"Hpet",2609],[5,"InterruptRouteCapabilityBitmap",2609],[5,"HpetTimerMmio",2609],[5,"HpetTimerConfig",2609],[17,"Item"],[10,"Iterator",8379],[5,"HpetMmio",2609],[5,"Mutex",8149],[5,"RtcTime",2795],[5,"Tsc",2873],[5,"SyncPoint",2873],[6,"IdeDeviceType",2931],[5,"IdeDeviceIndex",2931],[5,"IdeIo",2931],[5,"AtaCommand",2931],[6,"AtapiDmaDirection",2931],[5,"AtapiPacketCommand",2931],[6,"IdeError",2931],[5,"IdeDevice",2931],[5,"CommandIdentifyDataRaw",2931],[5,"IdeDeviceImpl",2931],[5,"PropeExtra",3759],[5,"Key",3416],[1,"array"],[5,"MouseEvent",3416],[5,"KeyboardDeviceCreator",3416],[5,"MouseDeviceCreator",3416],[5,"KeyboardMouse",3416],[5,"Error",8367],[5,"KeyboardDevice",3416],[5,"MouseDevice",3416],[5,"Receiver",8380],[5,"Keyboard",3614],[6,"KeyType",8381],[5,"Ps2",3714],[5,"Mouse",3651],[6,"PciDeviceType",3759],[6,"PciBar",3759],[10,"PciDevice",3759],[5,"PciDevicePropeIterator",3759],[5,"PipeSide",3955],[5,"File",4557],[5,"InnerPipe",3955],[5,"Elf",4011],[5,"ProcessMetadata",8382],[5,"VirtualMemoryMapper",6803],[6,"ElfSectionInner",4011],[6,"ElfProgram",4011],[5,"ElfHeaderBase",4011],[5,"ElfHeader32",4011],[5,"ElfHeader64",4011],[20,"ElfHeaderUnion",4011],[5,"ElfHeader",4011],[6,"ElfProgramType",4011],[5,"ElfProgram32",4011],[5,"ElfProgram64",4011],[6,"ElfSectionType",4011],[5,"ElfSection32",4011],[5,"ElfSection64",4011],[5,"ElfSection",4011],[6,"ElfLoadError",4011],[5,"FileAttributes",4557],[6,"FilesystemNode",4557],[5,"Directory",4557],[6,"Node",4557],[5,"FileStat",8383],[5,"BaseNode",4557],[6,"BlockingMode",8383],[5,"FileNode",4557],[5,"DirectoryNode",4557],[10,"FileSystem",4557],[5,"AccessHelper",4557],[5,"EmptyFileSystem",4557],[6,"FatError",5000],[5,"Path",5716],[10,"AsRef",8384],[5,"FileSystemMapping",4557],[5,"DirEntry",8383],[10,"FnMut",8376],[5,"FatFilesystem",5000],[5,"DirectoryIterator",5000],[5,"DirectoryEntryNormal",5000],[5,"DirectoryEntryLong",5000],[6,"DirectoryEntry",5000],[5,"FatBootSector",5000],[5,"Fat",5000],[5,"Fat12_16ExtendedBootSector",5000],[5,"Fat32ExtendedBootSector",5000],[20,"FatExtendedBootSector",5000],[5,"FatBootSectorRaw",5000],[6,"FatType",5000],[6,"FatEntry",5000],[6,"DirectoryEntryState",5000],[5,"DirectoryIterSavedPosition",5000],[6,"Directory",5000],[5,"ClusterCache",5000],[5,"ClusterCacheEntry",5000],[6,"FileAccessBuffer",5000],[5,"PartitionEntry",5647],[5,"Mbr",5647],[5,"PathBuf",5716],[5,"StripPrefixError",5716],[5,"Ancestors",5716],[5,"Components",5716],[5,"Iter",5716],[6,"Component",5716],[6,"State",5716],[5,"Display",5716],[6,"Cow",8385],[10,"IntoIterator",8386],[10,"Sized",8373],[10,"Hasher",8387],[1,"char"],[5,"Pixel",6054],[10,"RgbColor",8388],[5,"VgaDisplay",6084],[5,"FrameBufferInfo",6084],[5,"Rectangle",8389],[5,"Clipped",8390],[5,"ColorConverted",8391],[10,"PixelColor",8392],[10,"Into",8384],[5,"VgaDisplayController",6084],[5,"Cropped",8393],[5,"Pixel",8394],[5,"Framebuffer",7063],[5,"MutexGuard",8149],[10,"FrameBufferDraw",6084],[5,"Size",8395],[5,"Point",8396],[5,"Translated",8397],[5,"Arguments",8367],[5,"NoDebug",6194],[5,"HexArray",6194],[5,"ByteStr",6194],[10,"ArrayTrait",6194],[10,"UpperHex",8367],[10,"VideoConsole",6283],[6,"AnsiColor",6283],[5,"VideoConsoleAttribute",6283],[5,"EarlyConsole",6283],[6,"ConsoleController",6283],[5,"LateConsole",6283],[5,"RefCell",8398],[5,"ReMutex",8219],[5,"Uart",6520],[10,"Console",6283],[10,"Write",8367],[5,"VgaGraphics",6453],[5,"VgaText",6484],[6,"UartPort",6520],[6,"UartReg",6520],[5,"LockedKernelHeapAllocator",6620],[5,"Layout",8399],[5,"PageAllocator",6620],[5,"HeapAllocator",8400],[5,"HeapStats",8401],[10,"AlignMem",6672],[5,"MemSize",6672],[10,"TryInto",8384],[5,"PhysicalPageAllocator",6746],[5,"PageDirectoryTablePtr",6803],[5,"PageDirectoryTable",6803],[5,"VirtualMemoryMapEntry",6803],[10,"RangeBounds",8402],[5,"VirtualSpaceAllocator",6950],[6,"VirtualSpaceError",6950],[10,"Display",8367],[10,"Debug",8367],[5,"VirtualSpaceEntry",6950],[20,"MaybeUninit",8403],[5,"MemoryMapIter",7063],[5,"EfiMemoryMapIter",7063],[6,"FramebufferColorInfo",7063],[5,"VbeControlInfo",7063],[5,"VbeModeInfo",7063],[5,"VbeInfo",7063],[5,"BasicMemoryInfo",7063],[5,"AdvancedPowerManagementTable",7063],[6,"MultiBootTag",7063],[6,"MemoryMapType",7063],[6,"EfiMemoryMapType",7063],[5,"MemoryMap",7063],[5,"EfiMemoryMap",7063],[5,"MultiBootTagIter",7063],[5,"PanicInfo",8404],[5,"Process",7717],[1,"i32"],[1,"isize"],[5,"GoingUpAllocator",7717],[6,"ProcessError",7717],[5,"FxSave",7717],[5,"ProcessContext",7717],[6,"ProcessState",7717],[5,"Scheduler",7937],[6,"SyscallArgError",8405],[5,"SpawnFileMapping",8382],[8,"SyscallResult",8405],[5,"CachePadded",8012],[10,"PartialEq",8378],[10,"Hash",8387],[5,"Once",8046],[5,"OnceLock",8046],[5,"Lock",8115],[5,"ReMutexGuard",8219],[5,"RwLockReadGuard",8276],[5,"RwLockWriteGuard",8276],[5,"RwLock",8276],[15,"Unknown",1544],[15,"Unknown",1546],[5,"ApicMmio",2146],[8,"KeyboardReader",3614],[8,"MouseReader",3651],[15,"Memory",3933],[15,"Io",3933],[6,"DirTreverse",4557],[15,"DiskReadError",4998],[15,"Normal",5637],[15,"RootFat12_16",5637],[5,"FreePage",6746],[8,"Result",6950],[5,"MemoryMapTagRaw",7063],[5,"FramebufferRaw",7063],[5,"EfiMemoryMapsRaw",7063],[5,"MemoryMapsRaw",7063],[5,"MultiBootTagRaw",7063],[15,"Rgb",7697],[15,"Indexed",7697],[15,"ImageLoadBasePhysical",7704],[15,"BiosBootDevice",7704],[15,"BootCommandLine",7704],[15,"BootLoaderName",7704],[15,"Efi64SystemTablePtr",7704],[15,"Efi64ImageHandle",7704]],"b":[[312,"impl-Debug-for-AmlCode"],[313,"impl-Display-for-AmlCode"],[994,"impl-Debug-for-BiosTables"],[995,"impl-Display-for-BiosTables"],[2041,"impl-InterruptDescriptorTableEntry%3Cextern+%22x86-interrupt%22+fn(InterruptStackFrame64,+u64)%3E"],[2042,"impl-InterruptDescriptorTableEntry%3Cextern+%22x86-interrupt%22+fn(InterruptStackFrame64)%3E"],[2831,"impl-Debug-for-RtcTime"],[2832,"impl-Display-for-RtcTime"],[3059,"impl-Debug-for-IdeError"],[3060,"impl-Display-for-IdeError"],[3837,"impl-Debug-for-PciDeviceType"],[3838,"impl-Display-for-PciDeviceType"],[4752,"impl-From%3CFile%3E-for-FilesystemNode"],[4753,"impl-From%3CDirectory%3E-for-FilesystemNode"],[4759,"impl-From%3CDirectoryNode%3E-for-Node"],[4760,"impl-From%3CFileNode%3E-for-Node"],[5745,"impl-AsRef%3Cstr%3E-for-Path"],[5746,"impl-AsRef%3CPath%3E-for-Path"],[5747,"impl-AsRef%3CPath%3E-for-Component%3C\'_%3E"],[5748,"impl-AsRef%3Cstr%3E-for-Component%3C\'_%3E"],[5749,"impl-AsRef%3CPath%3E-for-Components%3C\'_%3E"],[5750,"impl-AsRef%3Cstr%3E-for-Components%3C\'_%3E"],[5751,"impl-AsRef%3Cstr%3E-for-Iter%3C\'_%3E"],[5752,"impl-AsRef%3CPath%3E-for-Iter%3C\'_%3E"],[5753,"impl-AsRef%3Cstr%3E-for-PathBuf"],[5754,"impl-AsRef%3CPath%3E-for-PathBuf"],[5834,"impl-PartialEq%3CPathBuf%3E-for-%26Path"],[5835,"impl-PartialEq%3CPathBuf%3E-for-Path"],[5836,"impl-PartialEq%3CCow%3C\'a,+Path%3E%3E-for-%26Path"],[5837,"impl-PartialEq-for-Path"],[5838,"impl-PartialEq%3CCow%3C\'a,+Path%3E%3E-for-Path"],[5842,"impl-PartialEq%3CCow%3C\'a,+Path%3E%3E-for-PathBuf"],[5843,"impl-PartialEq%3CPath%3E-for-PathBuf"],[5844,"impl-PartialEq-for-PathBuf"],[5845,"impl-PartialEq%3C%26Path%3E-for-PathBuf"],[5851,"impl-Debug-for-Display%3C\'_%3E"],[5852,"impl-Display-for-Display%3C\'_%3E"],[5859,"impl-Debug-for-StripPrefixError"],[5860,"impl-Display-for-StripPrefixError"],[5868,"impl-From%3CCow%3C\'a,+Path%3E%3E-for-PathBuf"],[5869,"impl-From%3CString%3E-for-PathBuf"],[5870,"impl-From%3C%26T%3E-for-PathBuf"],[5941,"impl-PartialOrd%3CCow%3C\'a,+Path%3E%3E-for-Path"],[5942,"impl-PartialOrd%3CPathBuf%3E-for-%26Path"],[5943,"impl-PartialOrd%3CCow%3C\'a,+Path%3E%3E-for-%26Path"],[5944,"impl-PartialOrd%3CPathBuf%3E-for-Path"],[5945,"impl-PartialOrd-for-Path"],[5949,"impl-PartialOrd%3C%26Path%3E-for-PathBuf"],[5950,"impl-PartialOrd%3CCow%3C\'a,+Path%3E%3E-for-PathBuf"],[5951,"impl-PartialOrd%3CPath%3E-for-PathBuf"],[5952,"impl-PartialOrd-for-PathBuf"],[6113,"impl-VgaDisplay"],[6114,"impl-DrawTarget-for-VgaDisplay"],[6716,"impl-Debug-for-MemSize%3CT%3E"],[6717,"impl-Display-for-MemSize%3CT%3E"],[6999,"impl-Display-for-VirtualSpace%3CT%3E"],[7000,"impl-Debug-for-VirtualSpace%3CT%3E"],[7309,"impl-Display-for-MemoryMap"],[7310,"impl-Debug-for-MemoryMap"],[7313,"impl-Display-for-EfiMemoryMap"],[7314,"impl-Debug-for-EfiMemoryMap"],[8170,"impl-Display-for-MutexGuard%3C\'_,+T%3E"],[8171,"impl-Debug-for-MutexGuard%3C\'_,+T%3E"],[8305,"impl-Display-for-RwLockReadGuard%3C\'_,+T%3E"],[8306,"impl-Debug-for-RwLockReadGuard%3C\'_,+T%3E"],[8307,"impl-Display-for-RwLockWriteGuard%3C\'_,+T%3E"],[8308,"impl-Debug-for-RwLockWriteGuard%3C\'_,+T%3E"]]}],\
["micromath",{"doc":"Embedded-friendly (i.e. <code>#![no_std]</code>) math library featuring …","t":"TTFKTTTTTTTTTTTTTTMNMNNNNMNMNMNMMNNNMNNMNMNNNNNNMNNNMNMNNNNNMNNNNNNNNNMNNMNMNNNNNNMNMNMNMNNNMNNNNNNMNMNNMNNNNNMNMNMNMNMNMNNNNNNMNNMNNNN","n":["DIGITS","EPSILON","F32","F32Ext","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","ONE","RADIX","ZERO","abs","abs","acos","add","add","add_assign","add_assign","asin","asin","atan","atan","atan2","atan2","atan2_norm","atan_norm","atan_norm","borrow","borrow_mut","ceil","ceil","clone","copysign","copysign","cos","cos","default","div","div","div_assign","div_assign","div_euclid","div_euclid","eq","eq","exp","exp","floor","floor","fmt","fmt","fmt","fmt","fract","fract","from","from","from","from","from","from","from_bits","from_str","hypot","hypot","into","inv","inv","invsqrt","invsqrt","is_finite","is_infinite","is_nan","is_sign_negative","is_sign_positive","ln","ln","log","log","log10","log10","log2","log2","mul","mul","mul_add","mul_add","mul_assign","mul_assign","neg","partial_cmp","partial_cmp","powf","powf","powi","powi","product","recip","recip","rem","rem","rem_assign","rem_assign","rem_euclid","rem_euclid","round","round","signum","signum","sin","sin","sin_cos","sin_cos","sqrt","sqrt","sub","sub","sub_assign","sub_assign","sum","tan","tan","to_bits","trunc","trunc","try_from","try_into","type_id"],"q":[[0,"micromath"],[135,"core::fmt"],[136,"core::fmt"],[137,"core::result"],[138,"core::cmp"],[139,"core::option"],[140,"core::iter::traits::iterator"],[141,"core::any"]],"d":["Approximate number of significant digits in base 10.","Machine epsilon value for <code>f32</code>.","32-bit floating point wrapper which implements fast …","<code>f32</code> extension providing various arithmetic approximations …","Infinity (∞).","Number of significant digits in base 2.","Largest finite <code>f32</code> value.","Maximum possible power of 10 exponent.","Maximum possible power of 2 exponent.","Smallest finite <code>f32</code> value.","Minimum possible normal power of 10 exponent.","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value.","Not a Number (NaN).","Negative infinity (−∞).","The value <code>1.0</code>.","The radix or base of the internal representation of <code>f32</code>.","The value <code>0.0</code>.","Compute absolute value with a constant-time, …","Computes the absolute value of <code>self</code>.","Approximates <code>acos(x)</code> in radians in the range <code>[0, pi]</code>","","","","","Approximates <code>asin(x)</code> in radians in the range <code>[-pi/2, pi/2]</code>.","Computes <code>asin(x)</code> approximation in radians in the range …","Approximates <code>atan(x)</code> in radians with a maximum error of …","Approximates <code>atan(x)</code> approximation in radians with a …","Approximates the four quadrant arctangent <code>atan2(x)</code> in …","Approximates the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Approximates the four quadrant arctangent. Normalized to …","Approximates <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …","Approximates <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …","","","Approximates floating point ceiling.","Returns the smallest integer greater than or equal to a …","","Copies the sign from one number to another and returns it.","Returns a number composed of the magnitude of <code>self</code> and the …","Approximates cosine in radians with a maximum error of …","Approximates <code>cos(x)</code> in radians with a maximum error of …","","","","","","Calculates Euclidean division, the matching method for …","Calculates Euclidean division, the matching method for …","","","Approximates <code>e^x</code>.","Returns <code>e^(self)</code>, (the exponential function).","Approximates floating point floor.","Returns the largest integer less than or equal to a number.","","","","","Retrieve the fractional part of floating point with sign.","Returns the fractional part of a number with sign.","","","","Returns the argument unchanged.","","","Raw transmutation from <code>u32</code>.","","Approximates the length of the hypotenuse of a right-angle …","Calculate the length of the hypotenuse of a right-angle …","Calls <code>U::from(self)</code>.","Approximates <code>1/x</code> with an average deviation of ~8%.","Fast approximation of <code>1/x</code>.","Approximates inverse square root with an average deviation …","Approximate inverse square root with an average deviation …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code>.","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Approximates <code>ln(x)</code>.","Approximates the natural logarithm of the number.","Approximates <code>log</code> with an arbitrary base.","Approximates the logarithm of the number with respect to …","Approximates <code>log10</code>.","Approximates the base 10 logarithm of the number.","Approximates <code>log2</code>.","Approximates the base 2 logarithm of the number.","","","Computes <code>(self * a) + b</code>.","Computes <code>(self * a) + b</code>.","","","","","","Approximates <code>self^n</code>.","Approximates a number raised to a floating point power.","Approximates <code>self^n</code> where n is an <code>i32</code>","Approximates a number raised to an integer power.","","Returns the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","Calculates the least nonnegative remainder of …","Calculates the least non-negative remainder of …","Round the number part of floating point with sign.","Returns the nearest integer to a number.","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Approximates sine in radians with a maximum error of <code>0.002</code>.","Approximates <code>sin(x)</code> in radians with a maximum error of …","Simultaneously computes the sine and cosine of the number, …","Simultaneously computes the sine and cosine of the number, …","Approximates square root with an average deviation of ~5%.","Approximates the square root of a number with an average …","","","","","","Approximates <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.","Approximates <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.","Raw transmutation to <code>u32</code>.","Retrieve whole number part of floating point with sign.","Returns the integer part of a number.","","",""],"i":[3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,1,3,3,3,3,1,3,1,3,1,3,1,1,3,3,3,1,3,3,1,3,1,3,3,3,3,3,3,1,3,3,3,1,3,1,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,1,3,1,3,3,3,3,3,3,1,3,1,3,1,3,1,3,3,3,1,3,3,3,3,3,3,1,3,1,3,3,1,3,3,3,3,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,3,3,3,1,3,3,1,3,3,3,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,3],[1,2],[[3,2],3],[[3,3],3],[[3,3],4],[[3,2],4],[1,2],[3,3],[1,2],[3,3],[[1,2],2],[[3,3],3],[[1,2],2],[1,2],[3,3],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,3],[3,3],[[1,2],2],[[3,3],3],[1,2],[3,3],[[],3],[[3,3],3],[[3,2],3],[[3,2],4],[[3,3],4],[[1,2],2],[[3,3],3],[[3,3],5],[[3,2],5],[1,2],[3,3],[1,2],[3,3],[[3,6],7],[[3,6],7],[[3,6],7],[[3,6],7],[1,2],[3,3],[8,3],[9,3],[10,3],[-1,-1,[]],[2,3],[11,3],[12,3],[13,[[15,[3,14]]]],[[1,2],2],[[3,3],3],[-1,-2,[],[]],[1,2],[3,3],[1,2],[3,3],[3,5],[3,5],[3,5],[3,5],[3,5],[1,2],[3,3],[[1,2],2],[[3,3],3],[1,2],[3,3],[1,2],[3,3],[[3,3],3],[[3,2],3],[[1,2,2],2],[[3,3,3],3],[[3,2],4],[[3,3],4],[3,3],[[3,3],[[17,[16]]]],[[3,2],[[17,[16]]]],[[1,2],2],[[3,3],3],[[1,18],2],[[3,18],3],[-1,3,[[20,[],[[19,[3]]]]]],[1,2],[3,3],[[3,3],3],[[3,2],3],[[3,3],4],[[3,2],4],[[1,2],2],[[3,3],3],[1,2],[3,3],[1,2],[3,3],[1,2],[3,3],[1,[[4,[2,2]]]],[3,[[4,[3,3]]]],[1,2],[3,3],[[3,2],3],[[3,3],3],[[3,3],4],[[3,2],4],[-1,3,[[20,[],[[19,[3]]]]]],[1,2],[3,3],[3,12],[1,2],[3,3],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,21,[]]],"c":[],"p":[[10,"F32Ext",0],[1,"f32"],[5,"F32",0],[1,"tuple"],[1,"bool"],[5,"Formatter",135],[8,"Result",135],[1,"u8"],[1,"u16"],[1,"i8"],[1,"i16"],[1,"u32"],[1,"str"],[5,"ParseFloatError",136],[6,"Result",137],[6,"Ordering",138],[6,"Option",139],[1,"i32"],[17,"Item"],[10,"Iterator",140],[5,"TypeId",141]],"b":[[21,"impl-Add%3Cf32%3E-for-F32"],[22,"impl-Add-for-F32"],[23,"impl-AddAssign-for-F32"],[24,"impl-AddAssign%3Cf32%3E-for-F32"],[44,"impl-Div-for-F32"],[45,"impl-Div%3Cf32%3E-for-F32"],[46,"impl-DivAssign%3Cf32%3E-for-F32"],[47,"impl-DivAssign-for-F32"],[50,"impl-PartialEq-for-F32"],[51,"impl-PartialEq%3Cf32%3E-for-F32"],[56,"impl-Display-for-F32"],[57,"impl-UpperExp-for-F32"],[58,"impl-Debug-for-F32"],[59,"impl-LowerExp-for-F32"],[62,"impl-From%3Cu8%3E-for-F32"],[63,"impl-From%3Cu16%3E-for-F32"],[64,"impl-From%3Ci8%3E-for-F32"],[66,"impl-From%3Cf32%3E-for-F32"],[67,"impl-From%3Ci16%3E-for-F32"],[90,"impl-Mul-for-F32"],[91,"impl-Mul%3Cf32%3E-for-F32"],[94,"impl-MulAssign%3Cf32%3E-for-F32"],[95,"impl-MulAssign-for-F32"],[97,"impl-PartialOrd-for-F32"],[98,"impl-PartialOrd%3Cf32%3E-for-F32"],[106,"impl-Rem-for-F32"],[107,"impl-Rem%3Cf32%3E-for-F32"],[108,"impl-RemAssign-for-F32"],[109,"impl-RemAssign%3Cf32%3E-for-F32"],[122,"impl-Sub%3Cf32%3E-for-F32"],[123,"impl-Sub-for-F32"],[124,"impl-SubAssign-for-F32"],[125,"impl-SubAssign%3Cf32%3E-for-F32"]]}],\
["num_traits",{"doc":"Numeric traits for generic mathematics","t":"EEEEEEEEEEEEEPEEGEEREPEEKKKKEKKEFEEKEEEEEEEEEEEEEEEEENNNNCCEEHHHCNNNNNMCCNNOECCECENNNNNNEKKKMMMMKKKKMHMNNNNNMNNNNNMNNNNNNNMNNNNNMNNMMMMMMMMMMKKMMNMNMMMNKNNMMNNMMNNNNNNNNMNMMMMMNNNNMMMNKKTKTKNMHMNNHMKMMMMNMMNMMMMMMMNMMMCCCCCCCCRRKKKMMNMMNKKKKKKKKMMMMMMMMKKMNMMNMKRMKKRMMKKKMMMKKKKMMMMMKKKKKKMMMMMMRKHHMKKHMHMMMHM","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","ConstOne","ConstZero","Empty","Euclid","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","TotalOrder","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","is_subnormal","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","total_cmp","trunc","ConstOne","ConstZero","ONE","One","ZERO","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_div_rem_euclid","checked_rem_euclid","div_euclid","div_rem_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[89,"num_traits::bounds"],[96,"num_traits::cast"],[131,"num_traits::float"],[184,"num_traits::identities"],[198,"num_traits::int"],[218,"num_traits::ops"],[226,"num_traits::ops::bytes"],[237,"num_traits::ops::checked"],[253,"num_traits::ops::euclid"],[261,"num_traits::ops::inv"],[264,"num_traits::ops::mul_add"],[269,"num_traits::ops::overflowing"],[275,"num_traits::ops::saturating"],[284,"num_traits::ops::wrapping"],[296,"num_traits::pow"],[301,"num_traits::sign"],[311,"core::cmp"],[312,"core::fmt"],[313,"core::fmt"],[314,"core::any"],[315,"core::marker"],[316,"core::option"],[317,"core::num"],[318,"core::cmp"],[319,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Trait for floating point numbers that provide an …","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the ordering between <code>self</code> and <code>other</code>.","Return the integer part of a number.","Defines an associated constant representing the …","Defines an associated constant representing the additive …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,9,0,0,2,5,5,0,0,0,0,0,0,2,5,2,5,2,5,0,0,0,0,12,13,12,14,0,0,0,0,15,0,18,21,21,21,21,21,21,21,21,21,21,21,21,21,21,19,19,19,19,19,19,19,19,19,19,19,19,19,19,34,34,34,34,34,34,34,34,34,34,0,0,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,39,35,0,0,80,0,81,0,41,42,0,41,41,42,0,42,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,48,45,0,0,0,45,45,45,48,48,48,0,0,0,0,0,0,0,0,49,50,51,52,53,54,55,56,0,0,57,57,57,58,58,58,0,60,60,0,0,61,61,62,0,0,0,63,64,65,0,0,0,0,66,67,68,66,69,0,0,0,0,0,0,70,71,72,73,74,75,78,0,0,0,78,0,0,0,79,0,79,79,79,0,79],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[10,[[9,[],[[8,[-1]]]],-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[[],12],[[],13],[[],12],[[],14],0,0,0,0,[15,-1,16],[-1,[[17,[-2]]],18,18],[-1,[[17,[18]]],19],[20,[[17,[21]]]],[22,[[17,[21]]]],[23,[[17,[21]]]],[24,[[17,[21]]]],[25,[[17,[21]]]],[26,[[17,[21]]]],[27,[[17,[21]]]],[28,[[17,[21]]]],[29,[[17,[21]]]],[30,[[17,[21]]]],[7,[[17,[21]]]],[31,[[17,[21]]]],[32,[[17,[21]]]],[33,[[17,[21]]]],[19,[[17,[20]]]],[19,[[17,[22]]]],[19,[[17,[23]]]],[19,[[17,[24]]]],[19,[[17,[25]]]],[19,[[17,[26]]]],[19,[[17,[27]]]],[19,[[17,[28]]]],[19,[[17,[29]]]],[19,[[17,[30]]]],[19,[[17,[7]]]],[19,[[17,[31]]]],[19,[[17,[32]]]],[19,[[17,[33]]]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,0,[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[35,35],[35,35],[35,36],[[],35],[35,35],[35,35],[[],35],[35,[[37,[31,24,27]]]],[35,38],[35,38],[35,38],[35,38],[35,38],[35,38],[35,38],[[35,35],35],[[],35],[[35,35],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[35,25],35],[35,35],[35,35],[35,35],[35,35],[35,35],[[39,39],40],[35,35],0,0,0,0,0,0,[41,38],[42,38],[[],-1,41],[[],41],[41,37],[42,37],[[],-1,42],[[],42],0,[43,7],[43,7],[43,43],[43,43],[43,7],[43,7],[[43,7],43],[43,43],[[43,7],43],[[43,7],43],[[43,7],43],[[43,7],43],[43,43],[43,43],[43,43],[43,7],[43,7],[[43,7],43],[[43,7],43],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[45,[],[[44,[-1]]]]],[46,47]],[-1,[[45,[],[[44,[-1]]]]],[46,47]],[-1,[[45,[],[[44,[-1]]]]],[46,47]],[[[48,[],[[44,[-1]]]]],-1,46],[[[48,[],[[44,[-1]]]]],-1,46],[[[48,[],[[44,[-1]]]]],-1,46],0,0,0,0,0,0,0,0,[[49,49],[[17,[49]]]],[[50,50],[[17,[50]]]],[[51,51],[[17,[51]]]],[52,[[17,[52]]]],[[53,53],[[17,[53]]]],[[54,7],[[17,[54]]]],[[55,7],[[17,[55]]]],[[56,56],[[17,[56]]]],0,0,[[57,57],[[17,[57]]]],[[57,57],[[17,[[37,[57,57]]]]]],[[57,57],[[17,[57]]]],[[58,58],58],[[58,58],[[37,[58,58]]]],[[58,58],58],0,0,[[[60,[],[[59,[-1]]]]],-1,[]],0,0,0,[[[61,[],[[59,[-1]]]],-2,-3],-1,[],[],[]],[[62,-1,-2],37,[],[]],0,0,0,[[63,63],[[37,[63,38]]]],[[64,64],[[37,[64,38]]]],[[65,65],[[37,[65,38]]]],0,0,0,0,[[66,66],66],[[67,67],67],[[68,68],68],[[66,66],66],[[69,69],69],0,0,0,0,0,0,[[70,70],70],[[71,71],71],[72,72],[[73,7],73],[[74,7],74],[[75,75],75],0,0,[[-1,33],[[17,[-1]]],[76,41,51]],[[-1,33],-1,[76,41,[77,[],[[59,[]]]]]],[[[78,[],[[59,[-1]]]],-2],-1,[],[]],0,0,[-1,-1,79],[79,79],[[-1,-1],-1,79],[[79,79],79],[79,38],[79,38],[-1,-1,79],[79,79]],"c":[],"p":[[10,"PartialOrd",311],[6,"FloatErrorKind",0],[5,"Formatter",312],[8,"Result",312],[5,"ParseFloatError",0],[1,"str"],[1,"u32"],[17,"FromStrRadixErr"],[10,"Num",0],[6,"Result",313],[5,"TypeId",314],[10,"Bounded",89],[10,"UpperBounded",89],[10,"LowerBounded",89],[10,"AsPrimitive",96],[10,"Copy",315],[6,"Option",316],[10,"NumCast",96],[10,"ToPrimitive",96],[1,"f32"],[10,"FromPrimitive",96],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[1,"u128"],[1,"u16"],[1,"u64"],[1,"u8"],[1,"usize"],[10,"FloatConst",131],[10,"FloatCore",131],[6,"FpCategory",317],[1,"tuple"],[1,"bool"],[10,"TotalOrder",131],[6,"Ordering",311],[10,"One",184],[10,"Zero",184],[10,"PrimInt",198],[17,"Bytes"],[10,"FromBytes",226],[10,"NumBytes",226],[10,"Sized",315],[10,"ToBytes",226],[10,"CheckedAdd",237],[10,"CheckedDiv",237],[10,"CheckedMul",237],[10,"CheckedNeg",237],[10,"CheckedRem",237],[10,"CheckedShl",237],[10,"CheckedShr",237],[10,"CheckedSub",237],[10,"CheckedEuclid",253],[10,"Euclid",253],[17,"Output"],[10,"Inv",261],[10,"MulAdd",264],[10,"MulAddAssign",264],[10,"OverflowingAdd",269],[10,"OverflowingMul",269],[10,"OverflowingSub",269],[10,"Saturating",275],[10,"SaturatingAdd",275],[10,"SaturatingMul",275],[10,"SaturatingSub",275],[10,"WrappingAdd",284],[10,"WrappingMul",284],[10,"WrappingNeg",284],[10,"WrappingShl",284],[10,"WrappingShr",284],[10,"WrappingSub",284],[10,"Clone",318],[10,"Mul",319],[10,"Pow",296],[10,"Signed",301],[10,"ConstOne",184],[10,"ConstZero",184]],"b":[[66,"impl-Debug-for-ParseFloatError"],[67,"impl-Display-for-ParseFloatError"]]}],\
["unwinding",{"doc":"Unwinding library in Rust and for Rust","t":"CTTTTTTTTTTTTTITFFFIFIIHHHHHHHHHHHHHHHHHNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNN","n":["abi","CLEANUP_PHASE","CONTINUE_UNWIND","END_OF_STACK","END_OF_STACK","FATAL_PHASE1_ERROR","FATAL_PHASE2_ERROR","FORCE_UNWIND","FOREIGN_EXCEPTION_CAUGHT","HANDLER_FOUND","HANDLER_FRAME","INSTALL_CONTEXT","NORMAL_STOP","NO_REASON","PersonalityRoutine","SEARCH_PHASE","UnwindAction","UnwindContext","UnwindException","UnwindExceptionCleanupFn","UnwindReasonCode","UnwindStopFn","UnwindTraceFn","_Unwind_Backtrace","_Unwind_DeleteException","_Unwind_FindEnclosingFunction","_Unwind_ForcedUnwind","_Unwind_GetCFA","_Unwind_GetDataRelBase","_Unwind_GetGR","_Unwind_GetIP","_Unwind_GetIPInfo","_Unwind_GetLanguageSpecificData","_Unwind_GetRegionStart","_Unwind_GetTextRelBase","_Unwind_RaiseException","_Unwind_Resume","_Unwind_Resume_or_Rethrow","_Unwind_SetGR","_Unwind_SetIP","bitor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","contains","empty","eq","eq","exception_class","exception_cleanup","from","from","from","from","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"unwinding"],[1,"unwinding::abi"],[77,"core::ffi"],[78,"core::result"],[79,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,11,3,3,11,3,3,11,3,3,11,3,3,3,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,4,7,3,11,4,7,3,11,3,11,11,11,3,11,4,4,4,7,3,11,4,7,3,11,4,7,3,11,4,7,3,11,4,7,3,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[4,5],[2,2],[[4,6,2],3],[7,8],[7,8],[[7,9],8],[7,8],[[7,9],8],[7,2],[7,8],[7,8],[4,3],[4,10],[4,3],[[7,9,8],5],[[7,8],5],[[11,11],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[11,11],[[11,11],12],[[],11],[[3,3],12],[[11,11],12],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]]],"c":[],"p":[[8,"UnwindTraceFn",1],[6,"c_void",77],[5,"UnwindReasonCode",1],[5,"UnwindException",1],[1,"tuple"],[8,"UnwindStopFn",1],[5,"UnwindContext",1],[1,"usize"],[1,"i32"],[1,"never"],[5,"UnwindAction",1],[1,"bool"],[6,"Result",78],[5,"TypeId",79]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
