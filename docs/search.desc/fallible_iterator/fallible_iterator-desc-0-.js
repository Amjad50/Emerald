searchState.loadedDescShard("fallible_iterator", 0, "“Fallible” iterators.\nAn iterator which yields the elements of one iterator …\nAn iterator which clones the elements of the underlying …\nA fallible iterator that wraps a normal iterator over …\nAn iterator which cycles another endlessly.\nA fallible iterator able to yield elements from both ends.\nAn iterator that yields nothing.\nAn iterator that yields the iteration count as well as the …\nThe error type.\nThe error value of the iterator.\nAn <code>Iterator</code>-like trait that allows for calculation of …\nAn iterator which uses a fallible predicate to determine …\nAn iterator which both filters and maps the values of the …\nAn iterator which maps each element to another iterator, …\nAn iterator which flattens an iterator of iterators, …\nAn iterator using a function to generate new values.\nAn iterator that yields <code>Ok(None)</code> forever after the …\nAn iterator which passes each element to a closure before …\nA fallible iterator that wraps a normal iterator over …\nThe iterator.\nConversion into a <code>FallibleIterator</code>.\nThe type being iterated over.\nThe elements of the iterator.\nA normal (non-fallible) iterator which wraps a fallible …\nAn extnsion-trait with set of useful methods to convert …\nAn iterator which applies a fallible transform to the …\nAn iterator which applies a transform to the errors of the …\nAn iterator that yields something exactly once.\nAn iterator that fails with a predetermined error exactly …\nAn iterator which can look at the next element without …\nAn iterator that endlessly repeats a single element.\nAn iterator that endlessly repeats a single error.\nAn iterator which yields elements of the underlying …\nAn iterator which applies a stateful closure.\nAn iterator which skips initial elements.\nAn iterator which skips initial elements based on a …\nAn iterator which steps through the elements of the …\nAn iterator which yields a limited number of elements from …\nAn iterator which yields elements based on a predicate.\nAn iterator that unwraps every element yielded by the …\nAn iterator that yields pairs of this iterator’s and …\nDetermines if all elements of this iterator match a …\nDetermines if any element of this iterator matches a …\nBorrow an iterator rather than consuming it.\nReturns an iterator which yields the elements of this …\nReturns an iterator which clones all of its elements.\nLexicographically compares the elements of this iterator …\nTransforms the iterator into a collection.\nConverts an <code>Iterator&lt;Item = Result&lt;T, E&gt;&gt;</code> into a …\nConsumes the iterator, returning the number of remaining …\nReturns an iterator which repeats this iterator endlessly.\nCreates an iterator that yields nothing.\nReturns an iterator which yields the current iteration …\nDetermines if the elements of this iterator are equal to …\nReturns an iterator which uses a predicate to determine …\nReturns an iterator which both filters and maps. The …\nReturns the first element of the iterator that matches a …\nApplies a function to the elements of the iterator, …\nReturns an iterator which maps this iterator’s elements …\nReturns an iterator which flattens an iterator of …\nApplies a function over the elements of the iterator, …\nCalls a fallible closure on each element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an iterator from a fallible function generating …\nReturns an iterator which yields this iterator’s …\nDetermines if the elements of this iterator are …\nDetermines if the elements of this iterator are …\nReturns an iterator which passes each element to a closure …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nCreates a fallible iterator from a value.\nReturns a normal (non-fallible) iterator over …\nReturns the last element of the iterator.\nDetermines if the elements of this iterator are …\nDetermines if the elements of this iterator are …\nReturns an iterator which applies a fallible transform to …\nReturns an iterator which applies a transform to the …\nReturns the maximal element of the iterator.\nReturns the element that gives the maximum value with …\nReturns the element of the iterator which gives the …\nReturns the minimal element of the iterator.\nReturns the element that gives the minimum value with …\nReturns the element of the iterator which gives the …\nDetermines if the elements of this iterator are not equal …\nAdvances the iterator and returns the next value.\nAdvances the end of the iterator, returning the last value.\nConsume and return the next value of this iterator if a …\nConsume and return the next item if it is equal to <code>expected</code>…\nReturns the <code>n</code>th element of the iterator.\nCreates an iterator that yields an element exactly once.\nCreates an iterator that fails with a predetermined error …\nLexicographically compares the elements of this iterator …\nTransforms the iterator into two collections, partitioning …\nReturns a reference to the next value without advancing …\nReturns an iterator that can peek at the next element …\nReturns the position of the first element of this iterator …\nCreates an iterator that endlessly repeats a single …\nCreates an iterator that endlessly repeats a single error.\nReturns an iterator that yields this iterator’s items in …\nApplies a function over the elements of the iterator in …\nReturns an iterator which applies a stateful map to values …\nReturns bounds on the remaining length of the iterator.\nReturns an iterator which skips the first <code>n</code> values of this …\nReturns an iterator that skips elements based on a …\nReturns an iterator starting at the same point, but …\nReturns an iterator that yields only the first <code>n</code> values of …\nReturns an iterator that yields elements based on a …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nApplies a function over the elements of the iterator, …\nApplies a function over the elements of the iterator in …\nReturns an iterator which unwraps all of its elements.\nConverts an iterator of pairs into a pair of containers.\nReturns an iterator that yields pairs of this iterator’s …")