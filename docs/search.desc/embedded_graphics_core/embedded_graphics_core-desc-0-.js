searchState.loadedDescShard("embedded_graphics_core", 0, "embedded-graphics-core contains the core components of …\nThe pixel color type.\nMarks an object as “drawable”. Must be implemented for …\nThe return type of the <code>draw</code> method.\nA single pixel.\nDraw the graphics object using the supplied DrawTarget.\nA target for embedded-graphics drawing operations.\nReturns the argument unchanged.\nGeometry module.\nImage drawable.\nCalls <code>U::from(self)</code>.\nPixel color types.\nPrelude\nCore primitives.\nThe pixel color type the targetted display supports.\nA target for embedded-graphics drawing operations.\nError type to return when a drawing operation fails.\nFill the entire display with a solid color.\nDraw individual pixels to the display without a defined …\nFill a given area with an iterator providing a contiguous …\nFill a given area with a solid color.\nAnchor point.\nX axis anchor point.\nY axis anchor point.\nBottom.\nBottom center.\nBottom left.\nBottom right.\nCenter.\nCenter.\nCenter.\nCenter left.\nCenter right.\nAdds the ability to get the bounding box of an item.\nLeft.\nDimensions with <code>top_left</code> of the bounding box at <code>(0, 0)</code>.\n2D point.\nRight.\n2D size.\nTop.\nTop center.\nTop left.\nTop right.\nRemove the sign from a coordinate\nOffsets a point by adding a size.\nOffsets a point by adding a size.\nReturns the bounding box.\nReturns the componentwise division of two <code>Points</code>s.\nReturns the componentwise division of two <code>Size</code>s.\nReturns the componentwise maximum of two <code>Point</code>s\nReturns the componentwise maximum of two <code>Size</code>s.\nReturns the componentwise minimum of two <code>Point</code>s\nReturns the componentwise minimum of two <code>Size</code>s.\nReturns the componentwise multiplication of two <code>Point</code>s.\nReturns the componentwise multiplication of two <code>Size</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an anchor point from an X and Y component.\nThe height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a point from  X and Y coordinates.\nCreates a size from a width and a height.\nCreates a point with X and Y values set to an equal value.\nCreates a size with width and height set to an equal value.\nSaturating addition.\nSaturating subtraction.\nReturns the size of the bounding box.\nOffsets a point by subtracting a size.\nOffsets a point by subtracting a size.\nThe width.\nReturns the X axis component.\nThe x coordinate.\nReturns a point with equal <code>x</code> value and <code>y</code> set to <code>0</code>.\nReturns a size with equal <code>width</code> value and <code>height</code> set to <code>0</code>.\nReturns the Y axis component.\nThe y coordinate.\nReturns a point with equal <code>y</code> value and <code>x</code> set to <code>0</code>.\nReturns a size with equal <code>height</code> value and <code>width</code> set to <code>0</code>.\nCreates a point with X and Y equal to zero.\nCreates a size with width and height equal to zero.\nThe color type.\nThe color type.\nPixel getter.\nImage drawable.\nDraws the entire image to the target.\nDraws a part of the image to the target.\nGets the color of a pixel.\nBlack color (0% luma).\nBlack color (R: 0%, G: 0%, B: 0%)\nBlue color (R: 0%, G: 0%, B: 100%)\nBgr555 color.\nBgr565 color.\nBgr666 color.\nBgr888 color.\nBinary color.\n Alice Blue\n Antique White\n Aqua\n Aquamarine\n Azure\n Beige\n Bisque\n Black\n Blanched Almond\n Blue\n Blue Violet\n Brown\n Burly Wood\n Cadet Blue\n Chartreuse\n Chocolate\n Coral\n Cornflower Blue\n Cornsilk\n Crimson\n Cyan\n Dark Blue\n Dark Cyan\n Dark Goldenrod\n Dark Gray\n Dark Green\n Dark Khaki\n Dark Magenta\n Dark Olive Green\n Dark Orange\n Dark Orchid\n Dark Red\n Dark Salmon\n Dark Sea Green\n Dark Slate Blue\n Dark Slate Gray\n Dark Turquoise\n Dark Violet\n Deep Pink\n Deep Sky Blue\n Dim Gray\n Dodger Blue\n Fire Brick\n Floral White\n Forest Green\n Fuchsia\n Gainsboro\n Ghost White\n Gold\n Goldenrod\n Gray\n Green\n Green Yellow\n Honeydew\n Hot Pink\n Indian Red\n Indigo\n Ivory\n Khaki\n Lavender\n Lavender Blush\n Lawn Green\n Lemon Chiffon\n Light Blue\n Light Coral\n Light Cyan\n Light Goldenrod Yellow\n Light Gray\n Light Green\n Light Pink\n Light Salmon\n Light Sea Green\n Light Sky Blue\n Light Slate Gray\n Light Steel Blue\n Light Yellow\n Lime\n Lime Green\n Linen\n Magenta\n Maroon\n Medium Aquamarine\n Medium Blue\n Medium Orchid\n Medium Purple\n Medium Sea Green\n Medium Slate Blue\n Medium Spring Green\n Medium Turquoise\n Medium Violet Red\n Midnight Blue\n Mint Cream\n Misty Rose\n Moccasin\n Navajo White\n Navy\n Old Lace\n Olive\n Olive Drab\n Orange\n Orange Red\n Orchid\n Pale Goldenrod\n Pale Green\n Pale Turquoise\n Pale Violet Red\n Papaya Whip\n Peach Puff\n Peru\n Pink\n Plum\n Powder Blue\n Purple\n Rebeccapurple\n Red\n Rosy Brown\n Royal Blue\n Saddle Brown\n Salmon\n Sandy Brown\n Seashell\n Sea Green\n Sienna\n Silver\n Sky Blue\n Slate Blue\n Slate Gray\n Snow\n Spring Green\n Steel Blue\n Tan\n Teal\n Thistle\n Tomato\n Turquoise\n Violet\n Wheat\n White\n White Smoke\n Yellow\n Yellow Green\nCyan color (R: 0%, G: 100%, B: 100%)\nGreen color (R: 0%, G: 100%, B: 0%)\n2 bit grayscale color.\n4 bit grayscale color.\n8 bit grayscale color.\nGrayscale color.\nConvert a <code>PixelColor</code> into its underlying storage type\nMagenta color (R: 100%, G: 0%, B: 100%)\nThe maximum value in the blue channel.\nThe maximum value in the green channel.\nThe maximum value in the red channel.\nInactive pixel.\nActive pixel.\nPixel color trait.\nRed color (R: 100%, G: 0%, B: 0%)\nRaw data type.\nRgb555 color.\nRgb565 color.\nRgb666 color.\nRgb888 color.\nRGB color.\nThe underlying storage type for the pixel color\nWhite color (100% luma).\nWhite color (R: 100%, G: 100%, B: 100%)\nNamed colors as defined in the CSS specification.\nYellow color (R: 100%, G: 100%, B: 0%)\nReturns the blue channel value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the green channel value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>PixelColor</code> into its raw storage form\nInverts the color.\nReturns <code>true</code> if this color is <code>Off</code>.\nReturns <code>true</code> if this color is <code>On</code>.\nReturns the luma channel value.\nCreates a new grayscale color.\nCreates a new grayscale color.\nCreates a new grayscale color.\nCreates a new Rgb555 color. Too large channel values will …\nCreates a new Bgr555 color. Too large channel values will …\nCreates a new Rgb565 color. Too large channel values will …\nCreates a new Bgr565 color. Too large channel values will …\nCreates a new Rgb666 color. Too large channel values will …\nCreates a new Bgr666 color. Too large channel values will …\nCreates a new Rgb888 color. Too large channel values will …\nCreates a new Bgr888 color. Too large channel values will …\nReturns the red channel value.\nRaw color types.\nBits per pixel.\nBig endian byte order marker.\nRaw data byte order.\nReturn type of methods in this trait.\nLittle endian byte order marker.\nTrait implemented by all <code>RawUx</code> types.\n1 bit per pixel raw data.\n16 bits per pixel raw data.\n2 bits per pixel raw data.\n24 bits per pixel raw data.\n32 bits per pixel raw data.\n4 bits per pixel raw data.\n8 bits per pixel raw data.\nStorage type.\nTrait to convert colors into a byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>u32</code> into a <code>RawData</code> type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this raw data into the storage type.\nCreates a new color from the least significant 1 bit of …\nCreates a new color from the least significant 2 bits of …\nCreates a new color from the least significant 4 bits of …\nCreates a new color from the least significant 8 bits of …\nCreates a new color from the least significant 16 bits of …\nCreates a new color from the least significant 24 bits of …\nCreates a new color from the least significant 32 bits of …\nConverts a color into a byte array with big endian byte …\nConverts a color into a byte array with little endian byte …\nConverts a color into a byte array with native byte order.\nIterator over all points inside the primitive.\nCreate an iterator over all points in the primitive.\nReturns an iterator over all points inside the primitive.\nThe rectangle primitive.\nIterator over all points inside the rectangle.\nRectangle primitive\nReturns an anchor point.\nReturns the X coordinate of a given anchor edge of the …\nReturns the Y coordinate of a given anchor edge of the …\nReturns the bottom right corner of this rectangle.\nReturns the center of this rectangle.\nReturns the range of X coordinates in this rectangle.\nReturn whether the rectangle contains a given point.\nCreate a points iterator that returns no items.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>Rectangle</code> containing the intersection of <code>self</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> is the rectangle is zero sized.\nCreates a new rectangle from the top left point and the …\nOffset the rectangle by a given value.\nReturns a resized copy of this rectangle.\nReturns a new rectangle with the given height, resized …\nReturns a new rectangle with the given width, resized …\nReturns the range of Y coordinates in this rectangle.\nSize of the rectangle.\nTop left point of the rectangle.\nCreates a new rectangle from the center point and the size.\nCreates a new rectangle from two corners.\nReturns a zero sized rectangle.")