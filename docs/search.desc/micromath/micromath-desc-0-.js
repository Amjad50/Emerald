searchState.loadedDescShard("micromath", 0, "Embedded-friendly (i.e. <code>#![no_std]</code>) math library featuring …\nApproximate number of significant digits in base 10.\nMachine epsilon value for <code>f32</code>.\n32-bit floating point wrapper which implements fast …\n<code>f32</code> extension providing various arithmetic approximations …\nInfinity (∞).\nNumber of significant digits in base 2.\nLargest finite <code>f32</code> value.\nMaximum possible power of 10 exponent.\nMaximum possible power of 2 exponent.\nSmallest finite <code>f32</code> value.\nMinimum possible normal power of 10 exponent.\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f32</code> value.\nNot a Number (NaN).\nNegative infinity (−∞).\nThe value <code>1.0</code>.\nThe radix or base of the internal representation of <code>f32</code>.\nThe value <code>0.0</code>.\nCompute absolute value with a constant-time, …\nComputes the absolute value of <code>self</code>.\nApproximates <code>acos(x)</code> in radians in the range <code>[0, pi]</code>\nApproximates <code>asin(x)</code> in radians in the range <code>[-pi/2, pi/2]</code>.\nComputes <code>asin(x)</code> approximation in radians in the range …\nApproximates <code>atan(x)</code> in radians with a maximum error of …\nApproximates <code>atan(x)</code> approximation in radians with a …\nApproximates the four quadrant arctangent <code>atan2(x)</code> in …\nApproximates the four quadrant arctangent of <code>self</code> (<code>y</code>) and …\nApproximates the four quadrant arctangent. Normalized to …\nApproximates <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …\nApproximates <code>atan(x)</code> normalized to the <code>[−1,1]</code> range with …\nApproximates floating point ceiling.\nReturns the smallest integer greater than or equal to a …\nCopies the sign from one number to another and returns it.\nReturns a number composed of the magnitude of <code>self</code> and the …\nApproximates cosine in radians with a maximum error of …\nApproximates <code>cos(x)</code> in radians with a maximum error of …\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nApproximates <code>e^x</code>.\nReturns <code>e^(self)</code>, (the exponential function).\nApproximates floating point floor.\nReturns the largest integer less than or equal to a number.\nRetrieve the fractional part of floating point with sign.\nReturns the fractional part of a number with sign.\nReturns the argument unchanged.\nRaw transmutation from <code>u32</code>.\nApproximates the length of the hypotenuse of a right-angle …\nCalculate the length of the hypotenuse of a right-angle …\nCalls <code>U::from(self)</code>.\nApproximates <code>1/x</code> with an average deviation of ~8%.\nFast approximation of <code>1/x</code>.\nApproximates inverse square root with an average deviation …\nApproximate inverse square root with an average deviation …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code>.\nReturns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …\nApproximates <code>ln(x)</code>.\nApproximates the natural logarithm of the number.\nApproximates <code>log</code> with an arbitrary base.\nApproximates the logarithm of the number with respect to …\nApproximates <code>log10</code>.\nApproximates the base 10 logarithm of the number.\nApproximates <code>log2</code>.\nApproximates the base 2 logarithm of the number.\nComputes <code>(self * a) + b</code>.\nComputes <code>(self * a) + b</code>.\nApproximates <code>self^n</code>.\nApproximates a number raised to a floating point power.\nApproximates <code>self^n</code> where n is an <code>i32</code>\nApproximates a number raised to an integer power.\nReturns the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (inverse) of a number, <code>1/x</code>.\nCalculates the least nonnegative remainder of …\nCalculates the least non-negative remainder of …\nRound the number part of floating point with sign.\nReturns the nearest integer to a number.\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nApproximates sine in radians with a maximum error of <code>0.002</code>.\nApproximates <code>sin(x)</code> in radians with a maximum error of …\nSimultaneously computes the sine and cosine of the number, …\nSimultaneously computes the sine and cosine of the number, …\nApproximates square root with an average deviation of ~5%.\nApproximates the square root of a number with an average …\nApproximates <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.\nApproximates <code>tan(x)</code> in radians with a maximum error of <code>0.6</code>.\nRaw transmutation to <code>u32</code>.\nRetrieve whole number part of floating point with sign.\nReturns the integer part of a number.")