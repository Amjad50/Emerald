searchState.loadedDescShard("emerald_kernel_user_link", 0, "Creates a syscall, the first argument is the syscall …\nGet the syscall arguments from the interrupt state, the …\nReal time clock, this follows the unix time\nMonotonic system time, this is based on the system time …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA blocking flag when dealing with files When using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWill extract all the information from the flags, will …\nBlit a region from userspace memory into the graphics …\nGet information about the framebuffer &amp;mut FrameBufferInfo\nRelease ownership of the graphics device No arguments\nTake ownership of the graphics device No arguments\nThe position in the destination framebuffer to start …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the position in the memory buffer for a given pixel …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe memory buffer to blit from, this represent the whole …\nThe size of the memory buffer required to hold the …\nGet the pixel slice at a given position (read-only)\nGet the pixel slice at a given position\nThe size of the region to blit (width, height)\nThe position in the source framebuffer to start blitting …\nThe framebuffer info of the source memory i.e. metadata …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nmust be one of user interrupts, i.e. 0x20+\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")