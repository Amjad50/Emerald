searchState.loadedDescShard("kernel", 0, "<code>multiboot_info</code> is essentially <code>&#39;static</code>, since it won’t …\nStores some items and data related to ACPI\nHalper function\nReturns the argument unchanged.\nReturns the argument unchanged.\nSetup interrupts and request ownership of ACPI\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSLP_TYPa and SLP_TYPb data for _S1_ until _S5_\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA version of UnresolvedDataObject that is after execution …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUndefined\nSpecial variant that only prints the <code>u8</code> value, doesn’t …\n<code>D</code> is the type of data object, it can be …\ninner state of the parser to store information about the …\nDataObject representation as it is in the AML, which may …\nRenamed to not be confused with <code>Clone::clone</code>\nRenamed to not be confused with <code>Clone::clone</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShared state all method names\nall found names (aliases, fields, etc.)\nsimilar to <code>Self::parse_term_arg</code>, but doesn’t expect to …\nsimilar to <code>Self::parse_term_arg</code>, but cannot call methods, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a very stupid error, its a bit annoying to return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDenoted by <code>\\</code>\nRepresent v2 and above\nThis is inside DSDT and SSDT\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nWill fill the table from the header data, and zero out …\nWill fill the table from the header data, and zero out …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nallocates a new RDST\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrint the ASL content as parsed, without moving anything\nDo not print the ASL content\nReorganize the content of the ASL code to be in an easier …\nAllow <code>HPET</code> (if present), otherwise always use <code>PIT</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog the AML content as ASL code on boot from ACPI tables\nLog file\nLog level\nThis is extra work, but it’s done purely for debugging …\nEnable the UART\nUART baudrate\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA fixed size ring buffer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSAFETY: the data pointed to by <code>gdtr</code> must be static and …\nSAFETY: the data pointed to by <code>ldtr</code> must be static and …\nSystem Descriptor Entry for GDT\nSAFETY: TSS is only used when <code>GDT</code> is locked, so its safe …\nTask State Segment\nUser Descriptor Entry for GDT\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis should be called only once, otherwise, it will crash\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMust make sure that the data is a valid descriptor …\nMust make sure that the data is a valid descriptor …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPuts the handler in the IDT and returns the …\nPuts the handler in the IDT and returns the …\nPuts the handler in the IDT and returns the …\nReturns the argument unchanged.\nGlobal handlers that have several purposes and doesn’t …\nCalls <code>U::from(self)</code>.\ndisable the Local interrupts 0 and 1\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInforms the device that it is cloned.\nInforms the device that it is closed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDevices such as PS/2 keyboard, mouse, serial ports, etc.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen the device. This tells the device manager that when …\nAccurate always increasing time source\ndevice used to get the time\ndevices sorted based on their rating\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current time of the device with no relation to …\nReturns the granularity of the device in nanoseconds, i.e. …\nHardware Timer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe last time we ticked the system time\nReturns the name of the device\nnanoseconds added to <code>seconds</code>\nReturns the rating of the device, i.e. how good it is The …\nReturns true if the device needs to be calibration i.e. it …\nUsed to determine the outside world time and use it as a …\nseconds passed since a fixed point in time\nThe time when the system was started\nThe system time since the start\nSystem time\nWill update the device if this one is different\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the number of femtoseconds per counter tick\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTicks and returns the total number of ticks since creation\nThis is used to offset the calculated seconds for all days …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFrequency of the TSC, how many nano seconds per cycle …\nThe latency of reading the TSC\nNanoseconds offset that we started counting from it may be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote that this is only valid if the device is not busy and …\nThis is just a helper definition, and should not be used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of key events that can be buffered before being …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of events that can be buffered before being …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nPipe is a device that allows two processes to communicate …\nRepresent one side of a pipe. Check <code>create_pipe_pair</code> for …\nThe buffer of the pipe.\nCreate a connected pipe pair. The first returned file is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nDynamic linking information\nDynamic loader symbol table\nExtended section indices\nArray of destructors\nSection group\nSymbol hash table\nArray of constructors\nUninitialized space\nNote section\nUnused\nNumber of defined types\nStart OS-specific\nArray of pre-constructors\nProgram data\nRelocation entries, no addends\nRelocation entries with addends\nReserved\nString table\nSymbol table\nAddress in memory image\nAddress in memory image\nAlignment\nAlignment\nEntry size if section holds table (such as symbol table)\nEntry size if section holds table (such as symbol table)\nSection flags\nSection flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMisc info\nMisc info\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink to other section\nLink to other section\nSection name (string tbl index)\nSection name (string tbl index)\nOffset in file\nOffset in file\nSize of section\nSize of section\nSection type\nSection type\nThis is not used at all, just an indicator in …\nA handle to a directory, it has the inode which controls …\nA handle to a file, it has the inode which controls the …\nA filesystem trait, this is the main interface to interact …\nA node in the filesystem, can be a file or a directory\nA node of the filesystem, it can be anything, a file, a …\nThis is a move verbose method than <code>Clone::clone</code>, as I want …\nClose the file in the <code>inode</code>, this is called when the file …\nLoads the hard disk specified in the argument it will load …\nCreate a new entry in the <code>parent</code> directory with the <code>name</code> …\nTells the filesystem to flush the content of this file to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen the inode of a path, this include directories and …\nOpen the root directory of the filesystem\nThe position of this file in the parent directory the size …\nA library for parsing, manipulating Paths that follow unix …\nRead the directory entries in the <code>inode</code>, and call the …\nRead the file in the <code>inode</code> at the <code>position</code> and put the …\nSet the size of the file in the <code>inode</code> to <code>size</code>, this is …\nTraverse the directory in the <code>inode</code> and return the entry …\nUnmount the filesystem, this is called before the …\nWrite the file in the <code>inode</code> at the <code>position</code> with the data …\nFile Allocation Table buffer\nA custom version of <code>fs::Node</code> for fat systems\nBuffer for reading or writing file data\nOne bit for each sector in the FAT\nSame as <code>release_cluster</code>, but doesn’t release it, i.e. …\nHelper method to write the dirty parts of a cluster into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nA temporary initializer for the FAT, will be replaced with …\nNumber of active users of this cluster\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the mapping for the given path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMounts a given filesystem at the specified path.\nTraverses the filesystem mapping tree and applies a …\nUnmounts all filesystems from the virtual filesystem. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over <code>Path</code> and its ancestors.\nA single component of a path.\nAn iterator over the <code>Component</code>s of a <code>Path</code>.\nA reference to the current directory, i.e., <code>.</code>.\nAn iterator over the <code>Component</code>s of a <code>Path</code>, as <code>str</code> slices.\nA normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.\nA reference to the parent directory, i.e., <code>..</code>.\nA slice of a path (akin to <code>str</code>).\nAn owned, mutable path (akin to <code>String</code>).\nThe root directory component, appears after any prefix and …\nuse unix paths separator\nComponent parsing works by a double-ended state machine; …\nAn error returned from <code>Path::strip_prefix</code> if the prefix …\nProduces an iterator over <code>Path</code> and its ancestors.\nExtracts a slice corresponding to the portion of the path …\nExtracts a slice corresponding to the portion of the path …\nCoerces to a <code>Path</code> slice.\nYields the underlying bytes.\nExtracts the underlying <code>str</code>.\nInvokes <code>capacity</code> on the underlying instance of <code>String</code>.\nInvokes <code>clear</code> on the underlying instance of <code>String</code>.\nProduces an iterator over the <code>Component</code>s of the path.\nReturns a newtype that implements Display for safely …\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nReturns the final component of the <code>Path</code>, if there is one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>String</code> into a <code>PathBuf</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if the path ends with a separator.\nCheck if the first char is <code>/</code>\nReturns <code>true</code> if the <code>Path</code> has a root.\nIs the <em>original</em> path rooted?\nShould the normalized path include a leading . ?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>PathBuf</code> into a boxed <code>Path</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConsumes the <code>PathBuf</code>, yielding its internal <code>String</code> storage.\nReturns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …\nChecks if the path is empty.\nReturns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.\nChecks if the path is the root directory.\nProduces an iterator over the path’s components viewed …\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nDirectly wraps a string slice as a <code>Path</code> slice.\nAllocates an empty <code>PathBuf</code>.\nReturns the <code>Path</code> without its final component, if there is …\nTruncates <code>self</code> to <code>self.parent</code>.\nExtends <code>self</code> with <code>path</code>.\nInvokes <code>reserve</code> on the underlying instance of <code>String</code>.\nInvokes <code>reserve_exact</code> on the underlying instance of <code>String</code>.\nUpdates <code>self.file_name</code> to <code>file_name</code>.\nInvokes <code>shrink_to</code> on the underlying instance of <code>String</code>.\nInvokes <code>shrink_to_fit</code> on the underlying instance of <code>String</code>.\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.\nConverts a <code>Path</code> to an owned <code>PathBuf</code>.\nYields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.\nConverts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nCreates a new <code>PathBuf</code> with a given capacity used to create …\nCreates an owned <code>PathBuf</code> like <code>self</code> but with the given file …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nblit the src framebuffer to the current framebuffer <code>fast</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the position in the memory buffer for a given pixel …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of the memory buffer required to hold the …\nGet the pixel slice at a given position (read-only)\nGet the pixel slice at a given position\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an early console, this is used before the kernel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSAFETY\nCreate a late console, this is used after the kernel heap …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSAFETY: must ensure that there is no console running at …\nSAFETY\nImplement <code>tracing</code> subscriber that outputs logs to the …\nA temporary tool to allow for easy printing to the screen. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis require heap allocation sadly, as it uses <code>Arc</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove the log buffer into the heap, and we can store more …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhite on black text\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnables the divisor latch access bit\nGot data\nTransmitter is empty\nControls the Data Terminal Ready Pin\nControls the loopback mode\nControls the Out1 pin\nControls the Out2 pin (used for interrupts)\nControls the Request To Send Pin\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWill return <code>true</code> if the test pass, otherwise, the serial …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSAFETY: <code>init</code> must be called before calling this function\nSAFETY: <code>init</code> must be called before calling this function\nThis very specific to 64-bit x86 architecture, if this is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSAFETY: this must be called after <code>init</code>\nSAFETY: this must be called after <code>init</code>\nSAFETY: this must be called after <code>init</code>\nSAFETY: this must be called after <code>init</code> this must never be …\nSAFETY: this must be called after <code>init</code> this must never be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nAn ugly hack used in <code>do_for_every_user_entry</code> to get a …\nThe flags to use for the mapping, look at flags for more …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the current VM is used by the current cpu\nThe physical address to map, if <code>None</code> then it will be …\nThe size of the mapping, this is constrained by the memory …\nSafety\nSafety\nRemoves mapping of a virtual entry, it will free it from …\n<code>is_allocated</code> is used to indicate if the physical pages …\nThe virtual address to map, this is constrained by the …\nContains the error value\nContains the success value\nA wrapper over memory that is defined by its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>(virtual_start, is_fully_inside)</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new virtual space for the given <code>physical_start</code> on …\nCreate a new virtual space for the given <code>physical_start</code> on …\nCreate a new virtual space for the given <code>physical_start</code> on …\nReturn <code>None</code> if its not mapped, or if the <code>physical_start</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nRepresent a part of a network stack, and will be written …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPower device\nreverse of <code>crate::kernel_main</code> Called by <code>crate::kernel_main</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart the shutdown process\nAdd/Remove to/from the heap and return the previous end of …\nSets the exit_code and prepare to release the resources …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nA wrapper around <code>Process</code> that has extra details the …\nExit the current process, and move the <code>all_state</code> to the …\nExits all non-running (waiting and scheduled) processes. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat this function does is that it tells the scheduler to …\nSafety\nGet the absolute path, if the <code>path</code> is relative, it will …\nAllocates space fro the mapping and copies them\nAllocates space for the strings and copies them\nSet and Get process priority TODO: implement security …\nPads and aligns a value to the length of a cache line.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the inner value.\nPads and aligns a value to the length of a cache line.\n<code>PhantomData</code> to make sure dropck understands we’re …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA raw spin lock, provides <code>read_lock</code>, <code>read_unlock</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to lock the lock, returns true if successful\nTry to lock the lock, returns true if successful\nSAFETY: the caller must assure that there is only one …\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe know statically that no one else is accessing the lock, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA special method to allow accessing the variable inside …\nA special method to allow accessing the variable inside …\nA mutex that can be entered more than once by the same CPU\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe know statically that no one else is accessing the lock, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nfrom <code>vcell</code> crate Copyright (c) 2017 Jorge Aparicio\nRead-Only register\nRead-Write register\nJust like <code>Cell</code> but with volatile read / write operations\nWrite-Only register\nReturns a raw pointer to the underlying data in the cell\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a copy of the contained value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms a read-modify-write operation\nCreates a new <code>VolatileCell</code> containing the given value\nReads the value of the register\nReads the value of the register\nSets the contained value\nWrites a <code>value</code> into the register\nWrites <code>value</code> into the register")